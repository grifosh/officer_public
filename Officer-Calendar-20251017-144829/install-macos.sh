#!/bin/bash

# üçé Officer Calendar - –£–ª—É—á—à–µ–Ω–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –¥–ª—è macOS
# –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω—É–ª—è –Ω–∞ macOS

set -euo pipefail  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CURRENT_USER=$(whoami)
CURRENT_DIR=$(pwd)
DB_USER="${DB_USER:-$CURRENT_USER}"
DB_NAME="${DB_NAME:-officer}"
DB_PASSWORD="${DB_PASSWORD:-officer_pwd}"
SERVER_PORT="${SERVER_PORT:-5001}"
BACKUP_DIR="/tmp/officer_backup_$(date +%Y%m%d_%H%M%S)"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${PURPLE}"
    echo "=========================================="
    echo "üçé Officer Calendar - –£–ª—É—á—à–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "=========================================="
    echo -e "${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–∫–∞—Ç
cleanup() {
    print_warning "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    pkill -f "python src/api/main.py" 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    rm -rf "$BACKUP_DIR" 2>/dev/null || true
    
    # –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ .env –µ—Å–ª–∏ –µ—Å—Ç—å –±—ç–∫–∞–ø
    if [ -f "${BACKUP_DIR}/.env" ]; then
        cp "${BACKUP_DIR}/.env" .env
        print_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª .env"
    fi
    
    print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    exit 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
trap cleanup ERR INT TERM

# –ü—Ä–æ–≤–µ—Ä–∫–∞ macOS
check_macos() {
    if [[ "$OSTYPE" != "darwin"* ]]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è macOS"
        exit 1
    fi
    
    MACOS_VERSION=$(sw_vers -productVersion)
    print_info "macOS –≤–µ—Ä—Å–∏—è: $MACOS_VERSION"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Homebrew
check_homebrew() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Homebrew..."
    
    if command -v brew &> /dev/null; then
        BREW_VERSION=$(brew --version | head -n1)
        print_success "Homebrew –Ω–∞–π–¥–µ–Ω: $BREW_VERSION"
        return 0
    else
        print_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew
install_homebrew() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Homebrew..."
    
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Homebrew –≤ PATH –¥–ª—è Apple Silicon Mac
    if [[ $(uname -m) == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
    
    print_success "Homebrew —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
install_python() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
    
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
        print_success "Python $PYTHON_VERSION —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python —á–µ—Ä–µ–∑ Homebrew..."
        brew install python3
        print_success "Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL
install_postgresql() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
    
    if command -v psql &> /dev/null; then
        PSQL_VERSION=$(psql --version | cut -d' ' -f3)
        print_success "PostgreSQL $PSQL_VERSION —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL —á–µ—Ä–µ–∑ Homebrew..."
        brew install postgresql@15
        brew services start postgresql@15
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ PostgreSQL –≤ PATH
        echo 'export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"' >> ~/.zshrc
        export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"
        
        print_success "PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL
check_postgresql_status() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL..."
    
    if brew services list | grep postgresql | grep started > /dev/null; then
        print_success "PostgreSQL –∑–∞–ø—É—â–µ–Ω"
        return 0
    else
        print_warning "PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å..."
        brew services start postgresql@15
        sleep 3
        
        if brew services list | grep postgresql | grep started > /dev/null; then
            print_success "PostgreSQL –∑–∞–ø—É—â–µ–Ω"
            return 0
        else
            print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL"
            return 1
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port_availability() {
    local port=$1
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ $port..."
    
    if lsof -i :$port > /dev/null 2>&1; then
        print_warning "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç"
        local pid=$(lsof -ti :$port)
        print_info "–ü—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç: PID $pid"
        
        read -p "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            kill -9 $pid 2>/dev/null || true
            sleep 2
            print_success "–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞"
            exit 1
        fi
    else
        print_success "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_database() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    if psql -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '$DB_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '$DB_NAME'..."
        createdb "$DB_NAME"
        print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '$DB_USER'..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if psql -d "$DB_NAME" -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER';" | grep -q 1; then
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '$DB_USER' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        psql -d "$DB_NAME" -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';"
        print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω"
    fi
    
    # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤
    psql -d "$DB_NAME" -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
    psql -d "$DB_NAME" -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $DB_USER;"
    psql -d "$DB_NAME" -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $DB_USER;"
    psql -d "$DB_NAME" -c "GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO $DB_USER;"
    
    print_success "–ü—Ä–∞–≤–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
test_database_connection() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    
    local test_config="dbname=$DB_NAME user=$DB_USER password=$DB_PASSWORD host=localhost port=5432"
    
    if psql "$test_config" -c "SELECT 1;" > /dev/null 2>&1; then
        print_success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
check_existing_tables() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü..."
    
    local table_count=$(psql -d "$DB_NAME" -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';")
    
    if [ "$table_count" -gt 0 ]; then
        print_warning "–ù–∞–π–¥–µ–Ω–æ $table_count —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü"
        psql -d "$DB_NAME" -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE' ORDER BY table_name;"
        
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞"
            exit 1
        fi
    else
        print_info "–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database_tables() {
    print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    local sql_script="
-- –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
CREATE TABLE IF NOT EXISTS events (
    id SERIAL PRIMARY KEY,
    subject VARCHAR(500) NOT NULL,
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE NOT NULL,
    attendees JSONB DEFAULT '[]'::jsonb,
    stream VARCHAR(100),
    notes TEXT,
    description TEXT,
    location VARCHAR(500),
    google_event_id VARCHAR(255),
    google_calendar_link TEXT,
    last_google_sync TIMESTAMP WITH TIME ZONE,
    last_local_update TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    sync_source VARCHAR(50) DEFAULT 'local' CHECK (sync_source IN ('local', 'google', 'microsoft')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS attendees (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255),
    use_count INTEGER DEFAULT 1,
    last_used TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS streams (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    color VARCHAR(7) DEFAULT '#007bff',
    use_count INTEGER DEFAULT 1,
    last_used TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS open_questions (
    id SERIAL PRIMARY KEY,
    question_text TEXT NOT NULL,
    event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
    is_resolved BOOLEAN DEFAULT FALSE,
    resolved_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS question_comments (
    id SERIAL PRIMARY KEY,
    question_id INTEGER REFERENCES open_questions(id) ON DELETE CASCADE,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS meeting_notes (
    id SERIAL PRIMARY KEY,
    event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
    note_text TEXT NOT NULL,
    resolved BOOLEAN DEFAULT FALSE,
    resolved_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_events_start_time ON events(start_time);
CREATE INDEX IF NOT EXISTS idx_events_end_time ON events(end_time);
CREATE INDEX IF NOT EXISTS idx_events_google_event_id ON events(google_event_id);
CREATE INDEX IF NOT EXISTS idx_events_sync_source ON events(sync_source);
CREATE INDEX IF NOT EXISTS idx_events_stream ON events(stream);

CREATE INDEX IF NOT EXISTS idx_attendees_name ON attendees(name);
CREATE INDEX IF NOT EXISTS idx_attendees_email ON attendees(email);
CREATE INDEX IF NOT EXISTS idx_attendees_use_count ON attendees(use_count DESC);
CREATE INDEX IF NOT EXISTS idx_attendees_last_used ON attendees(last_used DESC);

CREATE INDEX IF NOT EXISTS idx_streams_name ON streams(name);
CREATE INDEX IF NOT EXISTS idx_streams_use_count ON streams(use_count DESC);
CREATE INDEX IF NOT EXISTS idx_streams_last_used ON streams(last_used DESC);

CREATE INDEX IF NOT EXISTS idx_open_questions_event_id ON open_questions(event_id);
CREATE INDEX IF NOT EXISTS idx_open_questions_resolved ON open_questions(is_resolved);
CREATE INDEX IF NOT EXISTS idx_open_questions_created ON open_questions(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_question_comments_question_id ON question_comments(question_id);
CREATE INDEX IF NOT EXISTS idx_question_comments_created ON question_comments(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_meeting_notes_event_id ON meeting_notes(event_id);
CREATE INDEX IF NOT EXISTS idx_meeting_notes_resolved ON meeting_notes(resolved);
CREATE INDEX IF NOT EXISTS idx_meeting_notes_created ON meeting_notes(created_at DESC);

-- –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
INSERT INTO streams (name, color) VALUES 
    ('–†–∞–±–æ—Ç–∞', '#007bff'),
    ('–õ–∏—á–Ω–æ–µ', '#28a745'),
    ('–í—Å—Ç—Ä–µ—á–∏', '#ffc107'),
    ('–ü—Ä–æ–µ–∫—Ç—ã', '#dc3545'),
    ('–û–±—É—á–µ–Ω–∏–µ', '#6f42c1')
ON CONFLICT (name) DO NOTHING;

INSERT INTO attendees (name, email) VALUES 
    ('–Ø', 'me@example.com'),
    ('–ö–æ–º–∞–Ω–¥–∞', 'team@example.com'),
    ('–ö–ª–∏–µ–Ω—Ç', 'client@example.com')
ON CONFLICT (name) DO NOTHING;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS \$\$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
\$\$ language 'plpgsql';

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
CREATE TRIGGER update_events_updated_at BEFORE UPDATE ON events FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_attendees_updated_at BEFORE UPDATE ON attendees FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_streams_updated_at BEFORE UPDATE ON streams FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_open_questions_updated_at BEFORE UPDATE ON open_questions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_question_comments_updated_at BEFORE UPDATE ON question_comments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_meeting_notes_updated_at BEFORE UPDATE ON meeting_notes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞
    echo "$sql_script" | psql -d "$DB_NAME" -v ON_ERROR_STOP=1
    
    print_success "–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
create_venv() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ -d "venv" ]; then
        print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf venv
        else
            print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
            return 0
        fi
    fi
    
    python3 -m venv venv
    print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
}

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
activate_venv() {
    print_info "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    source venv/bin/activate
    print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    pip install --upgrade pip
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    pip install -r requirements.txt
    
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ .env
    if [ -f ".env" ]; then
        mkdir -p "$BACKUP_DIR"
        cp .env "$BACKUP_DIR/"
        print_warning "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø"
        print_info "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–∞
    if [ ! -f "env.example.txt" ]; then
        print_error "–§–∞–π–ª env.example.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cp env.example.txt .env
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_info "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DB_HOST="localhost"
    DB_PORT="5432"
    ENVIRONMENT="development"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    sed -i '' "s/DB_NAME=.*/DB_NAME=$DB_NAME/" .env
    sed -i '' "s/DB_USER=.*/DB_USER=$DB_USER/" .env
    sed -i '' "s/DB_PASSWORD=.*/DB_PASSWORD=$DB_PASSWORD/" .env
    sed -i '' "s/DB_HOST=.*/DB_HOST=$DB_HOST/" .env
    sed -i '' "s/DB_PORT=.*/DB_PORT=$DB_PORT/" .env
    sed -i '' "s/SERVER_PORT=.*/SERVER_PORT=$SERVER_PORT/" .env
    sed -i '' "s/ENVIRONMENT=.*/ENVIRONMENT=$ENVIRONMENT/" .env
    
    print_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
validate_configuration() {
    print_info "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    if [ ! -f ".env" ]; then
        print_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if ! test_database_connection; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
        return 1
    fi
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
    return 0
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
create_logs_dir() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤..."
    mkdir -p logs
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
verify_installation() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! python3 --version &> /dev/null; then
        print_error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if ! psql --version &> /dev/null; then
        print_error "PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ ! -d "venv" ]; then
        print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    source venv/bin/activate
    if ! python -c "import fastapi" &> /dev/null; then
        print_error "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        return 1
    fi
    
    print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    return 0
}

# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
test_run() {
    print_info "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
    check_port_availability "$SERVER_PORT"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if ! test_database_connection; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        return 1
    fi
    
    source venv/bin/activate
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PYTHONPATH
    export PYTHONPATH=$(pwd):${PYTHONPATH:-}
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f ".env" ]; then
        export $(cat .env | grep -v '^#' | xargs)
    fi
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn
    print_info "–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn..."
    uvicorn src.api.main:app --host 0.0.0.0 --port $SERVER_PORT --reload &
    APP_PID=$!
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if curl -s http://localhost:$SERVER_PORT > /dev/null; then
        print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        kill $APP_PID
        wait $APP_PID 2>/dev/null || true
        
        return 0
    else
        print_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å"
        kill $APP_PID 2>/dev/null || true
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ launchd —Å–µ—Ä–≤–∏—Å–∞
create_launchd_service() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ launchd —Å–µ—Ä–≤–∏—Å–∞..."
    
    read -p "–°–æ–∑–¥–∞—Ç—å launchd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return 0
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ plist —Ñ–∞–π–ª–∞
    cat > ~/Library/LaunchAgents/com.officer.calendar.plist << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.officer.calendar</string>
    <key>ProgramArguments</key>
    <array>
        <string>$CURRENT_DIR/venv/bin/uvicorn</string>
        <string>src.api.main:app</string>
        <string>--host</string>
        <string>0.0.0.0</string>
        <string>--port</string>
        <string>$SERVER_PORT</string>
        <string>--reload</string>
    </array>
    <key>WorkingDirectory</key>
    <string>$CURRENT_DIR</string>
    <key>EnvironmentVariables</key>
    <dict>
        <key>PYTHONPATH</key>
        <string>$CURRENT_DIR</string>
    </dict>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
    <key>StandardOutPath</key>
    <string>$CURRENT_DIR/logs/officer.out.log</string>
    <key>StandardErrorPath</key>
    <string>$CURRENT_DIR/logs/officer.err.log</string>
</dict>
</plist>
EOF
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    launchctl load ~/Library/LaunchAgents/com.officer.calendar.plist
    
    print_success "Launchd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω"
    print_info "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º:"
    print_info "  –ó–∞–ø—É—Å–∫: launchctl start com.officer.calendar"
    print_info "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: launchctl stop com.officer.calendar"
    print_info "  –°—Ç–∞—Ç—É—Å: launchctl list | grep officer"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ macOS
    check_macos
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    if [ ! -f "requirements.txt" ] || [ ! -f "src/api/main.py" ]; then
        print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ Officer Calendar"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    mkdir -p "$BACKUP_DIR"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! check_homebrew; then
        install_homebrew
    fi
    
    install_python
    install_postgresql
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PostgreSQL
    if ! check_postgresql_status; then
        print_error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_database
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    if ! test_database_connection; then
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    check_existing_tables
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    init_database_tables
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    create_venv
    activate_venv
    install_dependencies
    setup_environment
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if ! validate_configuration; then
        print_error "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞"
        exit 1
    fi
    
    create_logs_dir
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if ! verify_installation; then
        print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        exit 1
    fi
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    if test_run; then
        print_success "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
    else
        print_warning "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    create_launchd_service
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    rm -rf "$BACKUP_DIR"
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    echo
    print_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo
    print_info "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
    echo "  ./start.sh"
    echo
    print_info "–ò–ª–∏ –≤—Ä—É—á–Ω—É—é:"
    echo "  source venv/bin/activate"
    echo "  export PYTHONPATH=\$(pwd):\${PYTHONPATH:-}"
    echo "  uvicorn src.api.main:app --host 0.0.0.0 --port $SERVER_PORT --reload"
    echo
    print_info "–ò–ª–∏ —á–µ—Ä–µ–∑ launchd (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω):"
    echo "  launchctl start com.officer.calendar"
    echo
    print_info "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:$SERVER_PORT"
    echo
    print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:"
    echo "  - Google Calendar API (—Ñ–∞–π–ª credentials.json)"
    echo "  - Microsoft Graph API (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env)"
    echo
    print_info "–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: DEPLOYMENT_GUIDE.md"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --test         –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫"
        echo "  --service      –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ launchd —Å–µ—Ä–≤–∏—Å–∞"
        echo
        exit 0
        ;;
    --test)
        print_header
        test_run
        exit $?
        ;;
    --service)
        print_header
        create_launchd_service
        exit 0
        ;;
    *)
        main
        ;;
esac
