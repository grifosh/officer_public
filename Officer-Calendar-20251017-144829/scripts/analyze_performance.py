"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import psycopg2
from psycopg2.extras import RealDictCursor
import os
from dotenv import load_dotenv
import time

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    "dbname": os.getenv("DB_NAME", "officer"),
    "user": os.getenv("DB_USER", "grifosh"),
    "password": os.getenv("DB_PASSWORD", ""),
    "host": os.getenv("DB_HOST", "localhost"),
    "port": int(os.getenv("DB_PORT", "5432"))
}

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    return psycopg2.connect(**DB_CONFIG, cursor_factory=RealDictCursor)

def analyze_query_performance():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    print("‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    test_queries = [
        {
            "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥",
            "query": "SELECT id, subject, start_time, end_time FROM events WHERE start_time >= '2025-10-15' AND end_time <= '2025-10-16' ORDER BY start_time LIMIT 10;"
        },
        {
            "name": "–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏",
            "query": "SELECT id, name, email, use_count FROM attendees WHERE name ILIKE '%Greg%' ORDER BY use_count DESC LIMIT 10;"
        },
        {
            "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
            "query": "SELECT id, question_text, person, topic, created_at FROM open_questions WHERE is_resolved = false ORDER BY created_at DESC LIMIT 10;"
        },
        {
            "name": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            "query": "SELECT id, name, email, use_count, last_used FROM attendees ORDER BY use_count DESC, last_used DESC LIMIT 10;"
        },
        {
            "name": "–ü–æ–∏—Å–∫ —Å—Ç—Ä–∏–º–æ–≤ –ø–æ –∏–º–µ–Ω–∏",
            "query": "SELECT id, name, created_at FROM streams WHERE name ILIKE '%RPS%' ORDER BY created_at DESC LIMIT 10;"
        }
    ]
    
    for test in test_queries:
        print(f"\nüîç –¢–µ—Å—Ç: {test['name']}")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            start_time = time.time()
            cur.execute(test['query'])
            results = cur.fetchall()
            execution_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}ms")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(results)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if results:
                print("–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for i, row in enumerate(results[:3]):
                    print(f"  {i+1}. {dict(row)}")
                if len(results) > 3:
                    print(f"  ... –∏ –µ—â–µ {len(results) - 3} —Å—Ç—Ä–æ–∫")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
    
    cur.close()
    conn.close()

def analyze_index_usage():
    """–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    print("\nüìá –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        cur.execute("""
            SELECT 
                schemaname,
                tablename,
                indexname,
                idx_tup_read,
                idx_tup_fetch,
                idx_scan
            FROM pg_stat_user_indexes 
            WHERE schemaname = 'public'
            ORDER BY idx_scan DESC
            LIMIT 15;
        """)
        
        index_stats = cur.fetchall()
        
        print("–¢–æ–ø-15 –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤:")
        for stat in index_stats:
            scans = stat['idx_scan'] or 0
            reads = stat['idx_tup_read'] or 0
            fetches = stat['idx_tup_fetch'] or 0
            
            print(f"  {stat['tablename']}.{stat['indexname']}")
            print(f"    –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {scans}")
            print(f"    –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∫–æ—Ä—Ç–µ–∂–µ–π: {reads}")
            print(f"    –ü–æ–ª—É—á–µ–Ω–æ –∫–æ—Ä—Ç–µ–∂–µ–π: {fetches}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    
    cur.close()
    conn.close()

def analyze_table_statistics():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:")
    print("=" * 50)
    
    try:
        cur.execute("""
            SELECT 
                schemaname,
                tablename,
                n_tup_ins as inserts,
                n_tup_upd as updates,
                n_tup_del as deletes,
                n_live_tup as live_tuples,
                n_dead_tup as dead_tuples,
                last_vacuum,
                last_autovacuum,
                last_analyze,
                last_autoanalyze
            FROM pg_stat_user_tables 
            WHERE schemaname = 'public'
            ORDER BY n_live_tup DESC;
        """)
        
        table_stats = cur.fetchall()
        
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:")
        for stat in table_stats:
            print(f"  {stat['tablename']}:")
            print(f"    –ñ–∏–≤—ã—Ö —Å—Ç—Ä–æ–∫: {stat['live_tuples']}")
            print(f"    –ú–µ—Ä—Ç–≤—ã—Ö —Å—Ç—Ä–æ–∫: {stat['dead_tuples']}")
            print(f"    –í—Å—Ç–∞–≤–æ–∫: {stat['inserts']}")
            print(f"    –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stat['updates']}")
            print(f"    –£–¥–∞–ª–µ–Ω–∏–π: {stat['deletes']}")
            print(f"    –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {stat['last_analyze']}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    cur.close()
    conn.close()

def suggest_optimizations():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("=" * 50)
    
    suggestions = [
        "1. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ VACUUM ANALYZE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ autovacuum –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏",
        "3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü",
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ EXPLAIN ANALYZE –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
        "5. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ",
        "6. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —á–∞—Å—Ç—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π WHERE",
        "7. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LIMIT –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–æ–∫",
        "8. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å JOIN'–∞–º–∏",
        "9. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
        "10. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ connection pooling (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ!)"
    ]
    
    for suggestion in suggestions:
        print(f"  {suggestion}")
    
    print("\nüîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("  VACUUM ANALYZE;  -- –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü")
    print("  REINDEX DATABASE officer;  -- –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã")
    print("  SELECT pg_stat_reset();  -- –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("=" * 60)
    
    try:
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        analyze_query_performance()
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        analyze_index_usage()
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü
        analyze_table_statistics()
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        suggest_optimizations()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
