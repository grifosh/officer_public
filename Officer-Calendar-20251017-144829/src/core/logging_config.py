import logging
import logging.handlers
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
import os
from datetime import datetime
import json

class DetailedFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def format(self, record):
        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        timestamp = datetime.fromtimestamp(record.created).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        level = record.levelname
        logger_name = record.name
        message = record.getMessage()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        extra_info = []
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–æ–∫–µ
        if hasattr(record, 'funcName') and record.funcName:
            extra_info.append(f"func={record.funcName}")
        
        if hasattr(record, 'lineno') and record.lineno:
            extra_info.append(f"line={record.lineno}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –ø–æ—Ç–æ–∫–µ
        if hasattr(record, 'process') and record.process:
            extra_info.append(f"pid={record.process}")
        
        if hasattr(record, 'thread') and record.thread:
            extra_info.append(f"tid={record.thread}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ record
        if hasattr(record, 'user_id'):
            extra_info.append(f"user={record.user_id}")
        
        if hasattr(record, 'request_id'):
            extra_info.append(f"req={record.request_id}")
        
        if hasattr(record, 'event_id'):
            extra_info.append(f"event={record.event_id}")
        
        if hasattr(record, 'operation'):
            extra_info.append(f"op={record.operation}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        extra_str = " | ".join(extra_info) if extra_info else ""
        if extra_str:
            extra_str = f" | {extra_str}"
        
        return f"{timestamp} | {level:8} | {logger_name:20} | {message}{extra_str}"

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # 1. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (INFO –∏ –≤—ã—à–µ)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_formatter = logging.Formatter(
        '%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s',
        datefmt='%H:%M:%S'
    )
    console_handler.setFormatter(console_formatter)
    root_logger.addHandler(console_handler)
    
    # 2. –û–±—â–∏–π –ª–æ–≥ —Ñ–∞–π–ª (DEBUG –∏ –≤—ã—à–µ, —Ä–æ—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É)
    general_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'officer.log'),
        maxBytes=10*1024*1024,  # 10MB
        backupCount=7,  # 7 —Ñ–∞–π–ª–æ–≤ = –Ω–µ–¥–µ–ª—è
        encoding='utf-8'
    )
    general_handler.setLevel(logging.DEBUG)
    general_handler.setFormatter(DetailedFormatter())
    root_logger.addHandler(general_handler)
    
    # 3. –õ–æ–≥ –æ—à–∏–±–æ–∫ (ERROR –∏ –≤—ã—à–µ, —Ä–æ—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É)
    error_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'errors.log'),
        maxBytes=5*1024*1024,  # 5MB
        backupCount=14,  # 14 —Ñ–∞–π–ª–æ–≤ = 2 –Ω–µ–¥–µ–ª–∏
        encoding='utf-8'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(DetailedFormatter())
    root_logger.addHandler(error_handler)
    
    # 4. –õ–æ–≥ API –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    api_handler = logging.handlers.TimedRotatingFileHandler(
        os.path.join(log_dir, 'api.log'),
        when='midnight',
        interval=1,
        backupCount=7,  # 7 –¥–Ω–µ–π
        encoding='utf-8'
    )
    api_handler.setLevel(logging.INFO)
    api_handler.setFormatter(DetailedFormatter())
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è API
    api_logger = logging.getLogger('api')
    api_logger.addHandler(api_handler)
    api_logger.setLevel(logging.INFO)
    api_logger.propagate = False  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    
    # 5. –õ–æ–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    db_handler = logging.handlers.TimedRotatingFileHandler(
        os.path.join(log_dir, 'database.log'),
        when='midnight',
        interval=1,
        backupCount=7,  # 7 –¥–Ω–µ–π
        encoding='utf-8'
    )
    db_handler.setLevel(logging.DEBUG)
    db_handler.setFormatter(DetailedFormatter())
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –ë–î
    db_logger = logging.getLogger('database')
    db_logger.addHandler(db_handler)
    db_logger.setLevel(logging.DEBUG)
    db_logger.propagate = False
    
    # 6. –õ–æ–≥ Google Calendar (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    gc_handler = logging.handlers.TimedRotatingFileHandler(
        os.path.join(log_dir, 'google_calendar.log'),
        when='midnight',
        interval=1,
        backupCount=7,  # 7 –¥–Ω–µ–π
        encoding='utf-8'
    )
    gc_handler.setLevel(logging.DEBUG)
    gc_handler.setFormatter(DetailedFormatter())
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è Google Calendar
    gc_logger = logging.getLogger('google_calendar')
    gc_logger.addHandler(gc_handler)
    gc_logger.setLevel(logging.DEBUG)
    gc_logger.propagate = False
    
    # 7. –õ–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    sync_handler = logging.handlers.TimedRotatingFileHandler(
        os.path.join(log_dir, 'auto_sync.log'),
        when='midnight',
        interval=1,
        backupCount=7,  # 7 –¥–Ω–µ–π
        encoding='utf-8'
    )
    sync_handler.setLevel(logging.DEBUG)
    sync_handler.setFormatter(DetailedFormatter())
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync_logger = logging.getLogger('auto_sync')
    sync_logger.addHandler(sync_handler)
    sync_logger.setLevel(logging.DEBUG)
    sync_logger.propagate = False
    
    # 7. –õ–æ–≥ backup'–æ–≤ —Å–æ–±—ã—Ç–∏–π (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
    backup_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'event_backups.log'),
        maxBytes=50*1024*1024,  # 50MB
        backupCount=30,  # 30 —Ñ–∞–π–ª–æ–≤ = –º–µ—Å—è—Ü
        encoding='utf-8'
    )
    backup_handler.setLevel(logging.INFO)
    backup_handler.setFormatter(DetailedFormatter())
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è backup'–æ–≤
    backup_logger = logging.getLogger('event_backups')
    backup_logger.addHandler(backup_handler)
    backup_logger.setLevel(logging.INFO)
    backup_logger.propagate = False
    
    # 8. –õ–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    restore_handler = logging.handlers.RotatingFileHandler(
        os.path.join(log_dir, 'event_restores.log'),
        maxBytes=10*1024*1024,  # 10MB
        backupCount=14,  # 14 —Ñ–∞–π–ª–æ–≤ = 2 –Ω–µ–¥–µ–ª–∏
        encoding='utf-8'
    )
    restore_handler.setLevel(logging.INFO)
    restore_handler.setFormatter(DetailedFormatter())
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    restore_logger = logging.getLogger('event_restores')
    restore_logger.addHandler(restore_handler)
    restore_logger.setLevel(logging.INFO)
    restore_logger.propagate = False
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π
    sync_deletion_handler = logging.handlers.TimedRotatingFileHandler(
        'logs/sync_deletions.log',
        when='midnight',
        interval=1,
        backupCount=7,  # –•—Ä–∞–Ω–∏–º –Ω–µ–¥–µ–ª—é
        encoding='utf-8'
    )
    sync_deletion_handler.setLevel(logging.INFO)
    sync_deletion_handler.setFormatter(DetailedFormatter())
    
    sync_deletion_logger = logging.getLogger('sync_deletions')
    sync_deletion_logger.addHandler(sync_deletion_handler)
    sync_deletion_logger.setLevel(logging.INFO)
    sync_deletion_logger.propagate = False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('googleapiclient').setLevel(logging.WARNING)
    logging.getLogger('google_auth_oauthlib').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('httpx').setLevel(logging.WARNING)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.path.abspath(log_dir)}")
    logger.info("üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ª–æ–≥–≥–µ—Ä—ã:")
    logger.info("   ‚Ä¢ officer.log - –æ–±—â–∏–π –ª–æ–≥ (10MB, 7 —Ñ–∞–π–ª–æ–≤)")
    logger.info("   ‚Ä¢ errors.log - –æ—à–∏–±–∫–∏ (5MB, 14 —Ñ–∞–π–ª–æ–≤)")
    logger.info("   ‚Ä¢ api.log - API –∑–∞–ø—Ä–æ—Å—ã (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 7 –¥–Ω–µ–π)")
    logger.info("   ‚Ä¢ database.log - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 7 –¥–Ω–µ–π)")
    logger.info("   ‚Ä¢ google_calendar.log - Google Calendar (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 7 –¥–Ω–µ–π)")
    logger.info("   ‚Ä¢ auto_sync.log - –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 7 –¥–Ω–µ–π)")
    logger.info("   ‚Ä¢ event_backups.log - backup'—ã —Å–æ–±—ã—Ç–∏–π (50MB, 30 —Ñ–∞–π–ª–æ–≤)")
    logger.info("   ‚Ä¢ event_restores.log - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π (10MB, 14 —Ñ–∞–π–ª–æ–≤)")

def log_api_request(method: str, path: str, status_code: int, response_time: float, 
                   user_id: str = None, request_id: str = None, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞"""
    api_logger = logging.getLogger('api')
    
    extra = {
        'operation': 'api_request',
        'method': method,
        'path': path,
        'status_code': status_code,
        'response_time': response_time
    }
    
    if user_id:
        extra['user_id'] = user_id
    if request_id:
        extra['request_id'] = request_id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra.update(kwargs)
    
    level = logging.INFO if status_code < 400 else logging.WARNING if status_code < 500 else logging.ERROR
    
    api_logger.log(level, f"{method} {path} -> {status_code} ({response_time:.3f}s)", extra=extra)

def log_database_operation(operation: str, table: str, record_id: int = None, 
                          success: bool = True, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    db_logger = logging.getLogger('database')
    
    extra = {
        'operation': operation,
        'table': table,
        'success': success
    }
    
    if record_id:
        extra['record_id'] = record_id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra.update(kwargs)
    
    level = logging.INFO if success else logging.ERROR
    
    db_logger.log(level, f"DB {operation} on {table}" + (f" (ID: {record_id})" if record_id else ""), extra=extra)

def log_google_calendar_operation(operation: str, event_id: str = None, 
                                success: bool = True, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Google Calendar"""
    gc_logger = logging.getLogger('google_calendar')
    
    extra = {
        'operation': operation,
        'success': success
    }
    
    if event_id:
        extra['event_id'] = event_id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra.update(kwargs)
    
    level = logging.INFO if success else logging.ERROR
    
    gc_logger.log(level, f"GC {operation}" + (f" (Event: {event_id})" if event_id else ""), extra=extra)

def log_auto_sync_operation(operation: str, sync_type: str = None, 
                           events_count: int = None, success: bool = True, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    sync_logger = logging.getLogger('auto_sync')
    
    extra = {
        'operation': operation,
        'success': success
    }
    
    if sync_type:
        extra['sync_type'] = sync_type
    if events_count is not None:
        extra['events_count'] = events_count
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra.update(kwargs)
    
    level = logging.INFO if success else logging.ERROR
    
    sync_logger.log(level, f"SYNC {operation}" + 
                   (f" ({sync_type})" if sync_type else "") + 
                   (f" [{events_count} events]" if events_count is not None else ""), extra=extra)

def log_event_operation(operation: str, event_id: int, event_subject: str = None, 
                       success: bool = True, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ–±—ã—Ç–∏–µ–º"""
    logger = logging.getLogger('events')
    
    extra = {
        'operation': operation,
        'event_id': event_id,
        'success': success
    }
    
    if event_subject:
        extra['event_subject'] = event_subject
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra.update(kwargs)
    
    level = logging.INFO if success else logging.ERROR
    
    logger.log(level, f"EVENT {operation} (ID: {event_id})" + 
              (f" - {event_subject}" if event_subject else ""), extra=extra)

def log_user_action(action: str, user_id: str = None, details: str = None, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger = logging.getLogger('user_actions')
    
    extra = {
        'operation': 'user_action',
        'action': action
    }
    
    if user_id:
        extra['user_id'] = user_id
    if details:
        extra['details'] = details
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra.update(kwargs)
    
    logger.info(f"USER {action}" + (f" - {details}" if details else ""), extra=extra)

def log_performance(operation: str, duration: float, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    logger = logging.getLogger('performance')
    
    extra = {
        'operation': operation,
        'duration': duration
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    extra.update(kwargs)
    
    level = logging.WARNING if duration > 1.0 else logging.INFO
    
    logger.log(level, f"PERF {operation} took {duration:.3f}s", extra=extra)

def log_detailed_event_backup(event_data: dict, operation: str, event_id: int = None):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    import json
    from datetime import datetime
    import os
    import threading
    
    logger = logging.getLogger('event_backups')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    backup_file = "logs/event_backups.log"
    if os.path.exists(backup_file):
        file_size_mb = os.path.getsize(backup_file) / (1024 * 1024)
        if file_size_mb > 45:  # –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É –≤ 50MB
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª backup –ª–æ–≥–æ–≤ –±–ª–∏–∑–æ–∫ –∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é: {file_size_mb:.1f}MB")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    sanitized_event_data = sanitize_event_data_for_logging(event_data)
    
    backup_data = {
        "timestamp": datetime.now().isoformat(),
        "operation": operation,
        "event_id": event_id,
        "event_data": sanitized_event_data,
        "backup_id": f"{operation}_{event_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
    logger.info(f"BACKUP {operation.upper()} - ID: {event_id} - {operation}_{event_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    def write_backup_async():
        try:
            os.makedirs("logs", exist_ok=True)
            with open(backup_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(backup_data, ensure_ascii=False, default=str) + "\n")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ backup: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=write_backup_async, daemon=True).start()

def sanitize_event_data_for_logging(event_data: dict) -> dict:
    """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    sanitized = {}
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    text_fields = ['subject', 'description', 'location']
    for field in text_fields:
        value = event_data.get(field, '')
        if isinstance(value, str):
            sanitized[field] = value[:1000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        else:
            sanitized[field] = str(value)[:1000] if value else ''
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    attendees = event_data.get('attendees', [])
    if isinstance(attendees, list):
        sanitized['attendees'] = attendees[:20]  # –ú–∞–∫—Å–∏–º—É–º 20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    else:
        sanitized['attendees'] = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    for key, value in event_data.items():
        if key not in sanitized:
            sanitized[key] = value
    
    return sanitized

def log_sync_deletion(event_data: dict, operation: str, success: bool, error: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π"""
    sync_deletion_logger = logging.getLogger('sync_deletions')
    
    log_data = {
        'timestamp': datetime.now().isoformat(),
        'operation': operation,
        'event_id': event_data.get('id'),
        'event_subject': event_data.get('subject'),
        'google_event_id': event_data.get('google_event_id'),
        'start_time': event_data.get('start_time'),
        'end_time': event_data.get('end_time'),
        'success': success,
        'error': error
    }
    
    if success:
        sync_deletion_logger.info(f"SYNC_DELETION {operation} | Event: {event_data.get('subject')} (ID: {event_data.get('id')}) | Google ID: {event_data.get('google_event_id')}")
    else:
        sync_deletion_logger.error(f"SYNC_DELETION {operation}_FAILED | Event: {event_data.get('subject')} (ID: {event_data.get('id')}) | Error: {error}")

def log_event_restore(restore_data: dict, success: bool, error: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    logger = logging.getLogger('event_restores')
    
    status = "SUCCESS" if success else "FAILED"
    logger.info(f"RESTORE {status} - {json.dumps(restore_data, default=str)}" + (f" - Error: {error}" if error else ""))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if __name__ != "__main__":
    setup_logging()

