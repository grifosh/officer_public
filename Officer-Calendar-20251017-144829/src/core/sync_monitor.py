#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π
–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –±—ã—Å—Ç—Ä–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
"""

import os
import time
import json
import requests
from datetime import datetime, timedelta
import argparse

class SyncDeletionMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π"""
    
    def __init__(self, base_url="http://localhost:5001"):
        self.base_url = base_url
        self.log_files = [
            "logs/auto_sync.log",
            "logs/sync_deletions.log", 
            "logs/officer.log"
        ]
    
    def check_server_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.base_url}/api/auto-sync/status", timeout=5)
            if response.status_code == 200:
                status = response.json()
                return True, status
            else:
                return False, f"HTTP {response.status_code}"
        except Exception as e:
            return False, str(e)
    
    def get_recent_deletions(self, hours=24):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —É–¥–∞–ª–µ–Ω–∏–π"""
        deletions = []
        
        for log_file in self.log_files:
            if not os.path.exists(log_file):
                continue
                
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    
                # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –æ–± —É–¥–∞–ª–µ–Ω–∏—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
                cutoff_time = datetime.now() - timedelta(hours=hours)
                
                for line in lines:
                    if 'üóëÔ∏è –£–î–ê–õ–ï–ù–û:' in line or 'SYNC_DELETION' in line:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏–∑ –ª–æ–≥–∞
                        try:
                            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ª–æ–≥–∞
                            if '|' in line:
                                time_part = line.split('|')[0].strip()
                                log_time = datetime.strptime(time_part, '%Y-%m-%d %H:%M:%S.%f')
                                
                                if log_time >= cutoff_time:
                                    deletions.append({
                                        'file': log_file,
                                        'time': log_time,
                                        'line': line.strip()
                                    })
                        except:
                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–∞–≤–Ω–æ
                            deletions.append({
                                'file': log_file,
                                'time': datetime.now(),
                                'line': line.strip()
                            })
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")
        
        return sorted(deletions, key=lambda x: x['time'], reverse=True)
    
    def check_sync_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        server_ok, server_info = self.check_server_status()
        if server_ok:
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {server_info}")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {server_info}")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
        print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –õ–û–ì-–§–ê–ô–õ–û–í:")
        for log_file in self.log_files:
            if os.path.exists(log_file):
                size = os.path.getsize(log_file)
                mtime = datetime.fromtimestamp(os.path.getmtime(log_file))
                print(f"‚úÖ {log_file}: {size} –±–∞–π—Ç, –∏–∑–º–µ–Ω–µ–Ω: {mtime.strftime('%H:%M:%S')}")
            else:
                print(f"‚ùå {log_file}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö —É–¥–∞–ª–µ–Ω–∏–π
        print("\nüóëÔ∏è –ù–ï–î–ê–í–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):")
        recent_deletions = self.get_recent_deletions(24)
        
        if recent_deletions:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(recent_deletions)} —É–¥–∞–ª–µ–Ω–∏–π:")
            for deletion in recent_deletions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                print(f"  üïê {deletion['time'].strftime('%H:%M:%S')} | {deletion['line']}")
        else:
            print("‚ÑπÔ∏è –£–¥–∞–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –ë–î
        print("\nüìä –°–û–ë–´–¢–ò–Ø –í –ë–î:")
        try:
            response = requests.get(f"{self.base_url}/api/events?date=2025-10-13")
            if response.status_code == 200:
                events = response.json()
                print(f"üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(events)}")
                
                # –°–æ–±—ã—Ç–∏—è —Å Google ID
                with_google_id = [e for e in events if e.get('google_event_id')]
                print(f"üîó –° —Å–æ–±—ã—Ç–∏–π —Å Google ID: {len(with_google_id)}")
                
                # –î—É–±–ª–∏–∫–∞—Ç—ã
                time_groups = {}
                for event in events:
                    start_time = event['start'].split('T')[1][:5] if 'T' in event['start'] else event['start']
                    end_time = event['end'].split('T')[1][:5] if 'T' in event['end'] else event['end']
                    time_key = f'{start_time}-{end_time}'
                    if time_key not in time_groups:
                        time_groups[time_key] = []
                    time_groups[time_key].append(event)
                
                duplicates = {k: v for k, v in time_groups.items() if len(v) > 1}
                if duplicates:
                    print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {len(duplicates)}")
                else:
                    print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        
        return True
    
    def monitor_continuously(self, interval=60):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while True:
                print(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')} - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                self.check_sync_health()
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def test_sync_deletion(self):
        """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π"""
        print("üß™ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –£–î–ê–õ–ï–ù–ò–ô")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            response = requests.get(f"{self.base_url}/api/events?date=2025-10-13")
            if response.status_code == 200:
                events_before = response.json()
                print(f"üìä –°–æ–±—ã—Ç–∏–π –¥–æ —Ç–µ—Å—Ç–∞: {len(events_before)}")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)...")
                time.sleep(300)  # 5 –º–∏–Ω—É—Ç
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ
                response = requests.get(f"{self.base_url}/api/events?date=2025-10-13")
                if response.status_code == 200:
                    events_after = response.json()
                    print(f"üìä –°–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: {len(events_after)}")
                    
                    if len(events_after) != len(events_before):
                        print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏–π: {len(events_after) - len(events_before)}")
                    else:
                        print("‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π')
    parser.add_argument('--check', action='store_true', help='–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞')
    parser.add_argument('--monitor', action='store_true', help='–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    parser.add_argument('--test', action='store_true', help='–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--interval', type=int, default=60, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    args = parser.parse_args()
    
    monitor = SyncDeletionMonitor()
    
    if args.check:
        monitor.check_sync_health()
    elif args.monitor:
        monitor.monitor_continuously(args.interval)
    elif args.test:
        monitor.test_sync_deletion()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        monitor.check_sync_health()

if __name__ == "__main__":
    main()
