#!/usr/bin/env python3
"""
–£–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ open_questions
–°—á–∏—Ç–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ
"""

import psycopg2
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432'),
    'database': os.getenv('DB_NAME', 'officer'),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', 'password')
}

def clean_duplicates_smart():
    """–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –Ω–∞—á–∞–ª—É —Ç–µ–∫—Å—Ç–∞"""
    print("üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ open_questions")
    print("=" * 50)
    
    conn = psycopg2.connect(**DB_CONFIG)
    cur = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        cur.execute("SELECT COUNT(*) FROM open_questions")
        total_before = cur.fetchone()[0]
        print(f"üìä –í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏: {total_before}")
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞—á–∞–ª—É —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Å–æ–±—ã—Ç–∏—é
        cur.execute("""
            SELECT 
                COALESCE(event_id, -1) as event_id_group,
                LEFT(LOWER(TRIM(question_text)), 200) as text_start,
                COUNT(*) as count,
                ARRAY_AGG(id ORDER BY created_at DESC) as ids,
                ARRAY_AGG(created_at ORDER BY created_at DESC) as created_dates,
                ARRAY_AGG(event_id ORDER BY created_at DESC) as event_ids
            FROM open_questions 
            GROUP BY COALESCE(event_id, -1), LEFT(LOWER(TRIM(question_text)), 200)
            HAVING COUNT(*) > 1
            ORDER BY event_id_group, count DESC
        """)
        
        duplicates = cur.fetchall()
        
        if not duplicates:
            print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        print()
        
        total_deleted = 0
        
        for event_id_group, text_start, count, ids, created_dates, event_ids in duplicates:
            event_display = event_id_group if event_id_group != -1 else 'NULL'
            print(f"üîç –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_display}:")
            print(f"   –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: \"{text_start[:100]}...\"")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
            print(f"   ID: {ids}")
            print(f"   Event IDs: {event_ids}")
            print(f"   –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è: {created_dates}")
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π (–ø–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ)
            keep_id = ids[0]
            delete_ids = ids[1:]
            
            print(f"   ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º ID {keep_id} (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)")
            print(f"   üóëÔ∏è –£–¥–∞–ª—è–µ–º ID: {delete_ids}")
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for delete_id in delete_ids:
                cur.execute("DELETE FROM open_questions WHERE id = %s", (delete_id,))
                total_deleted += 1
            
            print()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {total_deleted} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        cur.execute("SELECT COUNT(*) FROM open_questions")
        total_after = cur.fetchone()[0]
        print(f"üìä –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {total_after}")
        print(f"üìâ –£–¥–∞–ª–µ–Ω–æ: {total_before - total_after}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

if __name__ == "__main__":
    clean_duplicates_smart()
