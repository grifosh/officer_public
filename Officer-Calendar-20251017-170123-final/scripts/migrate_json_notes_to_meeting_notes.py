#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ JSON-–º–∞—Å—Å–∏–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü—É meeting_notes
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import os
import json
from datetime import datetime

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return psycopg2.connect(
        host=os.getenv('DB_HOST', 'localhost'),
        port=int(os.getenv('DB_PORT', '5432')),
        dbname=os.getenv('DB_NAME', 'officer'),
        user=os.getenv('DB_USER', 'grifosh'),
        password=os.getenv('DB_PASSWORD', '')
    )

def migrate_json_notes_to_meeting_notes():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–∑ JSON-–º–∞—Å—Å–∏–≤–∞ –≤ —Ç–∞–±–ª–∏—Ü—É meeting_notes"""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        print("üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π —Å JSON-–º–∞—Å—Å–∏–≤–∞–º–∏ –≤ –ø–æ–ª–µ notes...")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è —Å JSON-–º–∞—Å—Å–∏–≤–∞–º–∏ –≤ –ø–æ–ª–µ notes
        cur.execute("""
            SELECT id, subject, notes, start_time
            FROM events 
            WHERE notes IS NOT NULL 
            AND notes != '[]' 
            AND notes LIKE '[%'
            ORDER BY start_time DESC
        """)
        
        events_with_json_notes = cur.fetchall()
        
        if not events_with_json_notes:
            print("‚úÖ –°–æ–±—ã—Ç–∏–π —Å JSON-–º–∞—Å—Å–∏–≤–∞–º–∏ –≤ –ø–æ–ª–µ notes –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(events_with_json_notes)} —Å–æ–±—ã—Ç–∏–π —Å JSON-–º–∞—Å—Å–∏–≤–∞–º–∏:")
        for event in events_with_json_notes:
            print(f"  - ID: {event['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {event['subject']}, –í—Ä–µ–º—è: {event['start_time']}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
        for event in events_with_json_notes:
            event_id = event['id']
            event_subject = event['subject']
            notes_json = event['notes']
            
            print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {event_id}: {event_subject}")
            
            try:
                # –ü–∞—Ä—Å–∏–º JSON
                notes_data = json.loads(notes_json)
                print(f"  üìù –ù–∞–π–¥–µ–Ω–æ {len(notes_data)} –∑–∞–º–µ—Ç–æ–∫ –≤ JSON")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ meeting_notes –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                cur.execute("SELECT COUNT(*) as count FROM meeting_notes WHERE event_id = %s", (event_id,))
                existing_count = cur.fetchone()['count']
                
                if existing_count > 0:
                    print(f"  ‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ meeting_notes —É–∂–µ –µ—Å—Ç—å {existing_count} –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ meeting_notes
                note_ids = []
                for note in notes_data:
                    note_text = note.get('text', '')
                    time = note.get('time', '')
                    person = note.get('person', '')
                    is_question = note.get('isASAP', False)  # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π
                    
                    cur.execute("""
                        INSERT INTO meeting_notes (event_id, note_text, time, person, is_question, resolved, resolved_at, created_at)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                        RETURNING id
                    """, (event_id, note_text, time, person, is_question, False, None, datetime.now()))
                    
                    note_id = cur.fetchone()['id']
                    note_ids.append(note_id)
                    print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ ID {note_id}: {note_text[:50]}...")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ notes —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å ID –∑–∞–º–µ—Ç–æ–∫
                notes_ids_str = ','.join(map(str, note_ids))
                cur.execute("""
                    UPDATE events 
                    SET notes = %s 
                    WHERE id = %s
                """, (notes_ids_str, event_id))
                
                print(f"  ‚úÖ –ü–æ–ª–µ notes —Å–æ–±—ã—Ç–∏—è {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {notes_ids_str}")
                
            except json.JSONDecodeError as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
                continue
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
                continue
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

if __name__ == "__main__":
    migrate_json_notes_to_meeting_notes()
