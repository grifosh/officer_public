import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import psycopg2
from psycopg2.extras import RealDictCursor

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from src.core.logging_config import log_auto_sync_operation, log_database_operation, log_google_calendar_operation
    DETAILED_LOGGING_AVAILABLE = True
except ImportError:
    DETAILED_LOGGING_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç Microsoft Graph —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
try:
    from src.integrations.MS_graph_sync import microsoft_graph_sync
    MICROSOFT_GRAPH_AVAILABLE = True
except ImportError:
    MICROSOFT_GRAPH_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('auto_sync')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': 'officer',
    'user': 'grifosh',
    'host': 'localhost',
    'port': 5432
}

class AutoSyncManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar –∏ Microsoft Graph"""
    
    def __init__(self):
        self.is_running = False
        self.sync_interval = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        return psycopg2.connect(**DB_CONFIG)
    
    async def start_auto_sync(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
            
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {self.sync_interval} —Å–µ–∫—É–Ω–¥")
        
        try:
            while self.is_running:
                await self.perform_sync_cycle()
                await asyncio.sleep(self.sync_interval)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        finally:
            self.is_running = False
            logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def perform_sync_cycle(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
            if DETAILED_LOGGING_AVAILABLE:
                log_auto_sync_operation("sync_cycle_start", success=True)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
            sync_days = 7
            logger.info(f"üìÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ {sync_days} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥")
            
            # 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
            print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º sync_from_google_to_local –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {sync_days} –¥–Ω–µ–π")
            await self.sync_from_google_to_local_period(sync_days)
            print(f"üîç DEBUG: sync_from_google_to_local –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Microsoft Graph –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
            if MICROSOFT_GRAPH_AVAILABLE:
                print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º sync_from_microsoft_to_local –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {sync_days} –¥–Ω–µ–π")
                await self.sync_from_microsoft_to_local_period(sync_days)
                print(f"üîç DEBUG: sync_from_microsoft_to_local –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                print("üîç DEBUG: Microsoft Graph –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            
            # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Google Calendar
            print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º sync_from_local_to_google –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {sync_days} –¥–Ω–µ–π")
            await self.sync_from_local_to_google_period(sync_days)
            print(f"üîç DEBUG: sync_from_local_to_google –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Microsoft Graph
            if MICROSOFT_GRAPH_AVAILABLE:
                print(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º sync_from_local_to_microsoft –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {sync_days} –¥–Ω–µ–π")
                await self.sync_from_local_to_microsoft_period(sync_days)
                print(f"üîç DEBUG: sync_from_local_to_microsoft –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                print("üîç DEBUG: Microsoft Graph –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            
            logger.info("‚úÖ –¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            if DETAILED_LOGGING_AVAILABLE:
                log_auto_sync_operation("sync_cycle_complete", success=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            if DETAILED_LOGGING_AVAILABLE:
                log_auto_sync_operation("sync_cycle_error", success=False, error=str(e))
    
    async def sync_from_google_to_local(self, date: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Calendar –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î"""
        try:
            logger.info("üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Calendar –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î...")
            print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º sync_from_google_to_local –¥–ª—è –¥–∞—Ç—ã {date}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GoogleCalendarSync —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–æ–¥—É–ª—è
            try:
                from src.integrations.google_calendar_sync import GoogleCalendarSync
                print("üîç DEBUG: GoogleCalendarSync –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Google Calendar –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                print(f"üîç DEBUG: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ GoogleCalendarSync: {e}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync = GoogleCalendarSync()
            print("üîç DEBUG: –≠–∫–∑–µ–º–ø–ª—è—Ä GoogleCalendarSync —Å–æ–∑–¥–∞–Ω")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Google Calendar")
                print("üîç DEBUG: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Google Calendar")
                return
            
            print("üîç DEBUG: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Google Calendar —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            events = sync.get_today_events()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar")
            print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            synced_count = await self.save_events_to_local_db_smart(events, date)
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar")
            print(f"üîç DEBUG: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ Google Calendar
            deleted_count = await self.delete_missing_events(events, date)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ Google Calendar")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Google Calendar: {str(e)}")
    
    async def sync_from_local_to_google(self, date: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Google Calendar"""
        try:
            logger.info("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Google Calendar...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            local_events = await self.get_local_events_for_date(date)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(local_events)} —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GoogleCalendarSync
            try:
                from src.integrations.google_calendar_sync import GoogleCalendarSync
            except ImportError:
                logger.warning("‚ö†Ô∏è Google Calendar –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync = GoogleCalendarSync()
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Google Calendar")
                return
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
            synced_count = 0
            for event in local_events:
                if await self.sync_single_event_to_google(event, sync):
                    synced_count += 1
            
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar: {str(e)}")
    
    async def save_events_to_local_db(self, events: List[Dict], date: str) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î"""
        synced_count = 0
        
        try:
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            for event in events:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º google_event_id
                    existing_event_id = None
                    if event.get('google_event_id'):
                        cur.execute("""
                            SELECT id FROM events 
                            WHERE google_event_id = %s
                        """, (event['google_event_id'],))
                        
                        result = cur.fetchone()
                        if result:
                            existing_event_id = result['id']
                            logger.debug(f"üìã –°–æ–±—ã—Ç–∏–µ {event['title']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_event_id}), –æ–±–Ω–æ–≤–ª—è–µ–º")
                    
                    if existing_event_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        cur.execute("""
                            UPDATE events 
                            SET subject = %s, start_time = %s, end_time = %s, location = %s, 
                                attendees = %s, description = %s, google_calendar_link = %s,
                                updated_at = CURRENT_TIMESTAMP
                            WHERE id = %s
                        """, (
                            event.get('title', ''),
                            event.get('start_time', ''),
                            event.get('end_time', ''),
                            event.get('location', ''),
                            event.get('attendees', []),
                            event.get('description', ''),
                            event.get('google_calendar_link'),
                            existing_event_id
                        ))
                        logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event['title']} (ID: {existing_event_id})")
                    else:
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        cur.execute("""
                            INSERT INTO events (subject, start_time, end_time, location, attendees, stream, notes, recording_url, actual_open_questions, google_event_id, google_calendar_link, description)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        """, (
                            event.get('title', ''),
                            event.get('start_time', ''),
                            event.get('end_time', ''),
                            event.get('location', ''),
                            event.get('attendees', []),
                            event.get('stream', []),
                            event.get('notes', ''),
                            event.get('recording_url', ''),
                            event.get('actual_open_questions', ''),
                            event.get('google_event_id'),
                            event.get('google_calendar_link'),
                            event.get('description', '')
                        ))
                        logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event['title']}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                    logger.info(f"üìù AUTO_SYNC: –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ Google Calendar: {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    
                    synced_count += 1
                    logger.debug(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event['title']}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {str(e)}")
            
            conn.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
        
        return synced_count
    
    async def save_events_to_local_db_smart(self, events: List[Dict], date: str) -> int:
        """–£–º–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        synced_count = 0
        
        try:
            print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º save_events_to_local_db_smart —Å {len(events)} —Å–æ–±—ã—Ç–∏—è–º–∏")
            from src.core.sync_direction import SyncDirectionDetector
            print("üîç DEBUG: SyncDirectionDetector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            for event in events:
                try:
                    print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ google_event_id
                    existing_event_id = None
                    existing_event = None
                    
                    if event.get('google_event_id'):
                        print(f"üîç DEBUG: –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å google_event_id={event['google_event_id']}")
                        cur.execute("""
                            SELECT id, subject, last_local_update, last_google_sync, sync_source,
                                   notes, actual_open_questions, recording_url
                            FROM events
                            WHERE google_event_id = %s
                        """, (event['google_event_id'],))
                        existing_event = cur.fetchone()
                        if existing_event:
                            existing_event_id = existing_event['id']
                            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ ID={existing_event_id}")
                        else:
                            print(f"üîç DEBUG: –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ")
                    
                    if existing_event:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        print(f"üîç DEBUG: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        direction, reason = SyncDirectionDetector.determine_sync_direction(
                            existing_event, event
                        )
                        
                        print(f"üîç DEBUG: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
                        logger.info(f"üîÑ –°–æ–±—ã—Ç–∏–µ {event['title']}: {direction} - {reason}")
                        
                        if direction == 'google_to_local':
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Google
                            cur.execute("""
                                UPDATE events
                                SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                    attendees = %s, description = %s, google_calendar_link = %s,
                                    last_google_sync = CURRENT_TIMESTAMP, sync_source = 'google',
                                    google_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (
                                event.get('title', ''),
                                event.get('start_time', ''),
                                event.get('end_time', ''),
                                event.get('location', ''),
                                event.get('attendees', []),
                                event.get('description', ''),
                                event.get('google_calendar_link'),
                                event.get('updated'),
                                existing_event_id
                            ))
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Google: {event['title']} (ID: {existing_event_id})")
                            synced_count += 1
                            
                        elif direction == 'local_to_google':
                            # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            cur.execute("""
                                UPDATE events
                                SET last_google_sync = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (existing_event_id,))
                            logger.info(f"‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ: {event['title']} (ID: {existing_event_id})")
                            
                        elif direction == 'conflict':
                            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            priority = SyncDirectionDetector.get_sync_priority(existing_event, event)
                            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {event['title']} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                            
                            if priority == 'google':
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ Google, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                cur.execute("""
                                    UPDATE events
                                    SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                        attendees = %s, description = %s, google_calendar_link = %s,
                                        last_google_sync = CURRENT_TIMESTAMP, sync_source = 'google',
                                        google_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (
                                    event.get('title', ''),
                                    event.get('start_time', ''),
                                    event.get('end_time', ''),
                                    event.get('location', ''),
                                    event.get('attendees', []),
                                    event.get('description', ''),
                                    event.get('google_calendar_link'),
                                    event.get('updated'),
                                    existing_event_id
                                ))
                                logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –ø–æ–ª—å–∑—É Google: {event['title']}")
                                synced_count += 1
                            else:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
                                cur.execute("""
                                    UPDATE events
                                    SET last_google_sync = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (existing_event_id,))
                                logger.info(f"‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {event['title']}")
                        
                        else:  # no_change
                            logger.debug(f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç: {event['title']}")
                    
                    else:
                        # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ - —Å–æ–∑–¥–∞–µ–º
                        print(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                        cur.execute("""
                            INSERT INTO events (subject, start_time, end_time, location, attendees, stream, notes, recording_url, actual_open_questions, google_event_id, google_calendar_link, description, last_google_sync, sync_source, google_updated_at)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, 'google', %s)
                        """, (
                            event.get('title', ''),
                            event.get('start_time', ''),
                            event.get('end_time', ''),
                            event.get('location', ''),
                            event.get('attendees', []),
                            event.get('stream', []),
                            event.get('notes', ''),
                            event.get('recording_url', ''),
                            event.get('actual_open_questions', ''),
                            event.get('google_event_id'),
                            event.get('google_calendar_link'),
                            event.get('description', ''),
                            event.get('updated')
                        ))
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event['title']}")
                        print(f"üîç DEBUG: –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        synced_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {str(e)}")
            
            conn.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
        
        return synced_count
    
    async def delete_missing_events(self, google_events: List[Dict], date: str) -> int:
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ Google Calendar"""
        deleted_count = 0
        
        try:
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç google_event_id
            cur.execute("""
                SELECT id, subject, google_event_id, start_time, end_time
                FROM events
                WHERE DATE(start_time) = %s 
                AND google_event_id IS NOT NULL
                AND google_event_id != ''
            """, (date,))
            
            local_events = cur.fetchall()
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(local_events)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å google_event_id")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å google_event_id
            for event in local_events:
                start_time = event['start_time'].strftime('%H:%M') if event['start_time'] else 'N/A'
                end_time = event['end_time'].strftime('%H:%M') if event['end_time'] else 'N/A'
                logger.debug(f"üìã –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ID:{event['id']} | {event['subject']} | {start_time}-{end_time} | Google ID: {event['google_event_id']}")
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ google_event_id –∏–∑ Google Calendar
            google_event_ids = set()
            for event in google_events:
                if event.get('google_event_id'):
                    google_event_ids.add(event['google_event_id'])
                    logger.debug(f"üìã Google —Å–æ–±—ã—Ç–∏–µ: {event['title']} | Google ID: {event['google_event_id']}")
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(google_event_ids)} —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar")
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            events_to_delete = []
            for local_event in local_events:
                if local_event['google_event_id'] not in google_event_ids:
                    events_to_delete.append(local_event)
                    logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {local_event['subject']} (ID: {local_event['id']}) | Google ID: {local_event['google_event_id']}")
            
            logger.info(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(events_to_delete)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            for event in events_to_delete:
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                    start_time = event['start_time'].strftime('%H:%M') if event['start_time'] else 'N/A'
                    end_time = event['end_time'].strftime('%H:%M') if event['end_time'] else 'N/A'
                    logger.info(f"üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï: {event['subject']} (ID: {event['id']}) | {start_time}-{end_time} | Google ID: {event['google_event_id']}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏–π
                    from src.core.logging_config import log_sync_deletion
                    log_sync_deletion(event, "delete_from_local", True)
                    
                    cur.execute("DELETE FROM events WHERE id = %s", (event['id'],))
                    logger.info(f"‚úÖ –£–î–ê–õ–ï–ù–û: {event['subject']} (ID: {event['id']})")
                    deleted_count += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {event['subject']} (ID: {event['id']}): {str(e)}")
            
            conn.commit()
            logger.info(f"üóëÔ∏è –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
        
        return deleted_count
    
    async def get_local_events_for_date(self, date: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        events = []
        
        try:
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
            cur.execute("""
                SELECT * FROM events 
                WHERE DATE(start_time) = %s
                ORDER BY start_time
            """, (date,))
            
            events = cur.fetchall()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î: {str(e)}")
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
        
        return events
    
    async def sync_single_event_to_google(self, event: Dict, sync) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar"""
        try:
            event_id = event.get('id')
            event_subject = event.get('subject', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            # –ï—Å–ª–∏ —É —Å–æ–±—ã—Ç–∏—è —É–∂–µ –µ—Å—Ç—å google_event_id, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if event.get('google_event_id'):
                logger.info(f"üîÑ AUTO_SYNC: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar (ID: {event_id}): {event_subject}")
                
                event_data = {
                    'title': event['subject'],
                    'start_time': str(event['start_time']) if event['start_time'] else '',
                    'end_time': str(event['end_time']) if event['end_time'] else '',
                    'description': event.get('description', ''),
                    'location': event.get('location', ''),
                    'attendees': event.get('attendees', [])
                }
                
                success = sync.update_event_in_google_calendar(event['google_event_id'], event_data)
                
                if success:
                    logger.info(f"‚úÖ AUTO_SYNC: –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Google Calendar (ID: {event_id}): {event_subject}")
                else:
                    logger.error(f"‚ùå AUTO_SYNC: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar (ID: {event_id}): {event_subject}")
                
                return success
            
            # –ï—Å–ª–∏ —É —Å–æ–±—ã—Ç–∏—è –Ω–µ—Ç google_event_id, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            else:
                logger.info(f"üìù AUTO_SYNC: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar (ID: {event_id}): {event_subject}")
                
                event_data = {
                    'title': event['subject'],
                    'start_time': str(event['start_time']) if event['start_time'] else '',
                    'end_time': str(event['end_time']) if event['end_time'] else '',
                    'description': event.get('description', ''),
                    'location': event.get('location', ''),
                    'attendees': event.get('attendees', [])
                }
                
                google_event_id = sync.create_event_in_google_calendar(event_data)
                
                if google_event_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å google_event_id
                    await self.update_local_event_with_google_id(event['id'], google_event_id)
                    return True
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event.get('subject', 'Unknown')}: {str(e)}")
            return False
    
    async def update_local_event_with_google_id(self, event_id: int, google_event_id: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å google_event_id"""
        try:
            conn = self.get_db_connection()
            cur = conn.cursor()
            
            cur.execute("""
                UPDATE events 
                SET google_event_id = %s
                WHERE id = %s
            """, (google_event_id, event_id))
            
            conn.commit()
            logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω google_event_id –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è google_event_id: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
    
    async def sync_from_microsoft_to_local(self, date: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Microsoft Graph –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î"""
        try:
            logger.info("üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Microsoft Graph –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î...")
            print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º sync_from_microsoft_to_local –¥–ª—è –¥–∞—Ç—ã {date}")
            
            if not MICROSOFT_GRAPH_AVAILABLE:
                logger.warning("‚ö†Ô∏è Microsoft Graph –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                print("üîç DEBUG: Microsoft Graph –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not microsoft_graph_sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Microsoft Graph")
                print("üîç DEBUG: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Microsoft Graph")
                return
            
            print("üîç DEBUG: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Microsoft Graph —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            events = microsoft_graph_sync.get_today_events()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ Microsoft Graph")
            print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ Microsoft Graph")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            synced_count = await self.save_microsoft_events_to_local_db_smart(events, date)
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Microsoft Graph")
            print(f"üîç DEBUG: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Microsoft Graph")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Microsoft Graph: {str(e)}")
    
    async def sync_from_local_to_microsoft(self, date: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Microsoft Graph"""
        try:
            logger.info("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Microsoft Graph...")
            print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º sync_from_local_to_microsoft –¥–ª—è –¥–∞—Ç—ã {date}")
            
            if not MICROSOFT_GRAPH_AVAILABLE:
                logger.warning("‚ö†Ô∏è Microsoft Graph –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                print("üîç DEBUG: Microsoft Graph –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not microsoft_graph_sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Microsoft Graph")
                print("üîç DEBUG: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Microsoft Graph")
                return
            
            print("üîç DEBUG: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Microsoft Graph —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            cur.execute("""
                SELECT id, subject, start_time, end_time, location, attendees, 
                       stream, notes, recording_url, actual_open_questions,
                       microsoft_event_id, last_local_update, last_microsoft_sync
                FROM events
                WHERE DATE(start_time) = %s
                AND (microsoft_event_id IS NULL OR last_local_update > last_microsoft_sync)
            """, (date,))
            
            local_events = cur.fetchall()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(local_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Microsoft Graph")
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(local_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Microsoft Graph")
            
            synced_count = 0
            for event in local_events:
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    event_data = {
                        'title': event['subject'],
                        'start_time': event['start_time'].strftime('%Y-%m-%dT%H:%M:%S'),
                        'end_time': event['end_time'].strftime('%Y-%m-%dT%H:%M:%S'),
                        'location': event['location'] or '',
                        'description': f"{event['notes'] or ''}\n\nOpen Questions: {event['actual_open_questions'] or ''}".strip(),
                        'attendees': event['attendees'] or []
                    }
                    
                    if event['microsoft_event_id']:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        success = microsoft_graph_sync.update_event_in_microsoft_graph(
                            event['microsoft_event_id'], event_data
                        )
                        if success:
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Microsoft Graph: {event['subject']}")
                            synced_count += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        microsoft_event_id = microsoft_graph_sync.create_event_in_microsoft_graph(event_data)
                        if microsoft_event_id:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å Microsoft Event ID
                            cur.execute("""
                                UPDATE events 
                                SET microsoft_event_id = %s, last_microsoft_sync = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (microsoft_event_id, event['id']))
                            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Microsoft Graph: {event['subject']}")
                            synced_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event['subject']}: {str(e)}")
            
            conn.commit()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –≤ Microsoft Graph")
            print(f"üîç DEBUG: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –≤ Microsoft Graph")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Microsoft Graph: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
    
    async def save_microsoft_events_to_local_db_smart(self, events: List[Dict], date: str) -> int:
        """–£–º–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π Microsoft Graph —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        synced_count = 0
        
        try:
            print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º save_microsoft_events_to_local_db_smart —Å {len(events)} —Å–æ–±—ã—Ç–∏—è–º–∏")
            from src.core.sync_direction import SyncDirectionDetector
            print("üîç DEBUG: SyncDirectionDetector –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            for event in events:
                try:
                    print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ microsoft_event_id
                    existing_event_id = None
                    existing_event = None
                    
                    if event.get('microsoft_event_id'):
                        print(f"üîç DEBUG: –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å microsoft_event_id={event['microsoft_event_id']}")
                        cur.execute("""
                            SELECT id, subject, last_local_update, last_microsoft_sync, sync_source,
                                   notes, actual_open_questions, recording_url
                            FROM events
                            WHERE microsoft_event_id = %s
                        """, (event['microsoft_event_id'],))
                        existing_event = cur.fetchone()
                        if existing_event:
                            existing_event_id = existing_event['id']
                            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ ID={existing_event_id}")
                        else:
                            print(f"üîç DEBUG: –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ")
                    
                    if existing_event:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        print(f"üîç DEBUG: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        direction, reason = SyncDirectionDetector.determine_sync_direction(
                            existing_event, event
                        )
                        
                        print(f"üîç DEBUG: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
                        logger.info(f"üîÑ –°–æ–±—ã—Ç–∏–µ {event['title']}: {direction} - {reason}")
                        
                        if direction == 'microsoft_to_local':
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Microsoft Graph
                            cur.execute("""
                                UPDATE events
                                SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                    attendees = %s, description = %s, microsoft_calendar_link = %s,
                                    last_microsoft_sync = CURRENT_TIMESTAMP, sync_source = 'microsoft',
                                    microsoft_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (
                                event.get('title', ''),
                                event.get('start_time', ''),
                                event.get('end_time', ''),
                                event.get('location', ''),
                                event.get('attendees', []),
                                event.get('description', ''),
                                event.get('microsoft_calendar_link'),
                                event.get('updated_at'),
                                existing_event_id
                            ))
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Microsoft Graph: {event['title']} (ID: {existing_event_id})")
                            synced_count += 1
                            
                        elif direction == 'local_to_microsoft':
                            # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            cur.execute("""
                                UPDATE events
                                SET last_microsoft_sync = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (existing_event_id,))
                            logger.info(f"‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ: {event['title']} (ID: {existing_event_id})")
                            
                        elif direction == 'conflict':
                            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            priority = SyncDirectionDetector.get_sync_priority(existing_event, event)
                            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {event['title']} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                            
                            if priority == 'microsoft':
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ Microsoft Graph, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                cur.execute("""
                                    UPDATE events
                                    SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                        attendees = %s, description = %s, microsoft_calendar_link = %s,
                                        last_microsoft_sync = CURRENT_TIMESTAMP, sync_source = 'microsoft',
                                        microsoft_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (
                                    event.get('title', ''),
                                    event.get('start_time', ''),
                                    event.get('end_time', ''),
                                    event.get('location', ''),
                                    event.get('attendees', []),
                                    event.get('description', ''),
                                    event.get('microsoft_calendar_link'),
                                    event.get('updated_at'),
                                    existing_event_id
                                ))
                                logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –ø–æ–ª—å–∑—É Microsoft Graph: {event['title']}")
                                synced_count += 1
                            else:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
                                cur.execute("""
                                    UPDATE events
                                    SET last_microsoft_sync = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (existing_event_id,))
                                logger.info(f"‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {event['title']}")
                        
                        else:  # no_change
                            logger.debug(f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç: {event['title']}")
                    
                    else:
                        # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ - —Å–æ–∑–¥–∞–µ–º
                        print(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                        cur.execute("""
                            INSERT INTO events (subject, start_time, end_time, location, attendees, stream, notes, recording_url, actual_open_questions, microsoft_event_id, microsoft_calendar_link, description, last_microsoft_sync, sync_source, microsoft_updated_at)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, 'microsoft', %s)
                        """, (
                            event.get('title', ''),
                            event.get('start_time', ''),
                            event.get('end_time', ''),
                            event.get('location', ''),
                            event.get('attendees', []),
                            event.get('stream', []),
                            event.get('notes', ''),
                            event.get('recording_url', ''),
                            event.get('actual_open_questions', ''),
                            event.get('microsoft_event_id'),
                            event.get('microsoft_calendar_link'),
                            event.get('description', ''),
                            event.get('updated_at')
                        ))
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event['title']}")
                        print(f"üîç DEBUG: –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        synced_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {str(e)}")
            
            conn.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Microsoft Graph: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
                
        return synced_count

    def stop_auto_sync(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        self.is_running = False
    
    async def sync_from_google_to_local_period(self, days_ahead: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Calendar –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            logger.info(f"üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Google Calendar –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∑–∞ {days_ahead} –¥–Ω–µ–π...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GoogleCalendarSync
            try:
                from src.integrations.google_calendar_sync import GoogleCalendarSync
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Google Calendar –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync = GoogleCalendarSync()
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Google Calendar")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            events = sync.get_events_for_period(days_ahead)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            synced_count = await self.save_events_to_local_db_smart_period(events)
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Google Calendar –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
    
    async def sync_from_microsoft_to_local_period(self, days_ahead: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Microsoft Graph –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            logger.info(f"üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ Microsoft Graph –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∑–∞ {days_ahead} –¥–Ω–µ–π...")
            
            if not MICROSOFT_GRAPH_AVAILABLE:
                logger.warning("‚ö†Ô∏è Microsoft Graph –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not microsoft_graph_sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Microsoft Graph")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            events = microsoft_graph_sync.get_events_for_period(days_ahead)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ Microsoft Graph –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            synced_count = await self.save_microsoft_events_to_local_db_smart_period(events)
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –∏–∑ Microsoft Graph –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Microsoft Graph –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
    
    async def sync_from_local_to_google_period(self, days_ahead: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Google Calendar –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            logger.info(f"üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Google Calendar –∑–∞ {days_ahead} –¥–Ω–µ–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∑–∞ –ø–µ—Ä–∏–æ–¥
            local_events = await self.get_local_events_for_period(days_ahead)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(local_events)} —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GoogleCalendarSync
            try:
                from src.integrations.google_calendar_sync import GoogleCalendarSync
            except ImportError:
                logger.warning("‚ö†Ô∏è Google Calendar –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync = GoogleCalendarSync()
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Google Calendar")
                return
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
            synced_count = 0
            for event in local_events:
                if await self.sync_single_event_to_google(event, sync):
                    synced_count += 1
            
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –≤ Google Calendar –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
    
    async def sync_from_local_to_microsoft_period(self, days_ahead: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Microsoft Graph –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            logger.info(f"üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –≤ Microsoft Graph –∑–∞ {days_ahead} –¥–Ω–µ–π...")
            
            if not MICROSOFT_GRAPH_AVAILABLE:
                logger.warning("‚ö†Ô∏è Microsoft Graph –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not microsoft_graph_sync.authenticate():
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Microsoft Graph")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∑–∞ –ø–µ—Ä–∏–æ–¥
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            today = datetime.now().date()
            end_date = today + timedelta(days=days_ahead)
            
            cur.execute("""
                SELECT id, subject, start_time, end_time, location, attendees, 
                       stream, notes, recording_url, actual_open_questions,
                       microsoft_event_id, last_local_update, last_microsoft_sync
                FROM events
                WHERE DATE(start_time) BETWEEN %s AND %s
                AND (microsoft_event_id IS NULL OR last_local_update > last_microsoft_sync)
            """, (today, end_date))
            
            local_events = cur.fetchall()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(local_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Microsoft Graph –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
            synced_count = 0
            for event in local_events:
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                    event_data = {
                        'title': event['subject'],
                        'start_time': event['start_time'].strftime('%Y-%m-%dT%H:%M:%S'),
                        'end_time': event['end_time'].strftime('%Y-%m-%dT%H:%M:%S'),
                        'location': event['location'] or '',
                        'description': f"{event['notes'] or ''}\n\nOpen Questions: {event['actual_open_questions'] or ''}".strip(),
                        'attendees': event['attendees'] or []
                    }
                    
                    if event['microsoft_event_id']:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                        success = microsoft_graph_sync.update_event_in_microsoft_graph(
                            event['microsoft_event_id'], event_data
                        )
                        if success:
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Microsoft Graph: {event['subject']}")
                            synced_count += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        microsoft_event_id = microsoft_graph_sync.create_event_in_microsoft_graph(event_data)
                        if microsoft_event_id:
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å Microsoft Event ID
                            cur.execute("""
                                UPDATE events 
                                SET microsoft_event_id = %s, last_microsoft_sync = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (microsoft_event_id, event['id']))
                            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ Microsoft Graph: {event['subject']}")
                            synced_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event['subject']}: {str(e)}")
            
            conn.commit()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —Å–æ–±—ã—Ç–∏–π –≤ Microsoft Graph –∑–∞ {days_ahead} –¥–Ω–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Microsoft Graph –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
    
    async def get_local_events_for_period(self, days_ahead: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        events = []
        
        try:
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            today = datetime.now().date()
            end_date = today + timedelta(days=days_ahead)
            
            cur.execute("""
                SELECT * FROM events 
                WHERE DATE(start_time) BETWEEN %s AND %s
                ORDER BY start_time
            """, (today, end_date))
            
            events = cur.fetchall()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
        
        return events
    
    async def save_events_to_local_db_smart_period(self, events: List[Dict]) -> int:
        """–£–º–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        synced_count = 0
        
        try:
            logger.info(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º save_events_to_local_db_smart_period —Å {len(events)} —Å–æ–±—ã—Ç–∏—è–º–∏")
            from src.core.sync_direction import SyncDirectionDetector
            
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            for event in events:
                try:
                    logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ google_event_id
                    existing_event_id = None
                    existing_event = None
                    
                    if event.get('google_event_id'):
                        logger.info(f"üîç DEBUG: –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å google_event_id={event['google_event_id']}")
                        cur.execute("""
                            SELECT id, subject, last_local_update, last_google_sync, sync_source,
                                   notes, actual_open_questions, recording_url
                            FROM events
                            WHERE google_event_id = %s
                        """, (event['google_event_id'],))
                        existing_event = cur.fetchone()
                        if existing_event:
                            existing_event_id = existing_event['id']
                            logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ ID={existing_event_id}")
                        else:
                            logger.info(f"üîç DEBUG: –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ")
                    
                    if existing_event:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        logger.info(f"üîç DEBUG: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        direction, reason = SyncDirectionDetector.determine_sync_direction(
                            existing_event, event
                        )
                        
                        logger.info(f"üîç DEBUG: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
                        logger.info(f"üîÑ –°–æ–±—ã—Ç–∏–µ {event['title']}: {direction} - {reason}")
                        
                        if direction == 'google_to_local':
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Google
                            cur.execute("""
                                UPDATE events
                                SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                    attendees = %s, description = %s, google_calendar_link = %s,
                                    last_google_sync = CURRENT_TIMESTAMP, sync_source = 'google',
                                    google_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (
                                event.get('title', ''),
                                event.get('start_time', ''),
                                event.get('end_time', ''),
                                event.get('location', ''),
                                event.get('attendees', []),
                                event.get('description', ''),
                                event.get('google_calendar_link'),
                                event.get('updated'),
                                existing_event_id
                            ))
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Google: {event['title']} (ID: {existing_event_id})")
                            synced_count += 1
                            
                        elif direction == 'local_to_google':
                            # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            cur.execute("""
                                UPDATE events
                                SET last_google_sync = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (existing_event_id,))
                            logger.info(f"‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ: {event['title']} (ID: {existing_event_id})")
                            
                        elif direction == 'conflict':
                            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            priority = SyncDirectionDetector.get_sync_priority(existing_event, event)
                            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {event['title']} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                            
                            if priority == 'google':
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ Google, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                cur.execute("""
                                    UPDATE events
                                    SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                        attendees = %s, description = %s, google_calendar_link = %s,
                                        last_google_sync = CURRENT_TIMESTAMP, sync_source = 'google',
                                        google_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (
                                    event.get('title', ''),
                                    event.get('start_time', ''),
                                    event.get('end_time', ''),
                                    event.get('location', ''),
                                    event.get('attendees', []),
                                    event.get('description', ''),
                                    event.get('google_calendar_link'),
                                    event.get('updated'),
                                    existing_event_id
                                ))
                                logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –ø–æ–ª—å–∑—É Google: {event['title']}")
                                synced_count += 1
                            else:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
                                cur.execute("""
                                    UPDATE events
                                    SET last_google_sync = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (existing_event_id,))
                                logger.info(f"‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {event['title']}")
                        
                        else:  # no_change
                            logger.debug(f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç: {event['title']}")
                    
                    else:
                        # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ - —Å–æ–∑–¥–∞–µ–º
                        logger.info(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                        cur.execute("""
                            INSERT INTO events (subject, start_time, end_time, location, attendees, stream, notes, recording_url, actual_open_questions, google_event_id, google_calendar_link, description, last_google_sync, sync_source, google_updated_at)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, 'google', %s)
                        """, (
                            event.get('title', ''),
                            event.get('start_time', ''),
                            event.get('end_time', ''),
                            event.get('location', ''),
                            event.get('attendees', []),
                            event.get('stream', []),
                            event.get('notes', ''),
                            event.get('recording_url', ''),
                            event.get('actual_open_questions', ''),
                            event.get('google_event_id'),
                            event.get('google_calendar_link'),
                            event.get('description', ''),
                            event.get('updated')
                        ))
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event['title']}")
                        logger.info(f"üîç DEBUG: –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        synced_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {str(e)}")
            
            conn.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
        
        return synced_count
    
    async def save_microsoft_events_to_local_db_smart_period(self, events: List[Dict]) -> int:
        """–£–º–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π Microsoft Graph –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        synced_count = 0
        
        try:
            logger.info(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º save_microsoft_events_to_local_db_smart_period —Å {len(events)} —Å–æ–±—ã—Ç–∏—è–º–∏")
            from src.core.sync_direction import SyncDirectionDetector
            
            conn = self.get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            
            for event in events:
                try:
                    logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ microsoft_event_id
                    existing_event_id = None
                    existing_event = None
                    
                    if event.get('microsoft_event_id'):
                        logger.info(f"üîç DEBUG: –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å microsoft_event_id={event['microsoft_event_id']}")
                        cur.execute("""
                            SELECT id, subject, last_local_update, last_microsoft_sync, sync_source,
                                   notes, actual_open_questions, recording_url
                            FROM events
                            WHERE microsoft_event_id = %s
                        """, (event['microsoft_event_id'],))
                        existing_event = cur.fetchone()
                        if existing_event:
                            existing_event_id = existing_event['id']
                            logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ ID={existing_event_id}")
                        else:
                            logger.info(f"üîç DEBUG: –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ")
                    
                    if existing_event:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        logger.info(f"üîç DEBUG: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        direction, reason = SyncDirectionDetector.determine_sync_direction(
                            existing_event, event
                        )
                        
                        logger.info(f"üîç DEBUG: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
                        logger.info(f"üîÑ –°–æ–±—ã—Ç–∏–µ {event['title']}: {direction} - {reason}")
                        
                        if direction == 'microsoft_to_local':
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Microsoft Graph
                            cur.execute("""
                                UPDATE events
                                SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                    attendees = %s, description = %s, microsoft_calendar_link = %s,
                                    last_microsoft_sync = CURRENT_TIMESTAMP, sync_source = 'microsoft',
                                    microsoft_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (
                                event.get('title', ''),
                                event.get('start_time', ''),
                                event.get('end_time', ''),
                                event.get('location', ''),
                                event.get('attendees', []),
                                event.get('description', ''),
                                event.get('microsoft_calendar_link'),
                                event.get('updated_at'),
                                existing_event_id
                            ))
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Microsoft Graph: {event['title']} (ID: {existing_event_id})")
                            synced_count += 1
                            
                        elif direction == 'local_to_microsoft':
                            # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                            cur.execute("""
                                UPDATE events
                                SET last_microsoft_sync = CURRENT_TIMESTAMP
                                WHERE id = %s
                            """, (existing_event_id,))
                            logger.info(f"‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ: {event['title']} (ID: {existing_event_id})")
                            
                        elif direction == 'conflict':
                            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                            priority = SyncDirectionDetector.get_sync_priority(existing_event, event)
                            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {event['title']} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                            
                            if priority == 'microsoft':
                                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ Microsoft Graph, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                cur.execute("""
                                    UPDATE events
                                    SET subject = %s, start_time = %s, end_time = %s, location = %s,
                                        attendees = %s, description = %s, microsoft_calendar_link = %s,
                                        last_microsoft_sync = CURRENT_TIMESTAMP, sync_source = 'microsoft',
                                        microsoft_updated_at = %s, updated_at = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (
                                    event.get('title', ''),
                                    event.get('start_time', ''),
                                    event.get('end_time', ''),
                                    event.get('location', ''),
                                    event.get('attendees', []),
                                    event.get('description', ''),
                                    event.get('microsoft_calendar_link'),
                                    event.get('updated_at'),
                                    existing_event_id
                                ))
                                logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –ø–æ–ª—å–∑—É Microsoft Graph: {event['title']}")
                                synced_count += 1
                            else:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
                                cur.execute("""
                                    UPDATE events
                                    SET last_microsoft_sync = CURRENT_TIMESTAMP
                                    WHERE id = %s
                                """, (existing_event_id,))
                                logger.info(f"‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: {event['title']}")
                        
                        else:  # no_change
                            logger.debug(f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç: {event['title']}")
                    
                    else:
                        # –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ - —Å–æ–∑–¥–∞–µ–º
                        logger.info(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ {event.get('title', 'Unknown')}")
                        cur.execute("""
                            INSERT INTO events (subject, start_time, end_time, location, attendees, stream, notes, recording_url, actual_open_questions, microsoft_event_id, microsoft_calendar_link, description, last_microsoft_sync, sync_source, microsoft_updated_at)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, 'microsoft', %s)
                        """, (
                            event.get('title', ''),
                            event.get('start_time', ''),
                            event.get('end_time', ''),
                            event.get('location', ''),
                            event.get('attendees', []),
                            event.get('stream', []),
                            event.get('notes', ''),
                            event.get('recording_url', ''),
                            event.get('actual_open_questions', ''),
                            event.get('microsoft_event_id'),
                            event.get('microsoft_calendar_link'),
                            event.get('description', ''),
                            event.get('updated_at')
                        ))
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event['title']}")
                        logger.info(f"üîç DEBUG: –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        synced_count += 1
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {str(e)}")
            
            conn.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Microsoft Graph –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
            if 'conn' in locals():
                conn.rollback()
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()
                
        return synced_count

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
auto_sync_manager = AutoSyncManager()

async def start_background_sync():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    await auto_sync_manager.start_auto_sync()

def stop_background_sync():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    auto_sync_manager.stop_auto_sync()
