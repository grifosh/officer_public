"""
Calendar Import Module
–ú–æ–¥—É–ª—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
"""

import csv
import json
from datetime import datetime
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)

class CalendarImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    
    def import_from_csv(self, file_path: str) -> List[Dict]:
        """–ò–º–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        events = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                
                for row in reader:
                    event = {
                        'title': row.get('title', ''),
                        'start_time': row.get('start_time', ''),
                        'end_time': row.get('end_time', ''),
                        'description': row.get('description', ''),
                        'location': row.get('location', ''),
                        'attendees': row.get('attendees', '').split(',') if row.get('attendees') else [],
                        'source': 'csv_import'
                    }
                    events.append(event)
                    
            logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ CSV")
            return events
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CSV: {str(e)}")
            return []
    
    def import_from_ics(self, file_path: str) -> List[Dict]:
        """–ò–º–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π –∏–∑ ICS —Ñ–∞–π–ª–∞ (iCalendar)"""
        events = []
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä ICS —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
            event_blocks = content.split('BEGIN:VEVENT')
            
            for block in event_blocks[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π –±–ª–æ–∫
                event = self._parse_ics_event(block)
                if event:
                    events.append(event)
                    
            logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ ICS")
            return events
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ICS: {str(e)}")
            return []
    
    def _parse_ics_event(self, block: str) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–∑ ICS –±–ª–æ–∫–∞"""
        try:
            lines = block.split('\n')
            event = {}
            
            for line in lines:
                line = line.strip()
                if line.startswith('SUMMARY:'):
                    event['title'] = line[8:]
                elif line.startswith('DTSTART:'):
                    event['start_time'] = self._parse_ics_datetime(line[8:])
                elif line.startswith('DTEND:'):
                    event['end_time'] = self._parse_ics_datetime(line[6:])
                elif line.startswith('DESCRIPTION:'):
                    event['description'] = line[12:]
                elif line.startswith('LOCATION:'):
                    event['location'] = line[9:]
                elif line.startswith('ATTENDEE:'):
                    if 'attendees' not in event:
                        event['attendees'] = []
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Å—Ç—Ä–æ–∫–∏ ATTENDEE
                    email = line.split('mailto:')[1].split(';')[0] if 'mailto:' in line else line[9:]
                    event['attendees'].append(email)
            
            event['source'] = 'ics_import'
            return event if event.get('title') else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ICS —Å–æ–±—ã—Ç–∏—è: {str(e)}")
            return None
    
    def _parse_ics_datetime(self, dt_string: str) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ ICS —Ñ–æ—Ä–º–∞—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            dt_string = dt_string.split(';')[0]
            
            # –§–æ—Ä–º–∞—Ç: YYYYMMDDTHHMMSSZ –∏–ª–∏ YYYYMMDDTHHMMSS
            if len(dt_string) >= 15:
                year = dt_string[:4]
                month = dt_string[4:6]
                day = dt_string[6:8]
                hour = dt_string[9:11]
                minute = dt_string[11:13]
                second = dt_string[13:15]
                
                # –°–æ–∑–¥–∞–µ–º ISO —Å—Ç—Ä–æ–∫—É
                iso_string = f"{year}-{month}-{day}T{hour}:{minute}:{second}"
                return iso_string
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {str(e)}")
            
        return dt_string

def create_sample_csv():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    sample_data = [
        {
            'title': '–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π',
            'start_time': '2025-01-15T10:00:00',
            'end_time': '2025-01-15T11:00:00',
            'description': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã',
            'location': '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª A',
            'attendees': 'ivan@company.com,maria@company.com'
        },
        {
            'title': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
            'start_time': '2025-01-15T14:00:00',
            'end_time': '2025-01-15T15:30:00',
            'description': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
            'location': '–û—Ñ–∏—Å',
            'attendees': 'team@company.com'
        }
    ]
    
    with open('sample_events.csv', 'w', newline='', encoding='utf-8') as file:
        fieldnames = ['title', 'start_time', 'end_time', 'description', 'location', 'attendees']
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(sample_data)
    
    logger.info("üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ sample_events.csv")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞
    create_sample_csv()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
    importer = CalendarImporter()
    events = importer.import_from_csv('sample_events.csv')
    
    if events:
        logger.info(f"üìÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        for event in events:
            logger.info(f"  - {event['title']} ({event['start_time']} - {event['end_time']})")
    else:
        logger.error("‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")

