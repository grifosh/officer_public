import logging
import json
import pickle
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import requests
from msal import ConfidentialClientApplication, PublicClientApplication

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('MS_graph_sync')

class MicrosoftGraphSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Microsoft Graph API (Outlook/Teams)"""
    
    def __init__(self):
        self.client_id = os.getenv('MICROSOFT_CLIENT_ID')
        self.client_secret = os.getenv('MICROSOFT_CLIENT_SECRET')
        self.tenant_id = os.getenv('MICROSOFT_TENANT_ID')
        self.authority = f"https://login.microsoftonline.com/{self.tenant_id}"
        self.scope = ["https://graph.microsoft.com/Calendars.ReadWrite"]
        self.graph_endpoint = "https://graph.microsoft.com/v1.0"
        
        self.token_cache_file = "microsoft_token.pickle"
        self.app = None
        self.access_token = None
        
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Microsoft Graph Sync")
        
    def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Microsoft Graph API"""
        try:
            logger.info("üîê –ù–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Microsoft Graph...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            if os.path.exists(self.token_cache_file):
                try:
                    with open(self.token_cache_file, 'rb') as f:
                        token_cache = pickle.load(f)
                    logger.info("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
                    token_cache = None
            else:
                token_cache = None
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if self.client_secret:
                # Confidential Client (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
                self.app = ConfidentialClientApplication(
                    client_id=self.client_id,
                    client_credential=self.client_secret,
                    authority=self.authority,
                    token_cache=token_cache
                )
                logger.info("üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º Confidential Client Application")
            else:
                # Public Client (–¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
                self.app = PublicClientApplication(
                    client_id=self.client_id,
                    authority=self.authority,
                    token_cache=token_cache
                )
                logger.info("üîì –ò—Å–ø–æ–ª—å–∑—É–µ–º Public Client Application")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            accounts = self.app.get_accounts()
            if accounts:
                logger.info(f"üë§ –ù–∞–π–¥–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                result = self.app.acquire_token_silent(self.scope, account=accounts[0])
            else:
                logger.info("üîÑ –ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                if self.client_secret:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ client credentials flow
                    try:
                        result = self.app.acquire_token_for_client(scopes=["https://graph.microsoft.com/.default"])
                        logger.info("üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º Client Credentials Flow")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Client Credentials Flow –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                        # Fallback –∫ device code flow
                        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Device Code Flow")
                        result = self.app.acquire_token_by_device_flow(
                            self.app.initiate_device_flow(scopes=self.scope)
                        )
                else:
                    # –î–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º device code flow
                    result = self.app.acquire_token_by_device_flow(
                        self.app.initiate_device_flow(scopes=self.scope)
                    )
            
            if "access_token" in result:
                self.access_token = result["access_token"]
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Microsoft Graph")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à —Ç–æ–∫–µ–Ω–∞
                try:
                    with open(self.token_cache_file, 'wb') as f:
                        pickle.dump(self.app.token_cache, f)
                    logger.info("üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
                
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {result.get('error_description', 'Unknown error')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Microsoft Graph: {str(e)}")
            return False
    
    def _make_request(self, method: str, endpoint: str, data: dict = None) -> Optional[dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Microsoft Graph API"""
        if not self.access_token:
            logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞")
            return None
        
        url = f"{self.graph_endpoint}{endpoint}"
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json"
        }
        
        try:
            logger.debug(f"üåê {method} –∑–∞–ø—Ä–æ—Å –∫: {url}")
            
            if method.upper() == "GET":
                response = requests.get(url, headers=headers)
            elif method.upper() == "POST":
                response = requests.post(url, headers=headers, json=data)
            elif method.upper() == "PUT":
                response = requests.put(url, headers=headers, json=data)
            elif method.upper() == "PATCH":
                response = requests.patch(url, headers=headers, json=data)
            elif method.upper() == "DELETE":
                response = requests.delete(url, headers=headers)
            else:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
                return None
            
            logger.debug(f"üì° –û—Ç–≤–µ—Ç: {response.status_code}")
            
            if response.status_code in [200, 201, 204]:
                if response.content:
                    return response.json()
                return {"success": True}
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Microsoft Graph: {str(e)}")
            return None
    
    def get_today_events(self, calendar_id: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ Outlook –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        return self.get_events_for_period(days_ahead=0, calendar_id=calendar_id)
    
    def get_events_for_period(self, days_ahead: int = 7, calendar_id: str = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –∏–∑ Outlook –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        try:
            logger.info(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞ {days_ahead} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –∏–∑ Microsoft Graph...")
            
            # –î–ª—è Application permissions –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞
            users_result = self._make_request("GET", "/users")
            
            if not users_result or "value" not in users_result:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users = users_result["value"]
            if not users:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            user_id = users[0]["id"]
            logger.info(f"üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            if calendar_id:
                calendar_endpoint = f"/users/{user_id}/calendars/{calendar_id}/events"
            else:
                calendar_endpoint = f"/users/{user_id}/events"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            today = datetime.now().date()
            end_date = today + timedelta(days=days_ahead)
            start_time = datetime.combine(today, datetime.min.time())
            end_time = datetime.combine(end_date, datetime.max.time())
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ ISO 8601
            start_time_str = start_time.isoformat() + "Z"
            end_time_str = end_time.isoformat() + "Z"
            
            endpoint = f"{calendar_endpoint}?$filter=start/dateTime ge '{start_time_str}' and end/dateTime le '{end_time_str}'&$orderby=start/dateTime"
            
            result = self._make_request("GET", endpoint)
            
            if result and "value" in result:
                events = result["value"]
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ ({days_ahead} –¥–Ω–µ–π) –∏–∑ Microsoft Graph")
                
                processed_events = []
                for event in events:
                    processed_event = self._process_event(event)
                    if processed_event:
                        processed_events.append(processed_event)
                
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_events)} —Å–æ–±—ã—Ç–∏–π")
                return processed_events
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ Microsoft Graph")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ Microsoft Graph: {str(e)}")
            return []
    
    def _process_event(self, event: Dict) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ Microsoft Graph –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            subject = event.get("subject", "")
            start_time = event.get("start", {}).get("dateTime")
            end_time = event.get("end", {}).get("dateTime")
            location = event.get("location", {}).get("displayName", "")
            description = event.get("body", {}).get("content", "")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            attendees = []
            if "attendees" in event:
                for attendee in event["attendees"]:
                    email = attendee.get("emailAddress", {}).get("address", "")
                    name = attendee.get("emailAddress", {}).get("name", "")
                    if email:
                        attendees.append(email)
                    elif name:
                        attendees.append(name)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è
            if start_time and end_time:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
                start_dt = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                end_dt = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –Ω–∞—à–µ–≥–æ API
                start_formatted = start_dt.strftime("%Y-%m-%d %H:%M:%S")
                end_formatted = end_dt.strftime("%Y-%m-%d %H:%M:%S")
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏: {subject}")
                return None
            
            processed_event = {
                "title": subject,
                "start_time": start_formatted,
                "end_time": end_formatted,
                "description": description,
                "location": location,
                "attendees": attendees,
                "source": "microsoft_graph",
                "microsoft_event_id": event.get("id"),
                "microsoft_calendar_link": event.get("webLink", ""),
                "created_at": event.get("createdDateTime"),
                "updated_at": event.get("lastModifiedDateTime")
            }
            
            logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {subject} ({start_formatted} - {end_formatted})")
            return processed_event
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
            return None
    
    def create_event_in_microsoft_graph(self, event_data: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Microsoft Graph (Outlook)"""
        try:
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Microsoft Graph: {event_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Microsoft Graph
            microsoft_event = {
                "subject": event_data.get("title", ""),
                "body": {
                    "contentType": "text",
                    "content": event_data.get("description", "")
                },
                "start": {
                    "dateTime": event_data.get("start_time"),
                    "timeZone": "UTC"
                },
                "end": {
                    "dateTime": event_data.get("end_time"),
                    "timeZone": "UTC"
                },
                "location": {
                    "displayName": event_data.get("location", "")
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if event_data.get("attendees"):
                microsoft_event["attendees"] = []
                for attendee in event_data["attendees"]:
                    if attendee.strip():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ email –∞–¥—Ä–µ—Å–æ–º
                        if "@" in attendee and "." in attendee.split("@")[1]:
                            microsoft_event["attendees"].append({
                                "emailAddress": {
                                    "address": attendee.strip(),
                                    "name": attendee.strip()
                                },
                                "type": "required"
                            })
                        else:
                            logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ '{attendee}' - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è email –∞–¥—Ä–µ—Å–æ–º")
            
            result = self._make_request("POST", "/me/events", microsoft_event)
            
            if result and "id" in result:
                event_id = result["id"]
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Microsoft Graph —Å ID: {event_id}")
                return event_id
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Microsoft Graph")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Microsoft Graph: {str(e)}")
            return None
    
    def update_event_in_microsoft_graph(self, event_id: str, event_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Microsoft Graph"""
        try:
            logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Microsoft Graph: {event_id}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_data = {}
            
            if "title" in event_data:
                update_data["subject"] = event_data["title"]
            
            if "description" in event_data:
                update_data["body"] = {
                    "contentType": "text",
                    "content": event_data["description"]
                }
            
            if "start_time" in event_data:
                update_data["start"] = {
                    "dateTime": event_data["start_time"],
                    "timeZone": "UTC"
                }
            
            if "end_time" in event_data:
                update_data["end"] = {
                    "dateTime": event_data["end_time"],
                    "timeZone": "UTC"
                }
            
            if "location" in event_data:
                update_data["location"] = {
                    "displayName": event_data["location"]
                }
            
            if "attendees" in event_data:
                update_data["attendees"] = []
                for attendee in event_data["attendees"]:
                    if attendee.strip():
                        if "@" in attendee and "." in attendee.split("@")[1]:
                            update_data["attendees"].append({
                                "emailAddress": {
                                    "address": attendee.strip(),
                                    "name": attendee.strip()
                                },
                                "type": "required"
                            })
            
            result = self._make_request("PATCH", f"/me/events/{event_id}", update_data)
            
            if result:
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Microsoft Graph")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ {event_id} –≤ Microsoft Graph")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Microsoft Graph: {str(e)}")
            return False
    
    def delete_event_from_microsoft_graph(self, event_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ Microsoft Graph"""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Microsoft Graph: {event_id}")
            
            result = self._make_request("DELETE", f"/me/events/{event_id}")
            
            if result:
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Microsoft Graph")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ {event_id} –∏–∑ Microsoft Graph")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑ Microsoft Graph: {str(e)}")
            return False
    
    def get_calendars(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –∏–∑ Microsoft Graph...")
            
            # –î–ª—è Application permissions –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞
            users_result = self._make_request("GET", "/users")
            
            if not users_result or "value" not in users_result:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users = users_result["value"]
            if not users:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            user_id = users[0]["id"]
            logger.info(f"üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            
            result = self._make_request("GET", f"/users/{user_id}/calendars")
            
            if result and "value" in result:
                calendars = result["value"]
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(calendars)} –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π")
                
                processed_calendars = []
                for calendar in calendars:
                    processed_calendars.append({
                        "id": calendar.get("id"),
                        "name": calendar.get("name"),
                        "color": calendar.get("color"),
                        "is_default": calendar.get("isDefaultCalendar", False),
                        "can_edit": calendar.get("canEdit", False)
                    })
                
                return processed_calendars
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –∏–∑ Microsoft Graph")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –∏–∑ Microsoft Graph: {str(e)}")
            return []

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
microsoft_graph_sync = MicrosoftGraphSync()
