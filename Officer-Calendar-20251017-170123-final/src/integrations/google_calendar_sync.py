"""
Google Calendar Integration Module
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Calendar API
"""

import os
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

try:
    from google.oauth2.credentials import Credentials
    from google_auth_oauthlib.flow import InstalledAppFlow
    from google.auth.transport.requests import Request
    from googleapiclient.discovery import build
    import pickle
except ImportError:
    print("‚ö†Ô∏è Google Calendar API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-api-python-client google-auth-oauthlib")
    Credentials = None
    InstalledAppFlow = None
    Request = None
    build = None
    pickle = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Calendar API
SCOPES = ['https://www.googleapis.com/auth/calendar']

class GoogleCalendarSync:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar"""
    
    def __init__(self, credentials_file: str = "credentials.json", token_file: str = "token.pickle"):
        self.credentials_file = credentials_file
        self.token_file = token_file
        self.service = None
        self.credentials = None
        
    def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Google Calendar API"""
        try:
            if not os.path.exists(self.credentials_file):
                logger.error(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_file}")
                logger.info("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª credentials.json –≤ Google Cloud Console")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if os.path.exists(self.token_file):
                with open(self.token_file, 'rb') as token:
                    self.credentials = pickle.load(token)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not self.credentials or not self.credentials.valid:
                if self.credentials and self.credentials.expired and self.credentials.refresh_token:
                    self.credentials.refresh(Request())
                else:
                    flow = InstalledAppFlow.from_client_secrets_file(
                        self.credentials_file, SCOPES)
                    self.credentials = flow.run_local_server(port=0)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                with open(self.token_file, 'wb') as token:
                    pickle.dump(self.credentials, token)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Google Calendar
            self.service = build('calendar', 'v3', credentials=self.credentials)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å Google Calendar")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return False
    
    def get_today_events(self, calendar_id: str = 'primary') -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"""
        return self.get_events_for_period(days_ahead=0, calendar_id=calendar_id)
    
    def get_events_for_period(self, days_ahead: int = 7, calendar_id: str = 'primary') -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥"""
        try:
            if not self.service:
                logger.error("‚ùå –°–µ—Ä–≤–∏—Å Google Calendar –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
            now = datetime.now()
            start_of_period = now.replace(hour=0, minute=0, second=0, microsecond=0)
            end_of_period = now + timedelta(days=days_ahead)
            end_of_period = end_of_period.replace(hour=23, minute=59, second=59, microsecond=999999)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è API
            time_min = start_of_period.isoformat() + 'Z'
            time_max = end_of_period.isoformat() + 'Z'
            
            logger.info(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å {time_min} –ø–æ {time_max}")
            logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã: {now}")
            logger.info(f"üìÖ –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {start_of_period}")
            logger.info(f"üìÖ –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: {end_of_period}")
            logger.info(f"üìä –ü–µ—Ä–∏–æ–¥: {days_ahead} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥")
            logger.info(f"üåç Calendar ID: {calendar_id}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            logger.info("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Calendar API...")
            events_result = self.service.events().list(
                calendarId=calendar_id,
                timeMin=time_min,
                timeMax=time_max,
                singleEvents=True,
                orderBy='startTime'
            ).execute()
            
            logger.info(f"üì° –û—Ç–≤–µ—Ç –æ—Ç Google Calendar API –ø–æ–ª—É—á–µ–Ω")
            logger.info(f"üìä –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(events_result, indent=2, default=str)}")
            
            events = events_result.get('items', [])
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ ({days_ahead} –¥–Ω–µ–π)")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
            for i, event in enumerate(events):
                logger.info(f"üìÖ –°–æ–±—ã—Ç–∏–µ {i+1}:")
                logger.info(f"   ID: {event.get('id', 'N/A')}")
                logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {event.get('summary', 'N/A')}")
                logger.info(f"   –ù–∞—á–∞–ª–æ: {event.get('start', {})}")
                logger.info(f"   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {event.get('end', {})}")
                logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description', 'N/A')}")
                logger.info(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {event.get('location', 'N/A')}")
                logger.info(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(event.get('attendees', []))}")
                logger.info(f"   –°—Ç–∞—Ç—É—Å: {event.get('status', 'N/A')}")
                logger.info(f"   –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(event, indent=2, default=str)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            processed_events = []
            for i, event in enumerate(events):
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {i+1}: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                processed_event = self._process_event(event)
                if processed_event:
                    processed_events.append(processed_event)
                    logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {i+1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ {i+1} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
            
            logger.info(f"üéØ –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {len(processed_events)}")
            return processed_events
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {str(e)}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return []
    
    def create_event_in_google_calendar(self, event_data: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar"""
        try:
            if not self.service:
                logger.error("‚ùå –°–µ—Ä–≤–∏—Å Google Calendar –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: {event_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            start_time = event_data.get('start_time')
            end_time = event_data.get('end_time')
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ –∫–∞–∫ –æ–±—ä–µ–∫—Ç datetime, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            if hasattr(start_time, 'strftime'):
                start_time = start_time.strftime('%Y-%m-%dT%H:%M:%S')
            elif isinstance(start_time, str) and ' ' in start_time:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç "2025-10-09 16:45:00" –≤ "2025-10-09T16:45:00"
                start_time = start_time.replace(' ', 'T')
            
            if hasattr(end_time, 'strftime'):
                end_time = end_time.strftime('%Y-%m-%dT%H:%M:%S')
            elif isinstance(end_time, str) and ' ' in end_time:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç "2025-10-09 17:00:00" –≤ "2025-10-09T17:00:00"
                end_time = end_time.replace(' ', 'T')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è Google Calendar API
            google_event = {
                'summary': event_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'description': event_data.get('description', ''),
                'location': event_data.get('location', ''),
                'start': {
                    'dateTime': start_time,
                    'timeZone': 'Europe/Moscow'
                },
                'end': {
                    'dateTime': end_time,
                    'timeZone': 'Europe/Moscow'
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            if event_data.get('attendees'):
                google_event['attendees'] = []
                for attendee in event_data['attendees']:
                    if attendee.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º email
                        if '@' in attendee and '.' in attendee.split('@')[1]:
                            # –≠—Ç–æ email –∞–¥—Ä–µ—Å
                            google_event['attendees'].append({
                                'email': attendee.strip(),
                                'displayName': attendee.strip()
                            })
                        else:
                            # –≠—Ç–æ –∏–º—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ Google Calendar
                            logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ '{attendee}' - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è email –∞–¥—Ä–µ—Å–æ–º")
            
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è Google Calendar: {json.dumps(google_event, indent=2, default=str)}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            created_event = self.service.events().insert(
                calendarId='primary',
                body=google_event
            ).execute()
            
            event_id = created_event.get('id')
            event_link = created_event.get('htmlLink')
            
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Google Calendar")
            logger.info(f"üÜî ID —Å–æ–±—ã—Ç–∏—è: {event_id}")
            logger.info(f"üîó –°—Å—ã–ª–∫–∞: {event_link}")
            
            return event_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: {str(e)}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {json.dumps(event_data, indent=2, default=str)}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return None
    
    def update_event_in_google_calendar(self, event_id: str, event_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar"""
        try:
            if not self.service:
                logger.error("‚ùå –°–µ—Ä–≤–∏—Å Google Calendar –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: {event_id}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            start_time = event_data.get('start_time')
            end_time = event_data.get('end_time')
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ –∫–∞–∫ –æ–±—ä–µ–∫—Ç datetime, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            if hasattr(start_time, 'strftime'):
                start_time = start_time.strftime('%Y-%m-%dT%H:%M:%S')
            elif isinstance(start_time, str) and ' ' in start_time:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç "2025-10-09 16:45:00" –≤ "2025-10-09T16:45:00"
                start_time = start_time.replace(' ', 'T')
            
            if hasattr(end_time, 'strftime'):
                end_time = end_time.strftime('%Y-%m-%dT%H:%M:%S')
            elif isinstance(end_time, str) and ' ' in end_time:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç "2025-10-09 17:00:00" –≤ "2025-10-09T17:00:00"
                end_time = end_time.replace(' ', 'T')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è Google Calendar API
            google_event = {
                'summary': event_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'description': event_data.get('description', ''),
                'location': event_data.get('location', ''),
                'start': {
                    'dateTime': start_time,
                    'timeZone': 'Europe/Moscow'
                },
                'end': {
                    'dateTime': end_time,
                    'timeZone': 'Europe/Moscow'
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            if event_data.get('attendees'):
                google_event['attendees'] = []
                for attendee in event_data['attendees']:
                    if attendee.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º email
                        if '@' in attendee and '.' in attendee.split('@')[1]:
                            # –≠—Ç–æ email –∞–¥—Ä–µ—Å
                            google_event['attendees'].append({
                                'email': attendee.strip(),
                                'displayName': attendee.strip()
                            })
                        else:
                            # –≠—Ç–æ –∏–º—è, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ Google Calendar
                            logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ '{attendee}' - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è email –∞–¥—Ä–µ—Å–æ–º")
            
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {json.dumps(google_event, indent=2, default=str)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            updated_event = self.service.events().update(
                calendarId='primary',
                eventId=event_id,
                body=google_event
            ).execute()
            
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Google Calendar")
            logger.info(f"üÜî ID —Å–æ–±—ã—Ç–∏—è: {updated_event.get('id')}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar: {str(e)}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {json.dumps(event_data, indent=2, default=str)}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    def delete_event_from_google_calendar(self, event_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ Google Calendar"""
        try:
            if not self.service:
                logger.error("‚ùå –°–µ—Ä–≤–∏—Å Google Calendar –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar: {event_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.service.events().delete(
                calendarId='primary',
                eventId=event_id
            ).execute()
            
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Calendar")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar: {str(e)}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return False
    
    def _process_event(self, event: Dict) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ Google Calendar"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            start = event.get('start', {})
            end = event.get('end', {})
            
            logger.info(f"üìÖ –ù–∞—á–∞–ª–æ —Å–æ–±—ã—Ç–∏—è: {start}")
            logger.info(f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {end}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è (–º–æ–∂–µ—Ç –±—ã—Ç—å dateTime –∏–ª–∏ date)
            if 'dateTime' in start:
                logger.info("üïê –°–æ–±—ã—Ç–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (dateTime)")
                start_time = datetime.fromisoformat(start['dateTime'].replace('Z', '+00:00'))
                end_time = datetime.fromisoformat(end['dateTime'].replace('Z', '+00:00'))
                logger.info(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}")
                logger.info(f"üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}")
            elif 'date' in start:
                logger.info("üìÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å (date)")
                start_time = datetime.fromisoformat(start['date'])
                end_time = datetime.fromisoformat(end['date'])
                logger.info(f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_time}")
                logger.info(f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏: start={start}, end={end}")
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
            logger.info("üåç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            description = event.get('description', '')
            location = event.get('location', '')
            
            logger.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {summary}")
            logger.info(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
            logger.info(f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            attendees = []
            if 'attendees' in event:
                logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(event['attendees'])}")
                for i, attendee in enumerate(event['attendees']):
                    email = attendee.get('email', '')
                    name = attendee.get('displayName', '')
                    logger.info(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ {i+1}: email={email}, name={name}")
                    if email:
                        attendees.append(email)
                    elif name:
                        attendees.append(name)
            else:
                logger.info("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            processed_event = {
                'title': summary,
                'start_time': start_time.isoformat(),
                'end_time': end_time.isoformat(),
                'description': description,
                'location': location,
                'attendees': attendees,
                'source': 'google_calendar',
                'google_event_id': event.get('id'),
                'google_calendar_link': event.get('htmlLink', ''),
                'updated': event.get('updated')  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {summary} ({start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')})")
            logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç: {json.dumps(processed_event, indent=2, default=str)}")
            return processed_event
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
            logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {json.dumps(event, indent=2, default=str)}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return None
    
    def sync_to_local_database(self, events: List[Dict]) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            synced_count = 0
            skipped_count = 0
            error_count = 0
            
            for event in events:
                try:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logger.info(f"üìù –°–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {event['title']}")
                    synced_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event.get('title', 'Unknown')}: {str(e)}")
                    error_count += 1
            
            result = {
                'synced': synced_count,
                'skipped': skipped_count,
                'errors': error_count,
                'total': len(events)
            }
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return {'synced': 0, 'skipped': 0, 'errors': len(events), 'total': len(events)}

def create_sample_credentials_file():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ credentials.json"""
    sample_credentials = {
        "installed": {
            "client_id": "YOUR_CLIENT_ID.apps.googleusercontent.com",
            "project_id": "your-project-id",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_secret": "YOUR_CLIENT_SECRET",
            "redirect_uris": ["http://localhost"]
        }
    }
    
    with open("credentials.json.example", "w") as f:
        json.dump(sample_credentials, f, indent=2)
    
    logger.info("üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ credentials.json.example")
    logger.info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ credentials.json –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Calendar –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ credentials
    create_sample_credentials_file()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
    sync = GoogleCalendarSync()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if sync.authenticate():
        logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        events = sync.get_today_events()
        
        if events:
            logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:")
            for event in events:
                logger.info(f"  - {event['title']} ({event['start_time']} - {event['end_time']})")
        else:
            logger.info("üìÖ –°–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        logger.error("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
