// –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API)
let mockEvents = [];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è Notes
let globalSuggestionsBox = null;

function createGlobalSuggestionsBox() {
  if (globalSuggestionsBox) {
    globalSuggestionsBox.remove();
  }
  
  globalSuggestionsBox = document.createElement('div');
  globalSuggestionsBox.className = 'global-suggestions-box';
  globalSuggestionsBox.id = 'global-suggestions-box';
  document.body.appendChild(globalSuggestionsBox);
  
  return globalSuggestionsBox;
}

function hideGlobalSuggestionsBox() {
  if (globalSuggestionsBox) {
    globalSuggestionsBox.style.display = 'none';
  }
}

// ===== –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö =====

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (error, warning, info, success)
 * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5000)
 */
function showNotification(message, type = 'error', duration = 5000) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let notificationContainer = document.querySelector('.notification-container');
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.className = 'notification-container';
        notificationContainer.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            max-width: 400px;
        `;
        document.body.appendChild(notificationContainer);
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ 5
    const existingNotifications = notificationContainer.querySelectorAll('.notification');
    if (existingNotifications.length >= 5) {
        // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ –≤ —Å–ø–∏—Å–∫–µ) –°–†–ê–ó–£
        const oldestNotification = existingNotifications[0];
        oldestNotification.remove(); // –£–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É, –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ" –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ–ª—å—à–µ 3
    if (existingNotifications.length >= 3) {
        let clearAllButton = notificationContainer.querySelector('.clear-all-button');
        if (!clearAllButton) {
            clearAllButton = document.createElement('button');
            clearAllButton.className = 'clear-all-button';
            clearAllButton.textContent = '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ';
            clearAllButton.style.cssText = `
                position: absolute;
                top: -35px;
                right: 0;
                background: #ef4444;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px 12px;
                font-size: 12px;
                cursor: pointer;
                z-index: 10001;
            `;
            clearAllButton.onclick = clearAllNotifications;
            notificationContainer.appendChild(clearAllButton);
        }
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let icon, bgColor, borderColor;
    switch (type) {
        case 'error':
            icon = '‚ùå';
            bgColor = '#fee2e2';
            borderColor = '#fca5a5';
            break;
        case 'warning':
            icon = '‚ö†Ô∏è';
            bgColor = '#fef3c7';
            borderColor = '#fbbf24';
            break;
        case 'info':
            icon = '‚ÑπÔ∏è';
            bgColor = '#dbeafe';
            borderColor = '#60a5fa';
            break;
        case 'success':
            icon = '‚úÖ';
            bgColor = '#dcfce7';
            borderColor = '#4ade80';
            break;
        default:
            icon = '‚ÑπÔ∏è';
            bgColor = '#f3f4f6';
            borderColor = '#9ca3af';
    }

    notification.style.cssText = `
        background: ${bgColor};
        border: 2px solid ${borderColor};
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 10px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 12px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 14px;
        line-height: 1.4;
        color: #374151;
        animation: slideIn 0.3s ease-out;
        cursor: pointer;
        transition: all 0.3s ease;
    `;

    notification.innerHTML = `
        <span style="font-size: 18px;">${icon}</span>
        <span style="flex: 1;">${message}</span>
        <button onclick="this.parentElement.remove()" style="
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
            color: #6b7280;
            padding: 0;
            margin-left: 8px;
        ">√ó</button>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            @keyframes slideOut {
                from {
                    transform: translateX(0);
                    opacity: 1;
                }
                to {
                    transform: translateX(100%);
                    opacity: 0;
                }
            }
            .notification:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 15px -3px rgba(0, 0, 0, 0.1);
            }
        `;
        document.head.appendChild(style);
    }

    notificationContainer.appendChild(notification);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const finalNotifications = notificationContainer.querySelectorAll('.notification');
    if (finalNotifications.length > 5) {
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ)
        const excessCount = finalNotifications.length - 5;
        for (let i = 0; i < excessCount; i++) {
            finalNotifications[i].remove();
        }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const currentCount = getNotificationCount();
    console.log(`üì¢ –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${type}): "${message}". –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${currentCount}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
        if (notification.parentElement) {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 300);
        }
    }, duration);

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.addEventListener('click', () => {
        notification.style.animation = 'slideOut 0.3s ease-in';
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 300);
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç API –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
 * @param {Response} response - –û—Ç–≤–µ—Ç –æ—Ç fetch
 * @param {string} operation - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
 * @returns {Promise<any>} - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function handleApiResponse(response, operation = 'API –∑–∞–ø—Ä–æ—Å') {
    if (!response.ok) {
        let errorMessage = '';
        
        switch (response.status) {
            case 404:
                errorMessage = '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.';
                break;
            case 409:
                errorMessage = '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏: —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º.';
                break;
            case 500:
                errorMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                break;
            case 400:
                errorMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è.';
                break;
            default:
                errorMessage = `–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`;
        }

        console.error(`‚ùå ${operation} failed:`, {
            status: response.status,
            statusText: response.statusText,
            url: response.url
        });

        showNotification(errorMessage, 'error');
        return null;
    }

    try {
        const data = await response.json();
        return data;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è ${operation}:`, error);
        showNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'error');
        return null;
    }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fetch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {object} options - –û–ø—Ü–∏–∏ –¥–ª—è fetch
 * @param {string} operation - –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @returns {Promise<any>} - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function safeFetch(url, options = {}, operation = 'API –∑–∞–ø—Ä–æ—Å') {
    try {
        console.log(`üîÑ ${operation}:`, url);
        const response = await fetch(url, options);
        return await handleApiResponse(response, operation);
    } catch (error) {
        console.error(`‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è ${operation}:`, error);
        
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.', 'error');
        } else {
            showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
        
        return null;
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
function clearAllNotifications() {
    const notificationContainer = document.querySelector('.notification-container');
    if (notificationContainer) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notifications = notificationContainer.querySelectorAll('.notification');
        notifications.forEach(notification => {
            notification.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 300);
        });
        
        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"
        const clearAllButton = notificationContainer.querySelector('.clear-all-button');
        if (clearAllButton) {
            clearAllButton.remove();
        }
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
function getNotificationCount() {
    const notificationContainer = document.querySelector('.notification-container');
    if (notificationContainer) {
        return notificationContainer.querySelectorAll('.notification').length;
    }
    return 0;
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
function enforceNotificationLimit() {
    const notificationContainer = document.querySelector('.notification-container');
    if (notificationContainer) {
        const notifications = notificationContainer.querySelectorAll('.notification');
        if (notifications.length > 5) {
            const excessCount = notifications.length - 5;
            console.log(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º ${excessCount} –ª–∏—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
            for (let i = 0; i < excessCount; i++) {
                notifications[i].remove();
            }
        }
    }
}

// ===== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö =====

// =======================
// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê –ú–ï–¢–ê–î–ê–ù–ù–´–•
// =======================

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
 * - [HH:MM] [Person | #topic] text
 * - [Person | #topic] text  
 * - [Person] text
 * - Person: text
 * - text #topic
 * - text Important ASAP
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–º–µ—Ç–∫–∏
async function createQuestionFromNote(note, noteIndex, eventId) {
  try {
    
    // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
    const parsed = parseQuestionMetadata(note.text);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const extractedTags = extractTagsFromText(note.text, allStreamsData || []);
    const primaryTag = extractedTags.length > 0 ? extractedTags[0] : 'General';
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    const questionData = {
      event_id: eventId,
      question_text: parsed.text || note.text,
      time: note.time || parsed.time,
      person: note.person || parsed.person,
      stream: primaryTag,
      important: note.isIMP || parsed.important,
      asap: note.isASAP || parsed.asap,
      note_index: noteIndex
    };
    
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏
    const existingQuestionsResponse = await fetch('/api/open-questions');
    let existingQuestion = null;
    
    if (existingQuestionsResponse.ok) {
      const existingQuestions = await existingQuestionsResponse.json();
      // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞ –∏ —Å–æ–±—ã—Ç–∏—é
      existingQuestion = existingQuestions.find(q => 
        q.event_id === eventId && 
        q.question_text.trim().toLowerCase() === questionData.question_text.trim().toLowerCase()
      );
      
      if (existingQuestion) {
      }
    }
    
    if (existingQuestion) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      
      const updateResponse = await fetch(`/api/open-questions/${existingQuestion.id}/update`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(questionData)
      });
      
      if (updateResponse.ok) {
        const result = await updateResponse.json();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–º–µ—Ç–∫–µ –¥–ª—è —Å–≤—è–∑–∏
        note.questionId = existingQuestion.id;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        showNotification('Open Question data updated', 'success');
      } else {
        const error = await updateResponse.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        showNotification(`Error updating question: ${error.detail}`, 'error');
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
      
      const response = await fetch('/api/open-questions/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(questionData)
      });
      
      if (response.ok) {
        const result = await response.json();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ –∑–∞–º–µ—Ç–∫–µ –¥–ª—è —Å–≤—è–∑–∏
        note.questionId = result.question_id;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        showNotification('Question added to Open Questions', 'success');
      } else {
        const error = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        showNotification(`Error creating question: ${error.detail}`, 'error');
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
    showNotification(`Error: ${error.message}`, 'error');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 20px;
    border-radius: 4px;
    color: white;
    font-weight: 500;
    z-index: 10000;
    max-width: 300px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    ${type === 'success' ? 'background-color: #4CAF50;' : ''}
    ${type === 'error' ? 'background-color: #f44336;' : ''}
    ${type === 'info' ? 'background-color: #2196F3;' : ''}
  `;
  
  document.body.appendChild(notification);
  
  // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification);
    }
  }, 3000);
}

function parseQuestionMetadata(str) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
  if (typeof str !== 'string') {
    str = str ? String(str) : '';
  }
  
  const result = { 
    text: str, 
    time: null, 
    person: null, 
    topic: null, 
    due: null, 
    important: false, 
    asap: false 
  };
  
  let remaining = str.trim();
  
  // 1. –í—Ä–µ–º—è [HH:MM] –≤ –Ω–∞—á–∞–ª–µ
  const timeMatch = remaining.match(/^\[(\d{1,2}:\d{2})\]\s*/);
  if (timeMatch) {
    result.time = timeMatch[1];
    remaining = remaining.replace(timeMatch[0], '').trim();
  }
  
  // 2. –ë–ª–æ–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –∏/–∏–ª–∏ —Ç–µ–º–æ–π [Person | #topic] –∏–ª–∏ [Person]
  const personBlockMatch = remaining.match(/^\[([^\]]+)\]\s*/);
  if (personBlockMatch) {
    const personBlock = personBlockMatch[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |
    if (personBlock.includes(' | ')) {
      const parts = personBlock.split(' | ');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ö–µ—à—Ç–µ–≥–æ–º
      if (!parts[0].trim().startsWith('#')) {
        result.person = parts[0].trim();
      }
      
      // –ò—â–µ–º —Ç–µ–º—É –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
      const topicPart = parts[1].trim();
      if (topicPart.startsWith('#')) {
        result.topic = topicPart.substring(1).trim();
      }
    } else {
      // –ü—Ä–æ—Å—Ç–æ —á–µ–ª–æ–≤–µ–∫ –±–µ–∑ —Ç–µ–º—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ö–µ—à—Ç–µ–≥
      if (!personBlock.startsWith('#')) {
        result.person = personBlock;
      }
    }
    
    remaining = remaining.replace(personBlockMatch[0], '').trim();
  }
  
  // 3. –¢–µ–º–∞ #topic –≤ –æ—Å—Ç–∞–≤—à–µ–º—Å—è —Ç–µ–∫—Å—Ç–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
  if (!result.topic) {
    const topicMatch = remaining.match(/#([A-Za-z][A-Za-z\s]{2,20}?)(?:\s|$)/);
    if (topicMatch) {
      result.topic = topicMatch[1];
      remaining = remaining.replace(topicMatch[0], '').trim();
    }
  }
  
  // 4. –§–ª–∞–≥–∏ Important –∏ ASAP
  if (remaining.toLowerCase().includes('important')) {
    result.important = true;
    remaining = remaining.replace(/important/gi, '').trim();
  }
  
  if (remaining.toLowerCase().includes('asap')) {
    result.asap = true;
    remaining = remaining.replace(/asap/gi, '').trim();
  }
  
  // 5. –û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
  result.text = remaining;
  
  return result;
}

const eventDetails = document.getElementById("event-details");
const dateListEl = document.getElementById("date-list");
const allSlotsEl = document.getElementById("all-slots");
const sidebarEl = document.getElementById("sidebar");
const clockTimeEl = document.getElementById("clock-time");
const dateTopEl = document.getElementById("sidebar-date-top");
const dateBottomEl = document.getElementById("sidebar-date-bottom");

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
let meetingStartTime = null;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
let searchResults = [];

// =======================
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
// =======================

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
function getMoscowTime() {
  // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - –≤—Å–µ –¥–∞—Ç—ã —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  return new Date();
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
function getCurrentDateAtMidnight() {
  const now = new Date();
  const year = now.getFullYear();
  const month = now.getMonth();
  const day = now.getDate();
  return new Date(year, month, day, 0, 0, 0, 0);
}

// –°–æ–∑–¥–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–≤—Å–µ –¥–∞—Ç—ã —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
function createMoscowDate(dateStr) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dateStr –Ω–µ undefined –∏–ª–∏ null
  if (!dateStr) {
    console.warn('createMoscowDate: dateStr is undefined or null');
    return new Date();
  }
  
  // –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ - –≤—Å–µ –¥–∞—Ç—ã —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  return new Date(dateStr);
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
function toMoscowISOString(date) {
  // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º timezone –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ISO —Å—Ç—Ä–æ–∫—É —Å offset
  const moscowDate = new Date(date.getTime() + (3 * 60 * 60 * 1000));
  return moscowDate.toISOString().replace('Z', '+03:00');
}

// –°–æ–∑–¥–∞—Ç—å –¥–∞—Ç—É –¥–ª—è —Å–ª–æ—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
function createSlotDate(year, month, day, hour, minute) {
  return new Date(year, month - 1, day, hour, minute, 0, 0);
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
function isToday(date) {
  const today = getMoscowTime();
  return date.getDate() === today.getDate() && 
         date.getMonth() === today.getMonth() && 
         date.getFullYear() === today.getFullYear();
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç —Å–æ–±—ã—Ç–∏–µ–º
function isSlotOccupied(slotDate, slotStart, slotEnd) {
  const slotStartTime = createSlotDate(
    parseInt(slotDate.split('-')[0]),
    parseInt(slotDate.split('-')[1]),
    parseInt(slotDate.split('-')[2]),
    parseInt(slotStart.split(':')[0]),
    parseInt(slotStart.split(':')[1])
  );
  
  const slotEndTime = createSlotDate(
    parseInt(slotDate.split('-')[0]),
    parseInt(slotDate.split('-')[1]),
    parseInt(slotDate.split('-')[2]),
    parseInt(slotEnd.split(':')[0]),
    parseInt(slotEnd.split(':')[1])
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É (–≤–∫–ª—é—á–∞—è –±—É–¥—É—â–∏–µ)
  return mockEvents.some(event => {
    const eventStart = createMoscowDate(event.start);
    const eventEnd = createMoscowDate(event.end);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É
    const eventDate = eventStart.toISOString().slice(0, 10);
    if (eventDate !== slotDate) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    return (eventStart < slotEndTime && eventEnd > slotStartTime);
  });
}

// –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
function findNextEvent(activeDateSlots, currentHour, currentMinute) {
  const currentMinutes = currentHour * 60 + currentMinute;
  
  
  // –ò—â–µ–º —Å–ª–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  const eventSlots = activeDateSlots.filter(slot => slot.classList.contains('event-slot'));
  
  if (eventSlots.length === 0) return null;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏
  let currentEvent = null;
  eventSlots.forEach(slot => {
    const slotStart = slot.dataset.start;
    const slotEnd = slot.dataset.end;
    const [startHour, startMinute] = slotStart.split(':').map(Number);
    const [endHour, endMinute] = slotEnd.split(':').map(Number);
    
    const slotStartMinutes = startHour * 60 + startMinute;
    const slotEndMinutes = endHour * 60 + endMinute;
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏
    if (currentMinutes >= slotStartMinutes && currentMinutes < slotEndMinutes) {
      currentEvent = slot;
    }
  });
  
  // –ï—Å–ª–∏ –º—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
  if (currentEvent) {
    const slotEnd = currentEvent.dataset.end;
    const [endHour, endMinute] = slotEnd.split(':').map(Number);
    const slotEndMinutes = endHour * 60 + endMinute;
    
    const minutesToEnd = slotEndMinutes - currentMinutes;
    
    // –ï—Å–ª–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
    if (minutesToEnd > 5) {
      return null;
    }
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å)
  let nextEvent = null;
  let minTimeDiff = Infinity;
  
  eventSlots.forEach(slot => {
    const slotStart = slot.dataset.start;
    const [startHour, startMinute] = slotStart.split(':').map(Number);
    const slotStartMinutes = startHour * 60 + startMinute;
    
    // –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏—Å—å
    if (slotStartMinutes > currentMinutes) {
      const timeDiff = slotStartMinutes - currentMinutes;
      // console.log('DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ:', `${slotStart}-${slot.dataset.end}`, `–≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞: ${timeDiff}–º`);
      if (timeDiff < minTimeDiff) {
        minTimeDiff = timeDiff;
        nextEvent = slot;
      }
    }
  });
  
  return nextEvent;
}

// –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
function calculateTimeToNextEvent(nextEventSlot, currentHour, currentMinute) {
  if (!nextEventSlot) return '';
  
  const slotStart = nextEventSlot.dataset.start;
  const [startHour, startMinute] = slotStart.split(':').map(Number);
  
  const currentMinutes = currentHour * 60 + currentMinute;
  const slotStartMinutes = startHour * 60 + startMinute;
  const diffMinutes = slotStartMinutes - currentMinutes;
  
  if (diffMinutes <= 0) return '';
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ—Ç–∞
  const eventText = nextEventSlot.textContent;
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "–≤—Ä–µ–º—è ‚Äì –≤—Ä–µ–º—è: –Ω–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "–≤—Ä–µ–º—è: –Ω–∞–∑–≤–∞–Ω–∏–µ"
  let eventName = eventText.split(': ')[1] || eventText.split(' ‚Äì ')[1];
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  if (!eventName) {
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–≤—Ä–µ–º—è ‚Äì –≤—Ä–µ–º—è: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
    const timePattern = /^\d{2}:\d{2} ‚Äì \d{2}:\d{2}: (.+)$/;
    const match = eventText.match(timePattern);
    eventName = match ? match[1] : '—Å–æ–±—ã—Ç–∏–µ';
  }
  
  
  // –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ_—Å–æ–±—ã—Ç–∏—è in –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–º–∏–Ω—É—Ç (–≤—Å–µ–≥–¥–∞ –¥–æ –Ω–∞—á–∞–ª–∞)
  return {
    text: `${eventName} in ${diffMinutes}–º`,
    shortText: `Next in ${diffMinutes}–º`,
    fullEventName: eventName
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
function showDatePicker() {
  console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã');
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modal = document.createElement('div');
  modal.className = 'date-picker-modal';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const calendarContainer = document.createElement('div');
  calendarContainer.style.cssText = `
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    max-width: 400px;
    width: 90%;
  `;
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  const header = document.createElement('div');
  header.style.cssText = `
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid #f0f0f0;
  `;
  
  const title = document.createElement('h3');
  title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–ª—É—é –¥–∞—Ç—É';
  title.style.cssText = 'margin: 0; color: #333; font-size: 18px;';
  
  const closeBtn = document.createElement('button');
  closeBtn.innerHTML = '‚úï';
  closeBtn.style.cssText = `
    background: #ff4444;
    color: white;
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  `;
  
  header.appendChild(title);
  header.appendChild(closeBtn);
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
  const nav = document.createElement('div');
  nav.style.cssText = `
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  `;
  
  const prevBtn = document.createElement('button');
  prevBtn.innerHTML = '‚Äπ';
  prevBtn.style.cssText = `
    background: #4aa3ff;
    color: white;
    border: none;
    border-radius: 6px;
    width: 40px;
    height: 40px;
    cursor: pointer;
    font-size: 20px;
    font-weight: bold;
  `;
  
  const monthYear = document.createElement('div');
  monthYear.style.cssText = `
    font-size: 18px;
    font-weight: 600;
    color: #333;
  `;
  
  const nextBtn = document.createElement('button');
  nextBtn.innerHTML = '‚Ä∫';
  nextBtn.style.cssText = prevBtn.style.cssText;
  
  nav.appendChild(prevBtn);
  nav.appendChild(monthYear);
  nav.appendChild(nextBtn);
  
  // –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
  const calendarGrid = document.createElement('div');
  calendarGrid.className = 'date-picker-calendar-grid';
  calendarGrid.style.cssText = `
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 4px;
    margin-bottom: 15px;
  `;
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤ updateCalendar()
  
  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const actions = document.createElement('div');
  actions.style.cssText = `
    display: flex;
    gap: 10px;
    justify-content: flex-end;
  `;
  
  const cancelBtn = document.createElement('button');
  cancelBtn.textContent = '–û—Ç–º–µ–Ω–∞';
  cancelBtn.style.cssText = `
    background: #ccc;
    color: #333;
    border: none;
    border-radius: 6px;
    padding: 8px 16px;
    cursor: pointer;
    font-size: 14px;
  `;
  
  const todayBtn = document.createElement('button');
  todayBtn.textContent = '–°–µ–≥–æ–¥–Ω—è';
  todayBtn.style.cssText = `
    background: #4aa3ff;
    color: white;
    border: none;
    border-radius: 6px;
    padding: 8px 16px;
    cursor: pointer;
    font-size: 14px;
  `;
  
  actions.appendChild(cancelBtn);
  actions.appendChild(todayBtn);
  
  calendarContainer.appendChild(header);
  calendarContainer.appendChild(nav);
  calendarContainer.appendChild(calendarGrid);
  calendarContainer.appendChild(actions);
  modal.appendChild(calendarContainer);
  document.body.appendChild(modal);
  
  // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  let currentDate = new Date();
  let selectedDate = null;
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  function updateCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    monthYear.textContent = `${getMonthName(month)} ${year}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥"
    const today = new Date();
    const nextMonth = new Date(currentDate);
    nextMonth.setMonth(nextMonth.getMonth() + 1);
    
    if (nextMonth.getMonth() > today.getMonth() || nextMonth.getFullYear() > today.getFullYear()) {
      nextBtn.style.opacity = '0.5';
      nextBtn.style.cursor = 'not-allowed';
      nextBtn.disabled = true;
    } else {
      nextBtn.style.opacity = '1';
      nextBtn.style.cursor = 'pointer';
      nextBtn.disabled = false;
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å—é —Å–µ—Ç–∫—É (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    calendarGrid.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    const weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    weekdays.forEach((day, index) => {
      const dayHeader = document.createElement('div');
      dayHeader.textContent = day;
      dayHeader.style.cssText = `
        text-align: center;
        font-weight: 600;
        color: #666;
        padding: 8px 4px;
        font-size: 14px;
      `;
      calendarGrid.appendChild(dayHeader);
    });
    
    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    let firstDayOfWeek = firstDay.getDay();
    firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
    
    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < firstDayOfWeek; i++) {
      const emptyCell = document.createElement('div');
      emptyCell.style.cssText = `
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
      `;
      calendarGrid.appendChild(emptyCell);
    }
    
    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
      const dayCell = document.createElement('div');
      dayCell.className = 'calendar-day date-picker-calendar-day';
      dayCell.textContent = day;
      dayCell.style.cssText = `
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border-radius: 6px;
        font-size: 14px;
        transition: all 0.2s;
      `;
      
      const cellDate = new Date(year, month, day);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–π
      if (cellDate > today) {
        dayCell.style.color = '#ccc';
        dayCell.style.cursor = 'not-allowed';
      } else if (cellDate.getTime() === today.getTime()) {
        dayCell.style.background = '#4aa3ff';
        dayCell.style.color = 'white';
        dayCell.style.fontWeight = 'bold';
      } else {
        dayCell.style.color = '#333';
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–ª—ã–µ –¥–∞—Ç—ã
      if (cellDate <= today) {
        dayCell.addEventListener('click', () => {
          // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
          calendarGrid.querySelectorAll('.calendar-day').forEach(cell => {
            if (cell.style.background === '#ff4444') {
              cell.style.background = '';
              cell.style.color = '#333';
            }
          });
          
          // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
          dayCell.style.background = '#ff4444';
          dayCell.style.color = 'white';
          selectedDate = cellDate;
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
          setTimeout(() => {
            console.log('–í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É:', selectedDate);
            try {
              switchToDate(selectedDate);
              console.log('–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –¥–∞—Ç—ã:', error);
            }
            modal.remove();
          }, 200);
        });
        
        dayCell.addEventListener('mouseenter', () => {
          if (dayCell.style.background !== '#ff4444') {
            dayCell.style.background = '#f0f0f0';
          }
        });
        
        dayCell.addEventListener('mouseleave', () => {
          if (dayCell.style.background === '#f0f0f0') {
            dayCell.style.background = '';
          }
        });
      }
      
      calendarGrid.appendChild(dayCell);
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
  function getMonthName(month) {
    const months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    return months[month];
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  prevBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    updateCalendar();
  });
  
  nextBtn.addEventListener('click', () => {
    if (!nextBtn.disabled) {
      const nextMonth = new Date(currentDate);
      nextMonth.setMonth(nextMonth.getMonth() + 1);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –±—É–¥—É—â–∏–º –º–µ—Å—è—Ü–∞–º
      if (nextMonth.getMonth() <= today.getMonth() && nextMonth.getFullYear() <= today.getFullYear()) {
        currentDate.setMonth(currentDate.getMonth() + 1);
        updateCalendar();
      }
    }
  });
  
  closeBtn.addEventListener('click', () => {
    modal.remove();
  });
  
  cancelBtn.addEventListener('click', () => {
    modal.remove();
  });
  
  todayBtn.addEventListener('click', () => {
    selectedDate = new Date();
    switchToDate(selectedDate);
    modal.remove();
  });
  
  // –ö–ª–∏–∫ –≤–Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  updateCalendar();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–¥—É—â–µ–π –¥–∞—Ç—ã
function showFutureDatePicker() {
  console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–¥—É—â–µ–π –¥–∞—Ç—ã');
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modal = document.createElement('div');
  modal.className = 'future-date-picker-modal';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const calendarContainer = document.createElement('div');
  calendarContainer.style.cssText = `
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    max-width: 400px;
    width: 90%;
  `;
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  const header = document.createElement('div');
  header.style.cssText = `
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid #f0f0f0;
  `;
  
  const title = document.createElement('h3');
  title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É';
  title.style.cssText = 'margin: 0; color: #333; font-size: 18px;';
  
  const closeBtn = document.createElement('button');
  closeBtn.innerHTML = '‚úï';
  closeBtn.style.cssText = `
    background: #ff4444;
    color: white;
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  `;
  
  header.appendChild(title);
  header.appendChild(closeBtn);
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
  const nav = document.createElement('div');
  nav.style.cssText = `
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  `;
  
  const prevBtn = document.createElement('button');
  prevBtn.innerHTML = '‚Äπ';
  prevBtn.style.cssText = `
    background: #4aa3ff;
    color: white;
    border: none;
    border-radius: 6px;
    width: 40px;
    height: 40px;
    cursor: pointer;
    font-size: 20px;
    font-weight: bold;
  `;
  
  const monthYear = document.createElement('div');
  monthYear.style.cssText = `
    font-size: 18px;
    font-weight: 600;
    color: #333;
  `;
  
  const nextBtn = document.createElement('button');
  nextBtn.innerHTML = '‚Ä∫';
  nextBtn.style.cssText = prevBtn.style.cssText;
  
  nav.appendChild(prevBtn);
  nav.appendChild(monthYear);
  nav.appendChild(nextBtn);
  
  // –°–µ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const calendarGrid = document.createElement('div');
  calendarGrid.style.cssText = `
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 4px;
    margin-bottom: 20px;
  `;
  
  // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const actions = document.createElement('div');
  actions.style.cssText = `
    display: flex;
    justify-content: space-between;
    gap: 10px;
  `;
  
  const cancelBtn = document.createElement('button');
  cancelBtn.textContent = '–û—Ç–º–µ–Ω–∞';
  cancelBtn.style.cssText = `
    background: #ccc;
    color: #333;
    border: none;
    border-radius: 6px;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 14px;
    flex: 1;
  `;
  
  const todayBtn = document.createElement('button');
  todayBtn.textContent = '–°–µ–≥–æ–¥–Ω—è';
  todayBtn.style.cssText = `
    background: #4aa3ff;
    color: white;
    border: none;
    border-radius: 6px;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 14px;
    flex: 1;
  `;
  
  actions.appendChild(cancelBtn);
  actions.appendChild(todayBtn);
  
  calendarContainer.appendChild(header);
  calendarContainer.appendChild(nav);
  calendarContainer.appendChild(calendarGrid);
  calendarContainer.appendChild(actions);
  modal.appendChild(calendarContainer);
  document.body.appendChild(modal);
  
  // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–Ω–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è)
  let currentDate = new Date();
  currentDate.setDate(currentDate.getDate() + 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞
  let selectedDate = null;
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  function updateCalendar() {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    monthYear.textContent = `${getMonthName(month)} ${year}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    const today = new Date();
    const prevMonth = new Date(currentDate);
    prevMonth.setMonth(prevMonth.getMonth() - 1);
    
    if (prevMonth.getMonth() < today.getMonth() || prevMonth.getFullYear() < today.getFullYear()) {
      prevBtn.style.opacity = '0.5';
      prevBtn.style.cursor = 'not-allowed';
      prevBtn.disabled = true;
    } else {
      prevBtn.style.opacity = '1';
      prevBtn.style.cursor = 'pointer';
      prevBtn.disabled = false;
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å—é —Å–µ—Ç–∫—É (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    calendarGrid.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    const weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
    weekdays.forEach((day, index) => {
      const dayHeader = document.createElement('div');
      dayHeader.textContent = day;
      dayHeader.style.cssText = `
        text-align: center;
        font-weight: 600;
        color: #666;
        padding: 8px 4px;
        font-size: 14px;
      `;
      calendarGrid.appendChild(dayHeader);
    });
    
    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    let firstDayOfWeek = firstDay.getDay();
    firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
    
    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < firstDayOfWeek; i++) {
      const emptyCell = document.createElement('div');
      emptyCell.style.cssText = `
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
      `;
      calendarGrid.appendChild(emptyCell);
    }
    
    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
      const dayCell = document.createElement('div');
      dayCell.className = 'calendar-day future-date-picker-calendar-day';
      dayCell.textContent = day;
      dayCell.style.cssText = `
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border-radius: 6px;
        font-size: 14px;
        transition: all 0.2s;
      `;
      
      const cellDate = new Date(year, month, day);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–π
      if (cellDate <= today) {
        dayCell.style.color = '#ccc';
        dayCell.style.cursor = 'not-allowed';
      } else if (cellDate.getTime() === today.getTime()) {
        dayCell.style.background = '#4aa3ff';
        dayCell.style.color = 'white';
        dayCell.style.fontWeight = 'bold';
      } else {
        dayCell.style.color = '#333';
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
      if (cellDate > today) {
        dayCell.addEventListener('click', () => {
          // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
          calendarGrid.querySelectorAll('.calendar-day').forEach(cell => {
            if (cell.style.background === '#28a745') {
              cell.style.background = '';
              cell.style.color = '#333';
            }
          });
          
          // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
          dayCell.style.background = '#28a745';
          dayCell.style.color = 'white';
          selectedDate = cellDate;
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
          setTimeout(() => {
            console.log('–í—ã–±–∏—Ä–∞–µ–º –±—É–¥—É—â—É—é –¥–∞—Ç—É:', selectedDate);
            try {
              switchToDate(selectedDate);
              console.log('–ë—É–¥—É—â–∞—è –¥–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –±—É–¥—É—â–µ–π –¥–∞—Ç—ã:', error);
            }
            modal.remove();
          }, 200);
        });
        
        dayCell.addEventListener('mouseenter', () => {
          if (dayCell.style.background !== '#28a745') {
            dayCell.style.background = '#f0f0f0';
          }
        });
        
        dayCell.addEventListener('mouseleave', () => {
          if (dayCell.style.background === '#f0f0f0') {
            dayCell.style.background = '';
          }
        });
      }
      
      calendarGrid.appendChild(dayCell);
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
  function getMonthName(month) {
    const months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                   '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
    return months[month];
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  prevBtn.addEventListener('click', () => {
    if (!prevBtn.disabled) {
      const prevMonth = new Date(currentDate);
      prevMonth.setMonth(prevMonth.getMonth() - 1);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–∞–º
      if (prevMonth.getMonth() >= today.getMonth() && prevMonth.getFullYear() >= today.getFullYear()) {
        currentDate.setMonth(currentDate.getMonth() - 1);
        updateCalendar();
      }
    }
  });
  
  nextBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    updateCalendar();
  });
  
  closeBtn.addEventListener('click', () => {
    modal.remove();
  });
  
  cancelBtn.addEventListener('click', () => {
    modal.remove();
  });
  
  todayBtn.addEventListener('click', () => {
    selectedDate = new Date();
    switchToDate(selectedDate);
    modal.remove();
  });
  
  // –ö–ª–∏–∫ –≤–Ω–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  updateCalendar();
}

// –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function addCurrentTimeIndicator() {
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  const existingIndicator = document.querySelector('.current-time-indicator');
  if (existingIndicator) {
    existingIndicator.remove();
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (–≤—ã–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  const moscowTime = getMoscowTime();
  const currentHour = moscowTime.getHours();
  const currentMinute = moscowTime.getMinutes();
  const currentMinutes = currentHour * 60 + currentMinute;
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é –ø–æ–ª–æ—Å–∫—É, –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 22:00
  if (currentHour >= 22) {
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –¥–∞—Ç–∞ - —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
  const moscowToday = new Date(moscowTime);
  moscowToday.setHours(0, 0, 0, 0);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤–º–µ—Å—Ç–æ UTC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const activeDate = new Date(currentDisplayDate);
  activeDate.setHours(0, 0, 0, 0);
  
  // console.log('DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):', {
  //   moscowToday: moscowToday.toLocaleDateString(),
  //   activeDate: activeDate.toLocaleDateString(),
  //   currentDisplayDate: currentDisplayDate.toLocaleDateString(),
  //   isToday: moscowToday.toDateString() === activeDate.toDateString()
  // });
  
  if (moscowToday.toDateString() !== activeDate.toDateString()) {
    return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –¥–∞—Ç—É (–∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è)
  const slots = Array.from(allSlotsEl.querySelectorAll('li.slot'));
  const activeDateSlots = slots.filter(slot => {
    const slotDate = slot.dataset.date;
    const year = currentDisplayDate.getFullYear();
    const month = String(currentDisplayDate.getMonth() + 1).padStart(2, '0');
    const day = String(currentDisplayDate.getDate()).padStart(2, '0');
    const activeDateStr = `${year}-${month}-${day}`;
    return slotDate === activeDateStr;
  });
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Å–ª–æ—Ç—ã
  const visibleSlots = activeDateSlots.filter(slot => {
    const computedStyle = window.getComputedStyle(slot);
    return computedStyle.display !== 'none' && computedStyle.visibility !== 'hidden';
  });
  
  // console.log('DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –¥–∞—Ç—É:', activeDateSlots.length);
  // console.log('DEBUG: –í–∏–¥–∏–º—ã—Ö —Å–ª–æ—Ç–æ–≤:', visibleSlots.length);
  // console.log('DEBUG: –í—Å–µ —Å–ª–æ—Ç—ã:', activeDateSlots.map(s => s.dataset.start + '-' + s.dataset.end));
  // console.log('DEBUG: –í–∏–¥–∏–º—ã–µ —Å–ª–æ—Ç—ã:', visibleSlots.map(s => s.dataset.start + '-' + s.dataset.end));
  
  // console.log('DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –¥–∞—Ç—É:', activeDateSlots.length);
  // console.log('DEBUG: –°–ª–æ—Ç—ã:', activeDateSlots.map(slot => ({
  //   date: slot.dataset.date,
  //   start: slot.dataset.start,
  //   end: slot.dataset.end,
  //   isEventSlot: slot.classList.contains('event-slot'),
  //   subject: slot.textContent || '–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è'
  // })));
  
  if (activeDateSlots.length === 0) return;
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
  let targetSlot = null;
  let insertAfter = null;
  
  for (let i = 0; i < visibleSlots.length; i++) {
    const slot = visibleSlots[i];
    const slotStart = slot.dataset.start;
    const slotEnd = slot.dataset.end;
    
    const [startHour, startMinute] = slotStart.split(':').map(Number);
    const [endHour, endMinute] = slotEnd.split(':').map(Number);
    
    const slotStartMinutes = startHour * 60 + startMinute;
    const slotEndMinutes = endHour * 60 + endMinute;
    
    // console.log('DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç:', {
    //   slot: `${slotStart}-${slotEnd}`,
    //   slotStartMinutes,
    //   slotEndMinutes,
    //   currentMinutes,
    //   isOccupied: slot.classList.contains('event-slot'),
    //   isInSlot: currentMinutes >= slotStartMinutes && currentMinutes < slotEndMinutes,
    //   slotStartParsed: `${startHour}:${startMinute}`,
    //   slotEndParsed: `${endHour}:${endMinute}`,
    //   currentTimeParsed: `${String(currentHour).padStart(2, '0')}:${String(currentMinute).padStart(2, '0')}`
    // });
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç
    if (currentMinutes >= slotStartMinutes && currentMinutes < slotEndMinutes) {
      // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã (—Å–æ–±—ã—Ç–∏—è) –Ω–∞–¥ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏
      if (slot.classList.contains('event-slot')) {
        targetSlot = slot;
        console.log('üéØ –í—ã–±—Ä–∞–Ω –∑–∞–Ω—è—Ç—ã–π —Å–ª–æ—Ç (—Å–æ–±—ã—Ç–∏–µ):', slot.dataset.start + '-' + slot.dataset.end);
        break;
      } else if (!targetSlot) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –∏ –º—ã –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–Ω—è—Ç—ã–π
        targetSlot = slot;
        console.log('üìÖ –í—ã–±—Ä–∞–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç:', slot.dataset.start + '-' + slot.dataset.end);
      }
    }
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
    if (currentMinutes < slotStartMinutes) {
      insertAfter = slot;
      break;
    }
  }
  
  // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
  if (!targetSlot && !insertAfter) {
    console.log('DEBUG: –¢–æ—á–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏');
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    let closestSlot = null;
    let minDistance = Infinity;
    
    for (const slot of visibleSlots) {
      const slotStart = slot.dataset.start;
      const [startHour, startMinute] = slotStart.split(':').map(Number);
      const slotStartMinutes = startHour * 60 + startMinute;
      const distance = Math.abs(currentMinutes - slotStartMinutes);
      
      if (distance < minDistance) {
        minDistance = distance;
        closestSlot = slot;
      }
    }
    
    if (closestSlot) {
      console.log('DEBUG: –ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç:', closestSlot.dataset.start + '-' + closestSlot.dataset.end);
      targetSlot = closestSlot;
    }
  }
  
  console.log('DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–∞:', {
    targetSlot: targetSlot ? `${targetSlot.dataset.start}-${targetSlot.dataset.end}` : 'null',
    insertAfter: insertAfter ? `${insertAfter.dataset.start}-${insertAfter.dataset.end}` : 'null',
    currentMinutes,
    totalSlots: activeDateSlots.length,
    targetSlotSubject: targetSlot ? (targetSlot.textContent || '–ù–µ—Ç —Å–æ–±—ã—Ç–∏—è') : 'null'
  });
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  const indicator = document.createElement('div');
  indicator.className = 'current-time-indicator';
  indicator.style.cssText = `
    position: absolute;
    left: 0;
    right: 0;
    height: 2px;
    background: #ff4444;
    z-index: 1000;
    pointer-events: none;
    box-shadow: 0 0 4px rgba(255, 68, 68, 0.5);
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É
  const timeLabel = document.createElement('span');
  const currentTimeStr = `${String(currentHour).padStart(2, '0')}:${String(currentMinute).padStart(2, '0')}`;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
  let displayText = currentTimeStr;
  let hoverTitle = '';
  
  console.log('DEBUG: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞:', {
    targetSlot: targetSlot ? `${targetSlot.dataset.start}-${targetSlot.dataset.end}` : 'null',
    currentTimeStr,
    isInOccupiedSlot: targetSlot ? targetSlot.classList.contains('event-slot') : false
  });
  
  if (targetSlot && targetSlot.classList.contains('event-slot')) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∑–∞–Ω—è—Ç—ã–π —Å–ª–æ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
    displayText = currentTimeStr;
    hoverTitle = '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è';
    console.log('DEBUG: –í –∑–∞–Ω—è—Ç–æ–º —Å–ª–æ—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è:', displayText);
  } else if (targetSlot) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    // console.log('DEBUG: –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞...');
    const nextEvent = findNextEvent(activeDateSlots, currentHour, currentMinute);
    // console.log('DEBUG: –ù–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:', nextEvent ? `${nextEvent.dataset.start}-${nextEvent.dataset.end}` : 'null');
    
    if (nextEvent) {
      const timeToNextData = calculateTimeToNextEvent(nextEvent, currentHour, currentMinute);
      console.log('DEBUG: –î–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è:', timeToNextData);
      
      if (timeToNextData) {
        displayText = timeToNextData.shortText;
        hoverTitle = timeToNextData.fullEventName;
        console.log('DEBUG: –í —Å–≤–æ–±–æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è:', displayText);
      } else {
        displayText = currentTimeStr;
        hoverTitle = '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è';
        console.log('DEBUG: –í —Å–≤–æ–±–æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–±—ã—Ç–∏–∏');
      }
    } else {
      displayText = currentTimeStr;
      hoverTitle = '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è';
      console.log('DEBUG: –í —Å–≤–æ–±–æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ - –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
  console.log('DEBUG: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞:', displayText);
  console.log('DEBUG: Hover title:', hoverTitle);
  
  timeLabel.textContent = displayText;
  timeLabel.title = hoverTitle;
  console.log('DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω title –∞—Ç—Ä–∏–±—É—Ç:', timeLabel.title);
  timeLabel.style.cssText = `
    position: absolute;
    right: 8px;
    top: -8px;
    background: #ff4444;
    color: white;
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.7em;
    font-weight: bold;
  `;
  indicator.appendChild(timeLabel);
  
  if (targetSlot) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ—Ç–∞
    const slotStart = targetSlot.dataset.start;
    const slotEnd = targetSlot.dataset.end;
    const [startHour, startMinute] = slotStart.split(':').map(Number);
    const [endHour, endMinute] = slotEnd.split(':').map(Number);
    
    const slotStartMinutes = startHour * 60 + startMinute;
    const slotEndMinutes = endHour * 60 + endMinute;
    const currentMinutes = currentHour * 60 + currentMinute;
    
    // –ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const elapsedMinutes = currentMinutes - slotStartMinutes;
    const totalMinutes = slotEndMinutes - slotStartMinutes;
    const progress = totalMinutes > 0 ? elapsedMinutes / totalMinutes : 0;
    
    console.log('üîç –ü–†–û–°–¢–û–ï –í–´–ß–ò–°–õ–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê:', {
      slot: `${slotStart}-${slotEnd}`,
      currentTime: `${String(currentHour).padStart(2, '0')}:${String(currentMinute).padStart(2, '0')}`,
      slotStartMinutes,
      slotEndMinutes,
      currentMinutes,
      elapsedMinutes,
      totalMinutes,
      progress: Math.round(progress * 100) + '%',
      progressDecimal: progress
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    if (progress < 0 || progress > 1) {
      console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!', {
        progress,
        elapsedMinutes,
        totalMinutes,
        currentMinutes,
        slotStartMinutes,
        slotEndMinutes
      });
      return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }
    
    const slotHeight = targetSlot.offsetHeight;
    const slotTop = targetSlot.offsetTop;
    const indicatorTop = slotTop + (progress * slotHeight);
    
    console.log('DEBUG: –¢–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ—Ç–µ:', {
      targetSlot: targetSlot.dataset.start + '-' + targetSlot.dataset.end,
      currentMinutes,
      slotStartMinutes,
      slotEndMinutes,
      progress: Math.round(progress * 100) + '%',
      slotHeight,
      indicatorTop,
      currentTime: `${String(currentHour).padStart(2, '0')}:${String(currentMinute).padStart(2, '0')}`,
      slotDuration: slotEndMinutes - slotStartMinutes,
      elapsedMinutes: currentMinutes - slotStartMinutes
    });
    
    indicator.style.top = `${indicatorTop}px`;
    indicator.style.position = 'absolute';
    allSlotsEl.appendChild(indicator);
    
    console.log('‚úÖ –ò–ù–î–ò–ö–ê–¢–û–† –î–û–ë–ê–í–õ–ï–ù:', {
      targetSlot: `${targetSlot.dataset.start}-${targetSlot.dataset.end}`,
      indicatorTop: `${indicatorTop}px`,
      slotHeight: slotHeight,
      progress: Math.round(progress * 100) + '%',
      currentTime: currentTimeStr
    });
  } else if (insertAfter) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –±—É–¥—É—â–∏–º —Å–ª–æ—Ç–æ–º
    console.log('DEBUG: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ —Å–ª–æ—Ç–æ–º:', insertAfter.dataset.start + '-' + insertAfter.dataset.end);
    insertAfter.parentNode.insertBefore(indicator, insertAfter);
    indicator.style.position = 'relative';
    indicator.style.marginBottom = '2px';
  } else {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
    console.log('DEBUG: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ü–µ');
    allSlotsEl.appendChild(indicator);
    indicator.style.position = 'relative';
    indicator.style.marginTop = '2px';
  }
}

// –°–∫—Ä—ã—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
function hideOccupiedSlots() {
  const slots = Array.from(allSlotsEl.querySelectorAll('li.slot'));
  
  slots.forEach(slot => {
    const slotDate = slot.dataset.date;
    const slotStart = slot.dataset.start;
    const slotEnd = slot.dataset.end;
    
    // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–æ–±—ã—Ç–∏—è
    if (slot.classList.contains('event-slot')) {
      slot.style.display = '';
      slot.classList.remove('occupied-slot');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç —Å–æ–±—ã—Ç–∏–µ–º (–≤–∫–ª—é—á–∞—è –±—É–¥—É—â–∏–µ)
    const isOccupied = isSlotOccupied(slotDate, slotStart, slotEnd);
    
    if (isOccupied) {
      slot.style.display = 'none';
      slot.classList.add('occupied-slot');
    } else {
      slot.style.display = '';
      slot.classList.remove('occupied-slot');
    }
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
  mockEvents.forEach(event => {
    const eventStart = createMoscowDate(event.start);
    const eventEnd = createMoscowDate(event.end);
    const eventDate = eventStart.toISOString().slice(0, 10);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    const eventSlots = Array.from(allSlotsEl.querySelectorAll('li')).filter(slot => {
      const slotDate = slot.dataset.date;
      if (slotDate !== eventDate) return false;
      
      const [y, mo, d] = slotDate.split('-').map(Number);
      const [sh, sm] = slot.dataset.start.split(':').map(Number);
      const [eh, em] = slot.dataset.end.split(':').map(Number);
      
      const slotStart = new Date(y, mo-1, d, sh, sm, 0, 0);
      const slotEnd = new Date(y, mo-1, d, eh, em, 0, 0);
      
      return (slotEnd > eventStart && slotStart < eventEnd);
    });
    
    if (eventSlots.length > 0) {
      const firstSlot = eventSlots[0];
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ª–æ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
      firstSlot.style.display = '';
      firstSlot.classList.remove('occupied-slot');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const durationMinutes = (eventEnd - eventStart) / (1000 * 60);
      
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      firstSlot.classList.remove('event-duration-15min', 'event-duration-30min', 'event-duration-45min', 'event-duration-60min', 'event-duration-long');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
      if (durationMinutes <= 15) {
        firstSlot.classList.add('event-duration-15min');
      } else if (durationMinutes <= 30) {
        firstSlot.classList.add('event-duration-30min');
      } else if (durationMinutes <= 45) {
        firstSlot.classList.add('event-duration-45min');
      } else if (durationMinutes <= 60) {
        firstSlot.classList.add('event-duration-60min');
      } else {
        firstSlot.classList.add('event-duration-long');
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
function getTimeSinceMeetingStart() {
  if (!meetingStartTime) return '';
  const now = getMoscowTime();
  const diff = now - meetingStartTime; // –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  const totalMinutes = Math.floor(diff / 60000);
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  
  // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å 00:00 –º–∏–Ω—É—Ç, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ 13:30, –∞ –ø—Ä–æ—à–ª–æ 15 –º–∏–Ω—É—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 00:15
  if (hours > 0) {
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
  } else {
    return `00:${String(minutes).padStart(2, '0')}`;
  }
}

// =======================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏—è–º–∏
// =======================
function toggleSection(sectionId) {
  const section = document.getElementById(sectionId);
  const toggle = section.previousElementSibling.querySelector('.section-toggle');
  
  if (section.classList.contains('collapsed')) {
    section.classList.remove('collapsed');
    toggle.classList.remove('collapsed');
  } else {
    section.classList.add('collapsed');
    toggle.classList.add('collapsed');
  }
}

// =======================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è OpenQuestions
// =======================
function showOpenQuestionsModal() {
  const modal = document.createElement('div');
  modal.className = 'openquestions-modal';
  modal.innerHTML = `
    <div class="openquestions-modal-content" style="padding: 30px;">
      <h3>Open Questions</h3>
      <div id="openquestions-content"></div>
      <div class="openquestions-modal-buttons">
        <button class="openquestions-modal-btn secondary" onclick="closeOpenQuestionsModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  collectOpenQuestionsData();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeOpenQuestionsModal();
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
function extractTagsFromText(text, availableStreams) {
  if (!text || typeof text !== 'string') return [];
  
  const tags = [];
  const tagRegex = /#(\w+)/g;
  let match;
  
  while ((match = tagRegex.exec(text)) !== null) {
    const tagName = match[1];
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ API streams
    if (availableStreams && availableStreams.includes(tagName)) {
      tags.push(tagName);
    }
  }
  
  return tags;
}

async function collectOpenQuestionsData() {
  console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ OPEN QUESTIONS: SUMMARY...');
  const contentEl = document.getElementById('openquestions-content');
  if (!contentEl) {
    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç openquestions-content –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ streams –∏–∑ API
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ streams –∏–∑ API...');
    const streamsResponse = await fetch('/api/streams/stats');
    console.log('üì° Streams response status:', streamsResponse.status);
    const streamsData = streamsResponse.ok ? await streamsResponse.json() : { streams: [] };
    const allStreams = streamsData.streams || [];
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ streams –¥–ª—è –º–æ–¥–∞–ª–∫–∏:', allStreams.length, '—à—Ç:', allStreams);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ API
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ API...');
    const eventsResponse = await fetch('/api/events');
    console.log('üì° Events response status:', eventsResponse.status);
    const events = eventsResponse.ok ? await eventsResponse.json() : [];
    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π:', events.length);
    
    const openQuestions = [];
    const notesQuestions = [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º Open Questions –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º Open Questions –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const questionsResponse = await fetch('/api/open-questions');
    console.log('üì° Questions response status:', questionsResponse.status);
    let dbQuestions = [];
    if (questionsResponse.ok) {
      dbQuestions = await questionsResponse.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î:', dbQuestions.length);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î:', questionsResponse.status);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const addedQuestionIds = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ ID
    console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dbQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    dbQuestions.forEach(question => {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î: ID=${question.id}, —Ç–µ–∫—Å—Ç="${question.question_text}", stream="${question.stream}", person="${question.person}"`);
      console.log(`üîç –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞:`, question);
      console.log(`üîç –¢–∏–ø question.question_text: ${typeof question.question_text}, –∑–Ω–∞—á–µ–Ω–∏–µ: "${question.question_text}"`);
      if (question.question_text && question.question_text.trim()) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º stream (topic) –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º "General" –∫–∞–∫ fallback
        console.log(`üîç DEBUG: question.stream = "${question.stream}", question.topic = "${question.topic}"`);
        const stream = question.stream && question.stream.trim() && question.stream !== 'None' ? question.stream.trim() : 
                      (question.topic && question.topic.trim() && question.topic !== 'None' ? question.topic.trim() : 'General');
        console.log(`üîç DEBUG: final stream = "${stream}"`);
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ event_id
        let eventName = '–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
        if (question.event_id) {
          const event = events.find(e => e.id === question.event_id);
          if (event && event.subject) {
            eventName = event.subject;
          }
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        const event = events.find(e => e.id === question.event_id);
        const eventCreatedDate = event ? event.created_at : null;
        
        const questionData = {
          id: question.id,
          question: question.question_text.trim(),
          question_text: question.question_text.trim(), // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
          event: eventName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤–º–µ—Å—Ç–æ "–ò–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
          eventId: question.event_id,
          event_id: question.event_id, // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
          date: eventCreatedDate ? new Date(eventCreatedDate).toLocaleDateString('ru-RU') : (question.created_at ? new Date(question.created_at).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'),
          eventStart: eventCreatedDate || question.created_at,
          time: question.time,
          person: question.person,
          stream: stream,
          type: 'database',
          is_resolved: question.is_resolved || false,
          resolved_at: question.resolved_at,
          important: question.important || false,
          asap: question.asap || false
        };
        
        console.log(`üîç –°–æ–∑–¥–∞–Ω questionData:`, questionData);
        console.log(`üîç questionData.question: "${questionData.question}", questionData.person: "${questionData.person}"`);
        notesQuestions.push(questionData);
        addedQuestionIds.add(question.id); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π ID
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î:`, questionData);
      } else {
        console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`);
      }
    });
    console.log(`üìä –ò—Ç–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –ë–î: ${addedQuestionIds.size} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∑–∞–º–µ—Ç–æ–∫ - —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ API –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ASAP/IMP');
    
    events.forEach(event => {
        
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º actual_open_questions - —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º actual_open_questions –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${event.subject}" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
        
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ open_questions - —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        // –û–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ event.open_questions –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${event.subject}" - –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏`);
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º streams
    console.log('üìä –°–æ–±—Ä–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', openQuestions.length, '–∏–∑ actual_open_questions (–∏—Å–∫–ª—é—á–µ–Ω—ã)');
    console.log('üìä –°–æ–±—Ä–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', notesQuestions.length, '–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (open_questions)');
    
    // –î–æ–±–∞–≤–ª—è–µ–º "General" –≤ streams –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!allStreams.includes('General')) {
      allStreams.push('General');
    }
    
    console.log('üìä –í—Å–µ–≥–æ streams –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', allStreams.length);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º streams –∏–∑ API —Å streams –∏–∑ —Å–æ–±—ã—Ç–∏–π
    const eventStreams = new Set();
    events.forEach(event => {
      if (event.stream && Array.isArray(event.stream)) {
        event.stream.forEach(stream => {
          if (stream && stream.trim()) {
            eventStreams.add(stream.trim());
          }
        });
      }
    });
    
    const eventStreamsArray = Array.from(eventStreams);
    console.log('üìä Streams –∏–∑ —Å–æ–±—ã—Ç–∏–π:', eventStreamsArray.length, '—à—Ç:', eventStreamsArray);
    console.log('üìä Streams –∏–∑ API:', allStreams.length, '—à—Ç:', allStreams);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ streams –∏–∑ —Å–æ–±—ã—Ç–∏–π –µ—Å—Ç—å –≤ API
    const missingInAPI = eventStreamsArray.filter(stream => !allStreams.includes(stream));
    if (missingInAPI.length > 0) {
      console.warn('‚ö†Ô∏è Streams –∏–∑ —Å–æ–±—ã—Ç–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ API:', missingInAPI);
    } else {
      console.log('‚úÖ –í—Å–µ streams –∏–∑ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ API');
    }
    
    displayOpenQuestionsData(allStreams, openQuestions, notesQuestions, events);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    console.error('‚ùå Stack trace:', err.stack);
    contentEl.innerHTML = `<div class="openquestions-empty">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: ${err.message}</div>`;
  }
}

function displayOpenQuestionsData(streams, openQuestions, notesQuestions, events = []) {
  console.log('üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∞–ª–∫–∏ OPEN QUESTIONS: SUMMARY...');
  console.log('üìã Streams –¥–ª—è –æ–±–ª–∞–∫–∞ —Ç–µ–≥–æ–≤:', streams);
  console.log('üìã Events –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤:', events.length);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º streams –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ (—Å–∞–º—ã–µ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–µ—Ä–≤—ã–º–∏)
  window.sortedStreams = streams
    .filter(s => s.name && s.name.trim())
    .sort((a, b) => {
      // –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –µ—Å—Ç—å last_searched_at, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      if (a.last_searched_at && b.last_searched_at) {
        return new Date(b.last_searched_at) - new Date(a.last_searched_at);
      }
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —É –æ–¥–Ω–æ–≥–æ –µ—Å—Ç—å last_searched_at, –æ–Ω –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      if (a.last_searched_at && !b.last_searched_at) return -1;
      if (!a.last_searched_at && b.last_searched_at) return 1;
      // –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –Ω–µ—Ç last_searched_at, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
      return a.name.localeCompare(b.name);
    });
  
  allStreamsData = window.sortedStreams.map(s => s.name); // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  allStreamsMap = {}; // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫ ID
  window.sortedStreams.forEach(s => {
    allStreamsMap[s.name] = s.id;
  });
  
  console.log('üîç DEBUG: allStreamsMap —Å–æ–∑–¥–∞–Ω:', allStreamsMap);
  console.log('üîç DEBUG: allStreamsData —Å–æ–∑–¥–∞–Ω:', allStreamsData);
  allOpenQuestionsData = openQuestions;
  allNotesQuestionsData = notesQuestions;
  allEventsData = events; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
  
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  renderOpenQuestionsModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
function renderOpenQuestionsModal() {
  console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞...');
  const contentEl = document.getElementById('openquestions-content');
  if (!contentEl) {
    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç openquestions-content –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ renderOpenQuestionsModal!');
    return;
  }
  
  let html = '';
  
  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
  const allQuestions = [];
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –¥–∞–Ω–Ω—ã–º
  let filteredOpenQuestions = allOpenQuestionsData;
  let filteredNotesQuestions = allNotesQuestionsData;
  
  if (currentStreamFilter) {
    console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ Stream:', currentStreamFilter);
    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Actual open questions
    filteredOpenQuestions = allOpenQuestionsData.filter(q => {
      return q.stream === currentStreamFilter;
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∑–∞–º–µ—Ç–æ–∫
    filteredNotesQuestions = allNotesQuestionsData.filter(q => {
      return q.stream === currentStreamFilter;
    });
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ Actual open questions
  filteredOpenQuestions.forEach(q => {
    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ event.start, –ø–æ—Ç–æ–º event.start_time
    let eventDate;
    if (q.eventStart && !isNaN(new Date(q.eventStart).getTime())) {
      eventDate = new Date(q.eventStart);
    } else if (q.date && !isNaN(new Date(q.date).getTime())) {
      eventDate = new Date(q.date);
    } else {
      eventDate = null;
    }
    
    const date = eventDate ? eventDate.toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    allQuestions.push({
      type: 'actual',
      stream: q.stream || q.event, // –ò—Å–ø–æ–ª—å–∑—É–µ–º stream –∏–∑ –¥–∞–Ω–Ω—ã—Ö, fallback –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
      meeting: q.event, // –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
      eventId: q.eventId, // ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
      question: q.text,
      date: date,
      resolved: false,
      id: null,
      important: false, // Actual questions –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç important/asap
      asap: false
    });
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –∑–∞–º–µ—Ç–æ–∫
  filteredNotesQuestions.forEach(q => {
    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ event.start, –ø–æ—Ç–æ–º event.start_time
    let eventDate;
    if (q.eventStart && !isNaN(new Date(q.eventStart).getTime())) {
      eventDate = new Date(q.eventStart);
    } else if (q.date && !isNaN(new Date(q.date).getTime())) {
      eventDate = new Date(q.date);
    } else {
      eventDate = null;
    }
    
    const date = eventDate ? eventDate.toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º metadata, —Ç–∞–∫ –∫–∞–∫ person –∏ topic —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    let questionText = q.question;
    if (q.type === 'database') {
      // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è person
      questionText = q.question;
    } else {
      // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º metadata
      let metadata = '';
      if (q.time) metadata += `[${q.time}] `;
      if (q.person) metadata += `${q.person} `;
      questionText = `${metadata}${q.question}`;
    }
    
    allQuestions.push({
      type: q.type || 'notes', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∏–∑ –¥–∞–Ω–Ω—ã—Ö
      stream: q.stream || q.event, // –ò—Å–ø–æ–ª—å–∑—É–µ–º stream –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, fallback –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
      meeting: q.event, // –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
      eventId: q.eventId, // ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
      question: questionText,
      date: date,
      resolved: q.is_resolved || false,
      resolved_at: q.resolved_at,
      id: q.id,
      important: q.important || false,
      asap: q.asap || false,
      person: q.person // –î–æ–±–∞–≤–ª—è–µ–º person –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ "–ö—Ç–æ"
    });
  });
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –∏ —Ä–µ—à–µ–Ω–Ω—ã–µ
  const unresolvedQuestions = allQuestions.filter(q => !q.resolved);
  const resolvedQuestions = allQuestions.filter(q => q.resolved);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∞—Ç–µ —Ä–µ—à–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
  resolvedQuestions.sort((a, b) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º resolved_at –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ created_at
    const dateA = a.resolved_at ? new Date(a.resolved_at) : new Date(a.date.split('.').reverse().join('-'));
    const dateB = b.resolved_at ? new Date(b.resolved_at) : new Date(b.date.split('.').reverse().join('-'));
    return dateB - dateA; // –ù–æ–≤—ã–µ –¥–∞—Ç—ã —Å–Ω–∞—á–∞–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:
  // 1. –û–±–∞ —Ñ–ª–∞–≥–∞ (Important + ASAP)
  // 2. –¢–æ–ª—å–∫–æ ASAP
  // 3. –¢–æ–ª—å–∫–æ Important
  // 4. –ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
  unresolvedQuestions.sort((a, b) => {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –û–±–∞ —Ñ–ª–∞–≥–∞ (Important + ASAP)
    const aBothFlags = a.important && a.asap;
    const bBothFlags = b.important && b.asap;
    if (aBothFlags && !bBothFlags) return -1;
    if (!aBothFlags && bBothFlags) return 1;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –¢–æ–ª—å–∫–æ ASAP
    const aAsapOnly = a.asap && !a.important;
    const bAsapOnly = b.asap && !b.important;
    if (aAsapOnly && !bAsapOnly) return -1;
    if (!aAsapOnly && bAsapOnly) return 1;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¢–æ–ª—å–∫–æ Important
    const aImportantOnly = a.important && !a.asap;
    const bImportantOnly = b.important && !b.asap;
    if (aImportantOnly && !bImportantOnly) return -1;
    if (!aImportantOnly && bImportantOnly) return 1;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    return new Date(a.date.split('.').reverse().join('-')) - new Date(b.date.split('.').reverse().join('-'));
  });
  
  // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ streams –∏–∑ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const usedStreams = [...new Set(allQuestions.map(q => q.stream).filter(Boolean))];
  
  // –°–µ–∫—Ü–∏—è Streams - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  html += '<div class="openquestions-section">';
  html += '<h4>Streams: summary</h4>';
  if (allStreamsData && allStreamsData.length > 0) {
    console.log('üè∑Ô∏è –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞–∫–æ —Ç–µ–≥–æ–≤ streams:', allStreamsData);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–≥–∏ –∏–∑ —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–º–µ—Ç–æ–∫
    const usedStreams = new Set();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ —Å–æ–±—ã—Ç–∏–π
    if (allEventsData && allEventsData.length > 0) {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ —Å–æ–±—ã—Ç–∏—è—Ö:', allEventsData.length);
      allEventsData.forEach(event => {
        if (event.stream && Array.isArray(event.stream)) {
          event.stream.forEach(stream => {
            if (stream && stream.trim()) {
              usedStreams.add(stream.trim());
              console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–µ–≥ –≤ —Å–æ–±—ã—Ç–∏–∏:', stream.trim(), '–≤ —Å–æ–±—ã—Ç–∏–∏:', event.subject);
            }
          });
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ (–∏–∑ actual_open_questions)
    if (allEventsData && allEventsData.length > 0) {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ actual_open_questions');
      allEventsData.forEach(event => {
        if (event.actual_open_questions && event.actual_open_questions.trim()) {
          const extractedTags = extractTagsFromText(event.actual_open_questions, allStreamsData);
          extractedTags.forEach(tag => {
            usedStreams.add(tag);
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–µ–≥ –≤ actual_open_questions:', tag, '–≤ —Å–æ–±—ã—Ç–∏–∏:', event.subject);
          });
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ASAP/IMP
    allNotesQuestionsData.forEach(question => {
      if (question.extractedTags && Array.isArray(question.extractedTags)) {
        question.extractedTags.forEach(tag => {
          usedStreams.add(tag);
        });
      }
      if (question.stream) {
        usedStreams.add(question.stream);
      }
    });
    
    console.log('üè∑Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–≥–∏:', Array.from(usedStreams));
    console.log('üè∑Ô∏è –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', allStreamsData.length);
    
    html += '<div class="streams-tags">';
    (window.sortedStreams || []).forEach(stream => {
      console.log('üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º stream –≤ –æ–±–ª–∞–∫–æ —Ç–µ–≥–æ–≤:', stream.name);
      const isActive = currentStreamFilter === stream.name;
      const activeClass = isActive ? ' active' : '';
      const isUsed = usedStreams.has(stream.name);
      const unusedClass = !isUsed ? ' unused-tag' : '';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤)
      let staleClass = '';
      if (stream.last_searched_at) {
        const lastSearchDate = new Date(stream.last_searched_at);
        const now = new Date();
        const diffMs = now - lastSearchDate;
        const diffHours = diffMs / (1000 * 60 * 60);
        
        if (diffHours > 12) {
          staleClass = ' stale-tag';
        }
      } else {
        // –ï—Å–ª–∏ —Ç–µ–≥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–∫–∞–ª—Å—è, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
        staleClass = ' stale-tag';
      }
      
      console.log(`üè∑Ô∏è –¢–µ–≥ "${stream.name}": –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è=${isUsed}, –∫–ª–∞—Å—Å=${unusedClass}, —É—Å—Ç–∞—Ä–µ–≤—à–∏–π=${staleClass !== ''}`);
      const title = isActive ? '–ö–ª–∏–∫: —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä, –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫: –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏' : 
                   !isUsed ? '–¢–µ–≥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ –∏–ª–∏ –∑–∞–º–µ—Ç–∫–µ' :
                   staleClass ? '–¢–µ–≥ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤' :
                   '–ö–ª–∏–∫: –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫: –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏';
      html += `<span class="stream-tag clickable${activeClass}${unusedClass}${staleClass}" onclick="handleStreamTagClick('${stream.name}')" ondblclick="handleStreamTagDoubleClick('${stream.name}')" oncontextmenu="handleStreamTagRightClick(event, '${stream.name}', ${isUsed})" title="${title}">${stream.name}</span>`;
    });
    html += '</div>';
  } else {
    console.log('‚ö†Ô∏è –ù–µ—Ç streams –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–µ —Ç–µ–≥–æ–≤');
    html += '<div class="openquestions-empty">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Streams</div>';
  }
  html += '</div>';
  // Section for creating new Open Question
  html += '<div class="openquestions-section">';
  html += '<h4>Create open question</h4>';
  html += '<div class="new-question-form" style="background: #f8f9fa; padding: 16px; border-radius: 8px; margin-bottom: 20px;">';
  html += '<div style="display: flex; flex-direction: column; gap: 12px;">';
  
  // Text input for question with checkboxes on the right
  html += '<div style="display: flex; gap: 12px; align-items: flex-start;">';
  html += '<div style="width: 60%;">';
  html += '<textarea id="new-question-text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." style="width: 100%; min-height: 60px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-family: inherit; resize: vertical;"></textarea>';
  html += '</div>';
  
  // Checkboxes on the right
  html += '<div style="display: flex; flex-direction: column; gap: 12px; justify-content: flex-start; margin-top: 24px; margin-left: 30px; width: 120px; flex-shrink: 0;">';
  html += '<label style="display: flex; align-items: center; gap: 6px; cursor: pointer; white-space: nowrap; flex-shrink: 0;">';
  html += '<input type="checkbox" id="new-question-important" style="width: 16px; height: 16px; flex-shrink: 0;">';
  html += '<span style="font-weight: 600; color: #d32f2f;">IMP</span>';
  html += '</label>';
  html += '<label style="display: flex; align-items: center; gap: 6px; cursor: pointer; white-space: nowrap; flex-shrink: 0;">';
  html += '<input type="checkbox" id="new-question-asap" style="width: 16px; height: 16px; flex-shrink: 0;">';
  html += '<span style="font-weight: 600; color: #f57c00;">ASAP</span>';
  html += '</label>';
  html += '</div>';
  html += '</div>';
  
  html += '</div>';
  html += '</div>';
  html += '</div>';

  html += '<div class="openquestions-section">';
  if (currentStreamFilter) {
    html += `<h4>Open questions: ${currentStreamFilter} <span style="color: #666; font-size: 12px; font-weight: normal;">(–∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ —Ç–µ–≥—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞)</span></h4>`;
  } else {
    html += '<h4>Open questions</h4>';
  }
  
  if (unresolvedQuestions.length > 0) {
    html += '<div class="questions-table-container">';
    html += '<table class="questions-table">';
    html += '<thead>';
    html += '<tr>';
    html += '<th></th>'; // –†–µ—à–µ–Ω–æ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)
    html += '<th>–ó–∞–¥–∞—á–∞</th>';
    html += '<th>–ö—Ç–æ</th>';
    html += '<th>Stream</th>';
    html += '<th>–í—Å—Ç—Ä–µ—á–∞</th>';
    html += '<th>ASAP</th>';
    html += '<th>Imp</th>';
    html += '</tr>';
    html += '</thead>';
    html += '<tbody>';
    
    unresolvedQuestions.forEach((q, index) => {
      html += `<tr>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ Checkbox (–†–µ—à–µ–Ω–æ)
      html += `<td class="checkbox-cell">`;
      if (q.id) {
        // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π checkbox
        html += `<input type="checkbox" onchange="resolveQuestion(${q.id})" class="question-checkbox">`;
      } else {
        // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Actual open questions - —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        html += `<span class="question-status-display">‚óã</span>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ –ó–∞–¥–∞—á–∞ (—Å —Ç–µ–∫—Å—Ç–æ–º, –¥–∞—Ç–æ–π –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
      html += `<td class="task-text">`;
      html += `<div class="question-header">`;
      if (q.id && typeof q.id === 'number') {
        console.log(`üîó –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å ID: ${q.id}, —Ç–µ–∫—Å—Ç: "${q.question}"`);
        html += `<div class="question-text clickable-question" data-question-id="${q.id}" title="–ö–ª–∏–∫: –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">${q.question}</div>`;
      } else {
        console.log(`üìù –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å ID: ${q.id}, —Ç–µ–∫—Å—Ç: "${q.question}"`);
        html += `<div class="question-text">${q.question}</div>`;
      }
      html += `</div>`;
      html += `<div class="question-date">${q.date}</div>`;
      
      // –†–∞—Å—à–∏—Ä—è–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      if (q.id && typeof q.id === 'number') {
        console.log(`üì¶ –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è ID: ${q.id}`);
        html += `<div class="comments-expandable" id="comments-expandable-${q.id}" style="display: none;">`;
        html += `<div class="comments-list-inline" id="comments-list-inline-${q.id}"></div>`;
        html += `<div class="add-comment-form-inline">`;
        html += `<textarea class="comment-input-inline" id="comment-input-inline-${q.id}" placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." rows="2"></textarea>`;
        html += `<button class="add-comment-btn-inline" onclick="addCommentInline(${q.id})">–î–æ–±–∞–≤–∏—Ç—å</button>`;
        html += `</div>`;
        html += `</div>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ –ö—Ç–æ
      html += `<td class="person-cell">`;
      if (q.person && q.person.trim() && q.person !== 'None') {
        html += `<span class="person-text">${q.person}</span>`;
      } else {
        html += `<div class="person-input-container">`;
        html += `<input type="text" class="person-input" placeholder="–ö—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å?" data-question-id="${q.id}" />`;
        html += `<div class="person-suggestions" id="person-suggestions-${q.id}"></div>`;
        html += `</div>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ Stream
      html += `<td class="stream-cell">`;
      html += `<div class="stream-input-container">`;
      html += `<input type="text" class="stream-input" value="${q.stream || 'General'}" placeholder="Stream" data-question-id="${q.id}" />`;
      html += `<div class="stream-suggestions" id="stream-suggestions-${q.id}"></div>`;
      html += `</div>`;
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ –í—Å—Ç—Ä–µ—á–∞ (—Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞)
      html += `<td class="meeting-cell">`;
      if (q.eventId) {
        html += `<button class="meeting-link-btn" onclick="goToEventFromQuestion(${q.eventId})" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Å—Ç—Ä–µ—á–µ">`;
        html += `<span class="meeting-link-text">${q.meeting}</span>`;
        html += `</button>`;
      } else {
        html += `<span class="meeting-text">${q.meeting}</span>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ ASAP
      html += `<td class="asap-cell">`;
      if (q.id && typeof q.id === 'number') {
        html += `<input type="checkbox" id="asap-${q.id}" ${q.asap ? 'checked' : ''} onchange="toggleQuestionFlag(${q.id}, 'asap', this.checked)" class="question-flag-checkbox" title="ASAP">`;
      } else {
        html += `<span class="flag-display">${q.asap ? '‚úì' : '‚óã'}</span>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ Imp
      html += `<td class="imp-cell">`;
      if (q.id && typeof q.id === 'number') {
        html += `<input type="checkbox" id="imp-${q.id}" ${q.important ? 'checked' : ''} onchange="toggleQuestionFlag(${q.id}, 'imp', this.checked)" class="question-flag-checkbox" title="Important">`;
      } else {
        html += `<span class="flag-display">${q.important ? '‚úì' : '‚óã'}</span>`;
      }
      html += `</td>`;
      
      html += '</tr>';
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç—É –∂–µ —Ç–∞–±–ª–∏—Ü—É
    resolvedQuestions.forEach((q, index) => {
      html += `<tr class="resolved-question-row">`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ Checkbox (–†–µ—à–µ–Ω–æ)
      html += `<td class="checkbox-cell">`;
      if (q.id) {
        // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π checkbox
        html += `<input type="checkbox" checked onchange="unresolveQuestion(${q.id})" class="question-checkbox">`;
      } else {
        // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Actual open questions - —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        html += `<span class="question-status-display">‚úì</span>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ –ó–∞–¥–∞—á–∞ (—Å —Ç–µ–∫—Å—Ç–æ–º, –¥–∞—Ç–æ–π –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏)
      html += `<td class="task-text">`;
      html += `<div class="question-header">`;
      if (q.id && typeof q.id === 'number') {
        console.log(`üîó –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Ä–µ—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å ID: ${q.id}, —Ç–µ–∫—Å—Ç: "${q.question}"`);
        html += `<div class="question-text clickable-question" data-question-id="${q.id}" title="–ö–ª–∏–∫: –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">${q.question}</div>`;
      } else {
        console.log(`üìù –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å ID: ${q.id}, —Ç–µ–∫—Å—Ç: "${q.question}"`);
        html += `<div class="question-text">${q.question}</div>`;
      }
      html += `</div>`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è
      let dateInfo = `<div class="question-date">${q.date}</div>`;
      if (q.resolved_at) {
        const resolvedDate = new Date(q.resolved_at).toLocaleDateString('ru-RU');
        const resolvedTime = new Date(q.resolved_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        dateInfo += `<div class="question-resolved-date">–†–µ—à–µ–Ω–æ: ${resolvedDate} –≤ ${resolvedTime}</div>`;
      }
      html += dateInfo;
      
      // –†–∞—Å—à–∏—Ä—è–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      if (q.id && typeof q.id === 'number') {
        console.log(`üì¶ –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–Ω–æ–≥–æ ID: ${q.id}`);
        html += `<div class="comments-expandable" id="comments-expandable-${q.id}" style="display: none;">`;
        html += `<div class="comments-list-inline" id="comments-list-inline-${q.id}"></div>`;
        html += `<div class="add-comment-form-inline">`;
        html += `<textarea class="comment-input-inline" id="comment-input-inline-${q.id}" placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." rows="2"></textarea>`;
        html += `<button class="add-comment-btn-inline" onclick="addCommentInline(${q.id})">–î–æ–±–∞–≤–∏—Ç—å</button>`;
        html += `</div>`;
        html += `</div>`;
      }
      
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ –ö—Ç–æ
      html += `<td class="person-cell">`;
      html += `<div class="person-display">${q.person || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>`;
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ Stream
      html += `<td class="stream-cell">`;
      html += `<div class="stream-display">${q.stream || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>`;
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ –í—Å—Ç—Ä–µ—á–∞
      html += `<td class="meeting-cell">`;
      if (q.eventId) {
        html += `<div class="meeting-link" onclick="showEventDetails(${q.eventId})" title="–ö–ª–∏–∫: –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏">${q.meeting}</div>`;
      } else {
        html += `<div class="meeting-display">${q.meeting}</div>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ ASAP
      html += `<td class="asap-cell">`;
      if (q.id && typeof q.id === 'number') {
        html += `<input type="checkbox" id="asap-${q.id}" ${q.asap ? 'checked' : ''} onchange="toggleQuestionFlag(${q.id}, 'asap', this.checked)" class="question-flag-checkbox" title="ASAP">`;
      } else {
        html += `<span class="asap-badge">${q.asap ? 'ASAP' : ''}</span>`;
      }
      html += `</td>`;
      
      // –ö–æ–ª–æ–Ω–∫–∞ Important
      html += `<td class="imp-cell">`;
      if (q.id && typeof q.id === 'number') {
        html += `<input type="checkbox" id="imp-${q.id}" ${q.important ? 'checked' : ''} onchange="toggleQuestionFlag(${q.id}, 'imp', this.checked)" class="question-flag-checkbox" title="Important">`;
      } else {
        html += `<span class="important-badge">${q.important ? 'Imp' : ''}</span>`;
      }
      html += `</td>`;
      
      html += '</tr>';
    });
    
    html += '</tbody>';
    html += '</table>';
    html += '</div>';
  } else {
    html += '<div class="openquestions-empty">–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</div>';
  }
  html += '</div>';
  
  // –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é —Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
  
  // –°–µ–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Å–≤–µ—Ä–Ω—É—Ç–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  html += '<div class="openquestions-section collapsible">';
  html += '<h4 class="collapsible-header" onclick="toggleCollapsible(this)">';
  html += '<span class="collapsible-icon">‚ñº</span>';
  html += 'Open questions history';
  html += '</h4>';
  html += '<div class="collapsible-content collapsed" id="question-history-content">';
  html += '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>';
  html += '</div>';
  html += '</div>';
  
  console.log('‚úÖ –ú–æ–¥–∞–ª–∫–∞ OPEN QUESTIONS: SUMMARY –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é');
  console.log('üìä –ò—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ streams:', allStreamsData ? allStreamsData.length : 0);
  contentEl.innerHTML = html;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ blur –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
  setTimeout(() => {
    const textElement = document.getElementById('new-question-text');
    if (textElement) {
      textElement.addEventListener('blur', () => {
        const text = textElement.value.trim();
        if (text) {
          createNewOpenQuestion();
        }
      });
    }
  }, 100);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  setTimeout(() => {
    const clickableQuestions = contentEl.querySelectorAll('.clickable-question');
    clickableQuestions.forEach(questionEl => {
      const questionId = parseInt(questionEl.dataset.questionId);
      
      if (isNaN(questionId)) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π questionId:', questionEl.dataset.questionId);
        return;
      }
      
      let clickTimeout;
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      questionEl.addEventListener('click', function(e) {
        clearTimeout(clickTimeout);
        clickTimeout = setTimeout(() => {
          console.log(`üñ±Ô∏è –û–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å—É ${questionId}`);
          toggleCommentsInline(questionId);
        }, 200); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞—Ä–Ω–æ–≥–æ –∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      questionEl.addEventListener('dblclick', function(e) {
        e.preventDefault();
        e.stopPropagation();
        clearTimeout(clickTimeout);
        console.log(`üñ±Ô∏èüñ±Ô∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å—É ${questionId} - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!`);
        editQuestion(questionId);
      });
    });
  }, 100);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–ª–µ–π "–ö—Ç–æ" –∏ "Stream"
  setTimeout(() => {
    initializePersonAutocomplete();
    initializeStreamAutocomplete();
  }, 100);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
  loadQuestionHistory();
}

function closeOpenQuestionsModal() {
  const modal = document.querySelector('.openquestions-modal');
  if (modal) {
    modal.remove();
  }
}

function toggleCollapsible(header) {
  const content = header.nextElementSibling;
  const icon = header.querySelector('.collapsible-icon');
  
  if (content.classList.contains('collapsed')) {
    content.classList.remove('collapsed');
    icon.classList.remove('collapsed');
  } else {
    content.classList.add('collapsed');
    icon.classList.add('collapsed');
  }
}

async function loadQuestionHistory() {
  const contentEl = document.getElementById('question-history-content');
  if (!contentEl) return;
  
  try {
    const response = await fetch('/api/question-history');
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
    
    const history = await response.json();
    
    if (history.length === 0) {
      contentEl.innerHTML = '<div class="openquestions-empty">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞</div>';
      return;
    }
    
    let html = '<ul class="question-history-list">';
    history.forEach(item => {
      const date = new Date(item.timestamp).toLocaleString('ru-RU');
      const actionClass = item.action === 'closed' ? 'action-closed' : 
                        item.action === 'reopened' ? 'action-reopened' : 'action-opened';
      
      html += `<li class="history-item ${actionClass}">`;
      html += `<div class="history-header">`;
      html += `<span class="history-action">${item.action_ru}</span>`;
      html += `<span class="history-date">${date}</span>`;
      html += `</div>`;
      html += `<div class="history-question">${item.question_text}</div>`;
      if (item.event_subject) {
        html += `<div class="history-event">–í—Å—Ç—Ä–µ—á–∞: ${item.event_subject}</div>`;
      }
      html += `</li>`;
    });
    html += '</ul>';
    
    contentEl.innerHTML = html;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', err);
    contentEl.innerHTML = '<div class="openquestions-empty">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</div>';
  }
}

async function resolveQuestion(questionId) {
  try {
    const response = await fetch(`/api/open-questions/${questionId}/resolve`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ is_resolved: true })
    });
    
    if (response.ok) {
      console.log('‚úì –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π');
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
      collectOpenQuestionsData();
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      loadQuestionHistory();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ');
  }
}

async function unresolveQuestion(questionId) {
  try {
    const response = await fetch(`/api/open-questions/${questionId}/resolve`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ is_resolved: false })
    });
    
    if (response.ok) {
      console.log('‚úó –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–π');
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
      collectOpenQuestionsData();
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      loadQuestionHistory();
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –Ω–µ—Ä–µ—à–µ–Ω–Ω–æ–≥–æ');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –Ω–µ—Ä–µ—à–µ–Ω–Ω–æ–≥–æ');
  }
}

// =======================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∏
// =======================
function showRescheduleModal(event) {
  const modal = document.createElement('div');
  modal.className = 'reschedule-modal';
  modal.innerHTML = `
    <div class="reschedule-modal-content">
      <h3>–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É</h3>
      <div class="reschedule-current-info">
        <h4>–¢–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</h4>
        <div class="current-datetime">
          <strong>–î–∞—Ç–∞:</strong> ${new Date(event.start).toLocaleDateString('ru-RU', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </div>
        <div class="current-datetime">
          <strong>–í—Ä–µ–º—è:</strong> ${new Date(event.start).toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })} - ${new Date(event.end).toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}
        </div>
      </div>
      <div class="reschedule-step">
        <h4>1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É</h4>
        <div class="reschedule-calendar" id="reschedule-calendar"></div>
      </div>
      <div class="reschedule-step">
        <h4>2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è</h4>
        <div class="reschedule-time-slots" id="reschedule-time-slots"></div>
      </div>
      <div class="reschedule-modal-buttons">
        <button class="reschedule-modal-btn secondary" onclick="closeRescheduleModal()">–û—Ç–º–µ–Ω–∞</button>
        <button class="reschedule-modal-btn tomorrow" id="tomorrow-same-time-btn">Tomorrow, the same time</button>
        <button class="reschedule-modal-btn primary" id="confirm-reschedule-btn" disabled>–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  initRescheduleCalendar(event);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Tomorrow, the same time"
  const tomorrowBtn = document.getElementById('tomorrow-same-time-btn');
  tomorrowBtn.addEventListener('click', () => {
    rescheduleToTomorrowSameTime(event);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeRescheduleModal();
    }
  });
}

function initRescheduleCalendar(event) {
  const calendarEl = document.getElementById('reschedule-calendar');
  const currentDate = new Date();
  const currentMonth = currentDate.getMonth();
  const currentYear = currentDate.getFullYear();
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const dayHeaders = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  dayHeaders.forEach(day => {
    const headerEl = document.createElement('div');
    headerEl.className = 'reschedule-calendar-header';
    headerEl.textContent = day;
    calendarEl.appendChild(headerEl);
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
  const firstDayOfMonth = new Date(currentYear, currentMonth, 1).getDay();
  const adjustedFirstDay = firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
  
  // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
  for (let i = 0; i < adjustedFirstDay; i++) {
    const emptyEl = document.createElement('div');
    emptyEl.className = 'reschedule-calendar-day disabled';
    calendarEl.appendChild(emptyEl);
  }
  
  // –î–Ω–∏ –º–µ—Å—è—Ü–∞
  for (let day = 1; day <= daysInMonth; day++) {
    const dayEl = document.createElement('div');
    dayEl.className = 'reschedule-calendar-day';
    dayEl.textContent = day;
    
    const dayDate = new Date(currentYear, currentMonth, day);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
    if (dayDate < today) {
      dayEl.classList.add('disabled');
    } else {
      dayEl.addEventListener('click', () => selectRescheduleDate(dayDate));
    }
    
    calendarEl.appendChild(dayEl);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
  initRescheduleTimeSlots(event);
}

function initRescheduleTimeSlots(event) {
  const timeSlotsEl = document.getElementById('reschedule-time-slots');
  timeSlotsEl.innerHTML = '';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç
  const startHour = 8; // –ù–∞—á–∏–Ω–∞–µ–º —Å 8:00
  const endHour = 22; // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤ 22:00
  
  for (let hour = startHour; hour < endHour; hour++) {
    for (let minute = 0; minute < 60; minute += 30) {
      const timeSlot = document.createElement('div');
      timeSlot.className = 'reschedule-time-slot';
      timeSlot.textContent = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
      timeSlot.addEventListener('click', () => selectRescheduleTime(timeSlot));
      timeSlotsEl.appendChild(timeSlot);
    }
  }
}

function selectRescheduleDate(date) {
  // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç—ã
  document.querySelectorAll('.reschedule-calendar-day.selected').forEach(el => {
    el.classList.remove('selected');
  });
  
  // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
  event.target.classList.add('selected');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
  window.selectedRescheduleDate = date;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏"
  checkRescheduleButton();
}

function selectRescheduleTime(timeSlotEl) {
  // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  document.querySelectorAll('.reschedule-time-slot.selected').forEach(el => {
    el.classList.remove('selected');
  });
  
  // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  timeSlotEl.classList.add('selected');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  window.selectedRescheduleTime = timeSlotEl.textContent;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏"
  checkRescheduleButton();
}

function checkRescheduleButton() {
  const confirmBtn = document.getElementById('confirm-reschedule-btn');
  if (window.selectedRescheduleDate && window.selectedRescheduleTime) {
    confirmBtn.disabled = false;
    confirmBtn.addEventListener('click', () => confirmReschedule());
  } else {
    confirmBtn.disabled = true;
  }
}

function closeRescheduleModal() {
  const modal = document.querySelector('.reschedule-modal');
  if (modal) {
    modal.remove();
  }
  // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  window.selectedRescheduleDate = null;
  window.selectedRescheduleTime = null;
}

function rescheduleToTomorrowSameTime(event) {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
  const currentEvent = window.currentEvent;
  if (!currentEvent) {
    alert('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ');
    return;
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
  const originalStart = utcToMoscow(currentEvent.start);
  const originalEnd = utcToMoscow(currentEvent.end);
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è
  const newStartDate = new Date(tomorrow);
  newStartDate.setHours(originalStart.getHours(), originalStart.getMinutes(), 0, 0);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
  const duration = originalEnd.getTime() - originalStart.getTime();
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const newEndDate = new Date(newStartDate.getTime() + duration);
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  const confirmMessage = `–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É "${currentEvent.subject}" –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (${tomorrow.toLocaleDateString('ru-RU')}) –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è (${originalStart.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})})?\n\n–ò—Å—Ö–æ–¥–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.`;
  
  if (confirm(confirmMessage)) {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ
    performRescheduleWithDeletion(currentEvent, newStartDate, newEndDate);
  }
}

async function performRescheduleWithDeletion(originalEvent, newStartDate, newEndDate) {
  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    const startISO = formatDateToISO(newStartDate);
    const endISO = formatDateToISO(newEndDate);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
    const newEventPayload = {
      subject: originalEvent.subject,
      start: startISO,
      end: endISO,
      location: originalEvent.location || '',
      attendees: originalEvent.attendees || [],
      stream: originalEvent.stream || [],
      notes: originalEvent.notes || '',
      recording_url: originalEvent.recording_url || '',
      open_questions: originalEvent.open_questions || [],
      actual_open_questions: originalEvent.actual_open_questions || ''
    };
    
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', newEventPayload);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const createResponse = await fetch('/api/events', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newEventPayload)
    });
    
    if (!createResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    }
    
    const newEvent = await createResponse.json();
    console.log('‚úì –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', newEvent);
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const deleteResponse = await fetch(`/api/events/${originalEvent.id}`, {
      method: 'DELETE'
    });
    
    if (!deleteResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
    }
    
    console.log('‚úì –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    alert(`–í—Å—Ç—Ä–µ—á–∞ "${originalEvent.subject}" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n\n–ò—Å—Ö–æ–¥–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª–µ–Ω–∞.`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await loadEventsFromAPI();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Ñ–æ—Ä–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    closeRescheduleModal();
    document.getElementById('event-details').innerHTML = '';
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤—Å—Ç—Ä–µ—á–∏:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

function confirmReschedule() {
  if (!window.selectedRescheduleDate || !window.selectedRescheduleTime) return;
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  const currentEvent = window.currentEvent;
  if (!currentEvent) {
    alert('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ');
    return;
  }
  
  // –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  const [hours, minutes] = window.selectedRescheduleTime.split(':').map(Number);
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  const newStartDate = new Date(window.selectedRescheduleDate);
  newStartDate.setHours(hours, minutes, 0, 0);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
  const originalStart = utcToMoscow(currentEvent.start);
  const originalEnd = utcToMoscow(currentEvent.end);
  const duration = originalEnd.getTime() - originalStart.getTime();
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
  const newEndDate = new Date(newStartDate.getTime() + duration);
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
  const confirmMessage = `–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É "${currentEvent.subject}" –Ω–∞ ${newStartDate.toLocaleDateString('ru-RU')} –≤ ${window.selectedRescheduleTime}?`;
  
  if (!confirm(confirmMessage)) {
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
  updateEventTime(currentEvent.id, newStartDate, newEndDate);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  closeRescheduleModal();
}

async function updateEventTime(eventId, newStart, newEnd) {
  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
    const startISO = formatDateToISO(newStart);
    const endISO = formatDateToISO(newEnd);
    
    const response = await fetch(`/api/events/${eventId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        start: startISO,
        end: endISO
      })
    });
    
    if (response.ok) {
      console.log('‚úì –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞');
      alert('–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      await loadEventsFromAPI();
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      document.getElementById('event-details').innerHTML = '';
    } else {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤—Å—Ç—Ä–µ—á–∏');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ:', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –≤—Å—Ç—Ä–µ—á–∏');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ UTC
function formatDateToISO(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hour = String(date.getHours()).padStart(2, '0');
  const minute = String(date.getMinutes()).padStart(2, '0');
  
  return `${year}-${month}-${day}T${hour}:${minute}:00`;
}

// =======================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// =======================
function autoResizeTextarea(textarea) {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
  textarea.style.height = 'auto';
  
  // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –∏–∑ —Å—Ç–∏–ª–µ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const maxHeight = parseInt(textarea.style.maxHeight) || 200;
  const minHeight = parseInt(textarea.style.minHeight) || 28;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  const scrollHeight = textarea.scrollHeight;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  const newHeight = Math.max(minHeight, Math.min(scrollHeight, maxHeight));
  textarea.style.height = newHeight + 'px';
  
  // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
  if (scrollHeight > maxHeight) {
    textarea.style.overflowY = 'auto';
  } else {
    textarea.style.overflowY = 'hidden';
  }
}

function autoResizeInput(input) {
  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
  const temp = document.createElement('span');
  temp.style.visibility = 'hidden';
  temp.style.position = 'absolute';
  temp.style.whiteSpace = 'nowrap';
  temp.style.font = window.getComputedStyle(input).font;
  temp.textContent = input.value || input.placeholder;
  
  document.body.appendChild(temp);
  
  // –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
  const textWidth = temp.offsetWidth;
  document.body.removeChild(temp);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
  const minWidth = 100;
  const maxWidth = 400;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —à–∏—Ä–∏–Ω—É
  const newWidth = Math.max(minWidth, Math.min(textWidth + 20, maxWidth));
  input.style.width = newWidth + 'px';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤—Å–µ—Ö textarea –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function autoResizeAllTextareas() {
  const textareas = document.querySelectorAll('textarea.question-text, textarea.note-input');
  textareas.forEach(textarea => autoResizeTextarea(textarea));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
  setTimeout(autoResizeAllTextareas, 100);
});

// =======================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
// =======================
// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –°–°–´–õ–û–ö =====

// –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
async function findPreviousEventWithSameName(subject) {
  try {
    console.log('üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:', subject);
    const response = await fetch(`/api/events`);
    if (response.ok) {
      const events = await response.json();
      
      // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const sameNameEvents = events.filter(event => 
        event.subject && event.subject.toLowerCase() === subject.toLowerCase()
      );
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${subject}":`, sameNameEvents.length);
      
      // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
      for (const event of sameNameEvents) {
        if (event.location && event.location.trim()) {
          const urlRegex = /(https?:\/\/[^\s]+)/g;
          if (urlRegex.test(event.location)) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å —Å—Å—ã–ª–∫–æ–π:', event.id, event.start?.split('T')[0]);
            return event;
          }
        }
      }
      
      console.log('‚ùå –°–æ–±—ã—Ç–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
  }
  return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function checkAndShowCopyLinkButtonForView() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏');
  
  const subject = document.getElementById('ve-title')?.value.trim();
  const copyBtn = document.getElementById('ve-copy-link-btn');
  const addressInput = document.getElementById('ve-location-address');
  
  if (!subject || !copyBtn || !addressInput) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏
  const currentAddress = addressInput.value.trim();
  const urlRegex = /(https?:\/\/[^\s]+)/g;
  const hasCurrentLink = urlRegex.test(currentAddress);
  
  console.log('üîó –¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:', hasCurrentLink ? '–ï—Å—Ç—å' : '–ù–µ—Ç', '- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è:', currentAddress.substring(0, 50) + '...');
  
  // –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏ —É–∂–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
  if (hasCurrentLink) {
    console.log('‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É - —Å—Å—ã–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å');
    copyBtn.style.display = 'none';
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Å—Å—ã–ª–∫–æ–π
  const previousEvent = await findPreviousEventWithSameName(subject);
  
  if (previousEvent) {
    console.log('‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É - –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Å—Å—ã–ª–∫–æ–π');
    copyBtn.style.display = 'block';
    copyBtn.title = `–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–±—ã—Ç–∏—è "${subject}" (${previousEvent.start?.split('T')[0] || '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'})`;
  } else {
    console.log('‚ùå –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É - –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    copyBtn.style.display = 'none';
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
async function copyLinkFromPreviousEvent(subject) {
  console.log('üîç copyLinkFromPreviousEvent: –∏—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:', subject);
  
  const previousEvent = await findPreviousEventWithSameName(subject);
  
  if (previousEvent && previousEvent.location) {
    console.log('üìã copyLinkFromPreviousEvent: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', {
      id: previousEvent.id,
      date: previousEvent.start?.split('T')[0],
      location: previousEvent.location.substring(0, 100) + '...'
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ø–æ–ª—è location
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const urls = previousEvent.location.match(urlRegex);
    
    if (urls && urls.length > 0) {
      console.log('‚úÖ copyLinkFromPreviousEvent: –∏–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞:', urls[0].substring(0, 100) + '...');
      return urls[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
    } else {
      console.log('‚ùå copyLinkFromPreviousEvent: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ location');
    }
  } else {
    console.log('‚ùå copyLinkFromPreviousEvent: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç location');
  }
  
  return null;
}

// –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
async function findPreviousEventWithAttendees(subject) {
  try {
    console.log('üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è:', subject);
    const response = await fetch(`/api/events`);
    if (response.ok) {
      const events = await response.json();
      
      // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const sameNameEvents = events.filter(event => 
        event.subject && event.subject.toLowerCase() === subject.toLowerCase()
      );
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${subject}":`, sameNameEvents.length);
      
      // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
      for (const event of sameNameEvents) {
        if (event.attendees && event.attendees.length > 0) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:', event.id, event.start?.split('T')[0], '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', event.attendees.length);
          return event;
        }
      }
      
      console.log('‚ùå –°–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:', error);
  }
  return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async function checkAndShowCopyAttendeesButtonForView() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  
  const subject = document.getElementById('ve-title')?.value.trim();
  const copyBtn = document.getElementById('ve-copy-attendees-btn');
  const attendeesContainer = document.getElementById('ve-tags-container');
  
  if (!subject || !copyBtn || !attendeesContainer) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
    return;
  }
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏
    const currentAttendees = attendeesContainer.querySelectorAll('.tag-chip, .tag');
    const hasCurrentAttendees = currentAttendees.length > 0;
  
  console.log('üë• –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', hasCurrentAttendees ? `–ï—Å—Ç—å (${currentAttendees.length})` : '–ù–µ—Ç');
  console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã .tag-chip:', currentAttendees.length);
  console.log('üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ attendeesContainer:', attendeesContainer.innerHTML);
  
  // –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–±—ã—Ç–∏–∏ —É–∂–µ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
  if (hasCurrentAttendees) {
    console.log('‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É - —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ –µ—Å—Ç—å');
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', Array.from(currentAttendees).map(el => el.textContent));
    copyBtn.style.display = 'none';
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
  const previousEvent = await findPreviousEventWithAttendees(subject);
  
  if (previousEvent) {
    console.log('‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É - –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');
    copyBtn.style.display = 'block';
    copyBtn.title = `–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ–±—ã—Ç–∏—è "${subject}" (${previousEvent.start?.split('T')[0] || '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}) - ${previousEvent.attendees.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
  } else {
    console.log('‚ùå –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É - –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    copyBtn.style.display = 'none';
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
async function copyAttendeesFromPreviousEvent(subject) {
  console.log('üîç copyAttendeesFromPreviousEvent: –∏—â–µ–º —Å–æ–±—ã—Ç–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è:', subject);
  
  const previousEvent = await findPreviousEventWithAttendees(subject);
  
  if (previousEvent && previousEvent.attendees && previousEvent.attendees.length > 0) {
    console.log('üìã copyAttendeesFromPreviousEvent: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:', {
      id: previousEvent.id,
      date: previousEvent.start?.split('T')[0],
      attendees: previousEvent.attendees
    });
    
    console.log('‚úÖ copyAttendeesFromPreviousEvent: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', previousEvent.attendees);
    return previousEvent.attendees;
  } else {
    console.log('‚ùå copyAttendeesFromPreviousEvent: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Open Questions –∏–∑ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–∞–º–∏
async function processEventsForAutoOpenQuestions(events) {
  console.log('üîÑ processEventsForAutoOpenQuestions: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É', events.length, '—Å–æ–±—ã—Ç–∏–π');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (!allStreamsData || allStreamsData.length === 0) {
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Open Questions...');
    try {
      const streamsResponse = await fetch('/api/streams?search=');
      if (streamsResponse.ok) {
        allStreamsData = await streamsResponse.json();
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ streams –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:', allStreamsData.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', streamsResponse.status);
        return;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', error);
      return;
    }
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
  for (const ev of events) {
    if (ev.notes && Array.isArray(ev.notes)) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ "${ev.subject}" (ID: ${ev.id}) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–∞–º–∏`);
      
      for (let noteIndex = 0; noteIndex < ev.notes.length; noteIndex++) {
        const noteObj = ev.notes[noteIndex];
        const noteData = {
          text: noteObj.text || '',
          time: noteObj.time || '',
          person: noteObj.person || '',
          isQuestion: false,
          due: null,
          stream: noteObj.topic || null,
          important: false,
          asap: false
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ—Ç–∫–∏
        if (noteData.text && allStreamsData && allStreamsData.length > 0) {
          const extractedTags = extractTagsFromText(noteData.text, allStreamsData);
          if (extractedTags.length > 0) {
            console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ç–µ–≥–∏ –≤ –∑–∞–º–µ—Ç–∫–µ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${ev.subject}":`, extractedTags);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏
            try {
              const existingQuestionsResponse = await fetch('/api/open-questions');
              if (existingQuestionsResponse.ok) {
                const existingQuestions = await existingQuestionsResponse.json();
                const existingQuestion = existingQuestions.find(q => 
                  q.event_id === ev.id && 
                  q.question_text === noteData.text &&
                  q.person === noteData.person
                );
                
                if (existingQuestion) {
                  console.log(`‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${ev.subject}"`);
                  continue;
                }
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–≥–∞–º–∏
            try {
              await createQuestionFromNote(noteData, noteIndex, ev.id);
              console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –∏–∑ –∑–∞–º–µ—Ç–∫–∏ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${ev.subject}"`);
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∑–∞–º–µ—Ç–∫–∏ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${ev.subject}":`, error);
            }
          }
        }
      }
    }
  }
  
  console.log('‚úÖ processEventsForAutoOpenQuestions: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Open Questions –∏–∑ –∑–∞–º–µ—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
async function processEventNotesForAutoOpenQuestions(event) {
  console.log(`üîÑ processEventNotesForAutoOpenQuestions: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "${event.subject}" (ID: ${event.id})`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (!allStreamsData || allStreamsData.length === 0) {
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º streams –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Open Questions...');
    try {
      const streamsResponse = await fetch('/api/streams?search=');
      if (streamsResponse.ok) {
        allStreamsData = await streamsResponse.json();
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ streams –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:', allStreamsData.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', streamsResponse.status);
        return;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', error);
      return;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
  if (event.notes && Array.isArray(event.notes)) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${event.notes.length} –∑–∞–º–µ—Ç–æ–∫ —Å–æ–±—ã—Ç–∏—è "${event.subject}" –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤`);
    
    for (let noteIndex = 0; noteIndex < event.notes.length; noteIndex++) {
      const noteObj = event.notes[noteIndex];
      const noteData = {
        text: noteObj.text || '',
        time: noteObj.time || '',
        person: noteObj.person || '',
        isQuestion: false,
        due: null,
        stream: noteObj.topic || null,
        important: false,
        asap: false
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ—Ç–∫–∏
      if (noteData.text && allStreamsData && allStreamsData.length > 0) {
        const extractedTags = extractTagsFromText(noteData.text, allStreamsData);
        if (extractedTags.length > 0) {
          console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ç–µ–≥–∏ –≤ –∑–∞–º–µ—Ç–∫–µ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${event.subject}":`, extractedTags);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –∑–∞–º–µ—Ç–∫–∏
          try {
            const existingQuestionsResponse = await fetch('/api/open-questions');
            if (existingQuestionsResponse.ok) {
              const existingQuestions = await existingQuestionsResponse.json();
              const existingQuestion = existingQuestions.find(q => 
                q.event_id === event.id && 
                q.question_text === noteData.text &&
                q.person === noteData.person
              );
              
              if (existingQuestion) {
                console.log(`‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${event.subject}"`);
                continue;
              }
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
          }
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–≥–∞–º–∏
          try {
            await createQuestionFromNote(noteData, noteIndex, event.id);
            console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –∏–∑ –∑–∞–º–µ—Ç–∫–∏ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${event.subject}"`);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∑–∞–º–µ—Ç–∫–∏ "${noteData.text}" —Å–æ–±—ã—Ç–∏—è "${event.subject}":`, error);
          }
        }
      }
    }
  } else {
    console.log(`‚ö†Ô∏è –£ —Å–æ–±—ã—Ç–∏—è "${event.subject}" –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ –æ–Ω–∏ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞`);
  }
  
  console.log(`‚úÖ processEventNotesForAutoOpenQuestions: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "${event.subject}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
}

// ===== –ö–û–ù–ï–¶ –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ displayName
function deduplicateAttendees(attendees) {
  const unique = {};
  attendees.forEach(item => {
    const key = item.displayName;
    if (!unique[key] || item.useCount > unique[key].useCount) {
      unique[key] = item;
    }
  });
  return Object.values(unique);
}

function showEvent(ev) {
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞
  window.currentEvent = ev;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Ä–∏—é
  checkAndExtendSeries(ev);
  
  const attendees = ev.attendees || [];
  const streams = ev.stream ? (Array.isArray(ev.stream) ? ev.stream : [ev.stream]) : [];
  const openQuestions = ev.open_questions || [];
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const startMoscow = utcToMoscow(ev.start);
  const endMoscow = utcToMoscow(ev.end);
  
  // –ü–∞—Ä—Å–∏–º –º–µ—Å—Ç–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ "Type: Address")
  let chosenPlace = '';
  let locationAddress = ev.location || '';
  if (ev.location && ev.location.includes(':')) {
    const parts = ev.location.split(':');
    chosenPlace = parts[0].trim();
    locationAddress = parts.slice(1).join(':').trim();
  }
  
  eventDetails.innerHTML = `
    <div class="event-block" style="position:relative;">
      <button type="button" id="reschedule-event-btn">Reschedule</button>
      <button type="button" id="delete-event-btn" style="position:absolute; top:8px; right:8px; padding:4px 10px; background:#ffebee; color:#d32f2f; border:1px solid #d32f2f; border-radius:4px; cursor:pointer; font-size:11px; font-weight:600; transition:all 0.2s;">Delete</button>
      <form id="view-event-form">
        <input type="text" id="ve-title" value="${ev.subject}" required style="width:100%; font-size:1.1rem; padding:8px; border-radius:6px; border:1px solid #ccc; margin-bottom:10px;" />

        <div style="margin-top:10px; display:flex; align-items:center; gap:16px; justify-content:space-between;">
          <div style="display:flex; align-items:center; gap:16px;">
            <div class="calendar-card">
              <div class="calendar-month">${startMoscow.toLocaleString('ru', { month: 'short' }).toUpperCase()}</div>
              <div class="calendar-day">${startMoscow.getDate()}</div>
            </div>
            <div style="display:flex; align-items:center; gap:8px;">
              <input type="time" id="ve-start-time" value="${formatHM(startMoscow)}" style="padding:4px 8px; border-radius:4px; border:1px solid #ccc; font-size:0.9em;" />
              <span style="color:#666;">‚Äì</span>
              <input type="time" id="ve-end-time" value="${formatHM(endMoscow)}" style="padding:4px 8px; border-radius:4px; border:1px solid #ccc; font-size:0.9em;" />
            </div>
          </div>
          <div id="ve-location-buttons" style="display:flex; gap:6px; flex-wrap:wrap;">
            <button type="button" class="loc-btn" data-value="Zoom" title="Zoom - popular video conferencing platform">
              <img src="logos_pics/Zoom.svg?v=3" width="20" height="20" alt="Zoom" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">Z</span>
            </button>
            <button type="button" class="loc-btn" data-value="Teams" title="Microsoft Teams - video conferencing and collaboration platform">
              <img src="logos_pics/teams.png?v=1" width="20" height="20" alt="Microsoft Teams" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">T</span>
            </button>
            <button type="button" class="loc-btn" data-value="Google Meet" title="Google Meet - video conferencing by Google">
              <img src="logos_pics/meet.png?v=1" width="20" height="20" alt="Google Meet" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">G</span>
            </button>
            <button type="button" class="loc-btn" data-value="–¢–µ–ª–µ–º–æ—Å—Ç" title="Yandex Telemost - video conferencing for large groups">
              <img src="logos_pics/telemost.jpeg?v=1" width="20" height="20" alt="Yandex Telemost" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">Y</span>
            </button>
            <button type="button" class="loc-btn" data-value="–¢–µ–ª–µ–≥—Ä–∞–º" title="Telegram - messenger for quick communication">
              <img src="logos_pics/telegram.png?v=1" width="20" height="20" alt="Telegram" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">T</span>
            </button>
            <button type="button" class="loc-btn" data-value="–î—Ä—É–≥–æ–µ" title="Other - choose another way to conduct the meeting">Other</button>
          </div>
        </div>

        <div style="margin-top:8px; display: flex; gap: 8px; align-items: center;">
          <input type="text" id="ve-location-address" value="${locationAddress}" placeholder="Link for the meeting" style="flex: 1; padding:8px; border-radius:6px; border:1px solid #ccc;" />
          <button type="button" id="ve-copy-link-btn" title="Get link from previous event" style="padding: 8px 12px; background: #4285f4; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 11px; display: none;">üîó Get link</button>
        </div>

        <div style="display:block; margin-top:10px;">
          <div style="margin-bottom:6px; font-weight:bold;">Participants</div>
          <div class="tag-input" id="ve-attendees-tags">
            <div class="tags" id="ve-tags-container"></div>
            <input type="text" id="ve-attendees-input" placeholder="Start to input name or e-mail..." />
            <div class="suggestions" id="ve-attendees-suggest"></div>
          </div>
          <div style="margin-top: 6px;">
            <button type="button" id="ve-copy-attendees-btn" title="Get participants from previous meeting" style="padding: 6px 10px; background: #4285f4; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 11px; display: none; white-space: nowrap;">üë• Get participants</button>
          </div>
        </div>

        <div style="display:block; margin-top:10px;">
          <div style="margin-bottom:6px; font-weight:bold;">Stream</div>
          <div class="tag-input" id="ve-stream-tags">
            <div class="tags" id="ve-stream-container"></div>
            <input type="text" id="ve-stream-input" placeholder="Start to input tag or stream..." />
            <div class="suggestions" id="ve-stream-suggest"></div>
          </div>
        </div>

        <div class="section-box">
          <div class="section-title" onclick="toggleSection('ve-actual-questions-section')">
            <span class="section-toggle">‚ñº</span>
            Actual open questions for the meeting
          </div>
          <div class="section-content actual-questions-section" id="ve-actual-questions-section">
            <button type="button" id="ve-add-actual-question" class="add-note-btn">Add question</button>
            <div id="ve-actual-questions-rows"></div>
          </div>
        </div>

        <div class="section-box">
          <div class="section-title" onclick="toggleSection('ve-notes-section')">
            <span class="section-toggle">‚ñº</span>
            Notes
          </div>
          <div class="section-content notes-section" id="ve-notes-section">
            <button type="button" id="ve-add-note" class="add-note-btn">Add row</button>
            <div id="ve-notes-rows"></div>
          </div>
        </div>

        <div style="display:block; margin-top:12px;">
          <div style="margin-bottom:6px; font-weight:bold;">Meeting materials</div>
          <input type="url" id="ve-recording-url" value="${ev.recording_url || ''}" placeholder="Link to recording...." style="width:100%; padding:8px; border-radius:6px; border:1px solid #ccc;" />
        </div>

        <div style="margin-top:12px; display:flex; gap:8px; align-items:center;">
          <span id="ve-save-indicator" style="color:#999; font-size:0.9em;"></span>
        </div>
      </form>
    </div>
  `;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
  setTimeout(() => {
    const deleteBtnAfterHTML = document.getElementById('delete-event-btn');
    
    if (deleteBtnAfterHTML) {
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ setTimeout
      deleteBtnAfterHTML.addEventListener('click', async (event) => {
        event.preventDefault();
        event.stopPropagation();
        
        const eventTitle = ev.subject;
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
        const deletePhrase = prompt(
          `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\nDelete ${eventTitle}`
        );
        
        if (deletePhrase !== `Delete ${eventTitle}`) {
          alert('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.');
          return;
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        try {
          const response = await fetch(`/api/events/${ev.id}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            console.log(`‚úì –°–æ–±—ã—Ç–∏–µ "${eventTitle}" —É–¥–∞–ª–µ–Ω–æ`);
            alert(`–°–æ–±—ã—Ç–∏–µ "${eventTitle}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            eventDetails.innerHTML = '';
            await loadEventsFromAPI();
          } else {
            const errorText = await response.text();
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', response.status, errorText);
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${response.status}`);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
        }
      });
    }
  }, 100);

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ —Å—Å—ã–ª–∫–µ
  function detectPlatform(url) {
    const urlLower = url.toLowerCase();
    if (urlLower.includes('zoom.us') || urlLower.includes('zoom.com')) {
      return 'Zoom';
    }
    if (urlLower.includes('teams.microsoft.com') || urlLower.includes('teams.live.com')) {
      return 'Teams';
    }
    if (urlLower.includes('meet.google.com') || urlLower.includes('google.com/meet')) {
      return 'Google Meet';
    }
    if (urlLower.includes('telemost') || urlLower.includes('telemost.ru') || urlLower.includes('telemost.by')) {
      return '–¢–µ–ª–µ–º–æ—Å—Ç';
    }
    if (urlLower.includes('t.me') || urlLower.includes('telegram.me') || urlLower.includes('telegram.org')) {
      return '–¢–µ–ª–µ–≥—Ä–∞–º';
    }
    return '–î—Ä—É–≥–æ–µ';
  }
  
  // –í—ã–±–æ—Ä –º–µ—Å—Ç–∞
  const locButtons = Array.from(document.querySelectorAll('#ve-location-buttons .loc-btn'));
  const addressInput = /** @type {HTMLInputElement} */(document.getElementById('ve-location-address'));
  let editBtn = null;
  
  function updateLocationButtons() {
    const address = addressInput?.value || '';
    const hasLink = address.trim().length > 0;
    
    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if (hasLink && !chosenPlace) {
      chosenPlace = detectPlatform(address);
    } else if (hasLink) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–º–µ–Ω—è–ª–∞—Å—å –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
      const detectedPlatform = detectPlatform(address);
      if (detectedPlatform !== chosenPlace && detectedPlatform !== '–î—Ä—É–≥–æ–µ') {
        chosenPlace = detectedPlatform;
      }
    }
    
    locButtons.forEach(btn => {
      const btnType = btn.dataset.value;
      
      if (btnType === chosenPlace && hasLink) {
        // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π - —Å–∏–Ω—è—è —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
        btn.style.display = 'inline-block';
        btn.style.background = '#0078d4';
        btn.style.color = 'white';
        btn.style.fontWeight = 'bold';
        btn.style.cursor = 'pointer';
        btn.style.paddingRight = '8px';
      } else if (btnType === chosenPlace) {
        // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –±–µ–∑ —Å—Å—ã–ª–∫–∏ - –æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è
        btn.style.display = 'inline-block';
        btn.classList.add('active');
        btn.style.background = '';
        btn.style.color = '';
        btn.style.fontWeight = '';
        btn.style.cursor = '';
        btn.style.paddingRight = '';
      } else {
        // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - —Å–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –∏ —ç—Ç–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–ª–∏ Other
        const communicationPlatforms = ['Zoom', 'Teams', 'Google Meet', '–¢–µ–ª–µ–º–æ—Å—Ç', '–¢–µ–ª–µ–≥—Ä–∞–º'];
        if (hasLink && (communicationPlatforms.includes(btnType) || btnType === '–î—Ä—É–≥–æ–µ')) {
          btn.style.display = 'none';
        } else {
          btn.style.display = 'inline-block';
          btn.classList.remove('active');
          btn.style.background = '';
          btn.style.color = '';
          btn.style.fontWeight = '';
          btn.style.cursor = '';
          btn.style.paddingRight = '';
        }
      }
    });
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π Edit
    if (hasLink && chosenPlace) {
      if (!editBtn) {
        editBtn = document.createElement('span');
        editBtn.textContent = '‚úèÔ∏è';
        editBtn.style.cssText = 'margin-left:8px; font-size:0.7em; cursor:pointer; margin-top:7px;';
        editBtn.addEventListener('click', ()=>{
          if (addressInput) {
            addressInput.style.display = 'block';
            addressInput.focus();
          }
        });
        document.getElementById('ve-location-buttons')?.appendChild(editBtn);
      }
      editBtn.style.display = 'inline';
    } else {
      if (editBtn) editBtn.style.display = 'none';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
    if (addressInput) {
      if (chosenPlace && hasLink) {
        addressInput.style.display = 'none';
      } else {
        addressInput.style.display = 'block';
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    setTimeout(() => {
      console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º checkAndShowCopyLinkButtonForView —á–µ—Ä–µ–∑ setTimeout');
      checkAndShowCopyLinkButtonForView();
    }, 50);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    setTimeout(() => {
      console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º checkAndShowCopyAttendeesButtonForView —á–µ—Ä–µ–∑ setTimeout');
      checkAndShowCopyAttendeesButtonForView();
    }, 100);
  }
  
  locButtons.forEach(btn => {
    if (btn.dataset.value === chosenPlace) {
      btn.classList.add('active');
    }
    btn.addEventListener('click', ()=>{
      const btnType = btn.dataset.value;
      const address = addressInput?.value || '';
      const hasLink = address.trim().length > 0;
      
      // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á—É
      if (btnType === chosenPlace && hasLink) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤—Å—Ç—Ä–µ—á–∏
        meetingStartTime = new Date();
        console.log('üöÄ –í—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤', meetingStartTime.toLocaleTimeString());
        window.open(address, '_blank');
        return;
      }
      
      // –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π
      locButtons.forEach(b=> b.classList.remove('active'));
      btn.classList.add('active');
      chosenPlace = btn.dataset.value || '';
      
      // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      hideOtherLocationButtons(btn);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞
      btn.addEventListener('dblclick', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        btn.classList.remove('active');
        chosenPlace = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞
        showAllLocationButtons();
        
        updateLocationButtons();
        triggerAutoSave();
      });
      
      updateLocationButtons();
      triggerAutoSave();
    });
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞
  addressInput?.addEventListener('input', ()=>{
    updateLocationButtons();
    checkAndShowCopyLinkButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
  });
  
  // –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
  addressInput?.addEventListener('blur', ()=>{
    updateLocationButtons();
    triggerAutoSave();
    checkAndShowCopyLinkButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
  });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  updateLocationButtons();

  // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–∫ —Ç–µ–≥–∏
  const tagsContainer = document.getElementById('ve-tags-container');
  const tagsInput = /** @type {HTMLInputElement} */(document.getElementById('ve-attendees-input'));
  const suggestBox = document.getElementById('ve-attendees-suggest');
  currentTags = [...attendees]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  let history = [];
  
  console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è currentTags –≤ showEvent:', currentTags);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ API
  async function loadAttendeesFromAPI(search = ''){
    try {
      const response = await fetch(`/api/attendees?search=${encodeURIComponent(search)}`);
      if (response.ok) {
        const attendees = await response.json();
        return attendees.map(a => {
          let displayName;
          if (a.name && a.surname) {
            displayName = `${a.name} ${a.surname}`;
          } else if (a.name) {
            displayName = a.name;
          } else {
            displayName = a.email;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
          return {
            displayName: displayName,
            email: a.email,
            lastUsed: a.last_used,
            useCount: a.use_count,
            id: a.id
          };
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
        return deduplicateAttendees(attendees);
      }
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
    }
    return [];
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
  function parseAttendeeInput(input) {
    const trimmed = input.trim();
    
    // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç @ - —ç—Ç–æ email
    if (trimmed.includes('@')) {
      return {
        email: trimmed,
        name: null,
        surname: null
      };
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    const parts = trimmed.split(/\s+/).filter(part => part.length > 0);
    
    if (parts.length === 1) {
      // –û–¥–Ω–æ —Å–ª–æ–≤–æ - —ç—Ç–æ name
      return {
        email: trimmed, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ email –¥–ª—è –ø–æ–∏—Å–∫–∞
        name: trimmed,
        surname: null
      };
    } else if (parts.length === 2) {
      // –î–≤–∞ —Å–ª–æ–≤–∞ - name –∏ surname
      return {
        email: trimmed, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ email –¥–ª—è –ø–æ–∏—Å–∫–∞
        name: parts[0],
        surname: parts[1]
      };
    } else {
      // –ë–æ–ª—å—à–µ –¥–≤—É—Ö —Å–ª–æ–≤ - —Å—á–∏—Ç–∞–µ–º –≤—Å–µ name
      return {
        email: trimmed, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ email –¥–ª—è –ø–æ–∏—Å–∫–∞
        name: trimmed,
        surname: null
      };
    }
  }

  async function saveAttendeeToAPI(input){
    try {
      const parsed = parseAttendeeInput(input);
      console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', { input, parsed });
      
      const params = new URLSearchParams();
      params.append('email', parsed.email);
      if (parsed.name) params.append('name', parsed.name);
      if (parsed.surname) params.append('surname', parsed.surname);
      
      await fetch(`/api/attendees?${params.toString()}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', err);
    }
  }
  
  async function deleteAttendeeFromAPI(email){
    try {
      await fetch(`/api/attendees/${encodeURIComponent(email)}`, {
        method: 'DELETE'
      });
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', err);
    }
  }
  
  loadAttendeesFromAPI().then(list => { history = list; });

  function renderTags(){
    if (!tagsContainer) return;
    tagsContainer.innerHTML = '';
    currentTags.forEach(val => {
      const chip = document.createElement('span');
      chip.className = 'tag-chip';
      chip.textContent = val;
      chip.title = '–ü–ö–ú ‚Äî —É–¥–∞–ª–∏—Ç—å';
      chip.addEventListener('contextmenu', (e)=>{
        e.preventDefault();
        currentTags = currentTags.filter(v => v !== val);
        renderTags();
        triggerAutoSave();
        checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
      });
      tagsContainer.appendChild(chip);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    checkAndShowCopyAttendeesButtonForView();
  }

  async function addTag(value){
    const v = (value||'').trim();
    if (!v) return;
    console.log('üîç addTag –≤—ã–∑–≤–∞–Ω–∞ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º:', v);
    console.log('üîç currentTags –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', currentTags);
    
    if (!currentTags.includes(v)) {
      currentTags.push(v);
      console.log('üîç currentTags –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', currentTags);
      renderTags();
      triggerAutoSave();
      checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    }
    await saveAttendeeToAPI(v);
    if (!history.includes(v)) {
      history = [v, ...history].slice(0, 200);
    }
  }

  function setSuggestionsVisible(visible){
    if (!suggestBox) return;
    suggestBox.classList.toggle('visible', !!visible);
  }

  async function renderSuggestions(query){
    console.log('DEBUG renderSuggestions: query =', query);
    if (!suggestBox) {
      console.log('DEBUG renderSuggestions: suggestBox –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    const q = (query||'').trim();
    console.log('DEBUG renderSuggestions: trimmed query =', q);
    const apiList = await loadAttendeesFromAPI(q);
    console.log('DEBUG renderSuggestions: apiList =', apiList);
    const list = apiList.filter(h => !currentTags.includes(h.displayName)).slice(0, 8);
    console.log('DEBUG renderSuggestions: filtered list =', list);
    
    if (list.length === 0) { 
      console.log('DEBUG renderSuggestions: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Å–∫—Ä—ã–≤–∞–µ–º suggestions');
      suggestBox.innerHTML = ''; 
      setSuggestionsVisible(false); 
      return; 
    }
    console.log('DEBUG renderSuggestions: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º suggestions');
    suggestBox.innerHTML = '';
    list.forEach((item, index) => {
      const row = document.createElement('div');
      row.style.cssText = 'display:flex; justify-content:space-between; align-items:center; padding:4px 8px;';
      
      const textSpan = document.createElement('span');
      textSpan.textContent = item.displayName;
      textSpan.style.flex = '1';
      textSpan.addEventListener('mousedown', (e)=>{
        e.preventDefault();
        addTag(item.displayName);
        if (tagsInput) tagsInput.value = '';
        setSuggestionsVisible(false);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
      const lastUsedSpan = document.createElement('span');
      if (item.lastUsed) {
        const lastUsedDate = new Date(item.lastUsed);
        const now = new Date();
        const diffDays = Math.floor((now - lastUsedDate) / (1000 * 60 * 60 * 24));
        
        let lastUsedText;
        if (diffDays === 0) {
          lastUsedText = '—Å–µ–≥–æ–¥–Ω—è';
        } else if (diffDays === 1) {
          lastUsedText = '–≤—á–µ—Ä–∞';
        } else if (diffDays < 7) {
          lastUsedText = `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
        } else if (diffDays < 30) {
          lastUsedText = `${Math.floor(diffDays / 7)} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
        } else {
          lastUsedText = `${Math.floor(diffDays / 30)} –º–µ—Å. –Ω–∞–∑–∞–¥`;
        }
        
        lastUsedSpan.textContent = lastUsedText;
        lastUsedSpan.style.cssText = 'font-size:0.8em; color:#666; margin-left:8px;';
        lastUsedSpan.title = `–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${lastUsedDate.toLocaleDateString('ru-RU')}`;
      }
      
      const deleteBtn = document.createElement('span');
      deleteBtn.textContent = '‚úï';
      deleteBtn.style.cssText = 'cursor:pointer; color:#999; padding:0 4px; display:none; font-weight:bold;';
      deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏';
      deleteBtn.addEventListener('mousedown', async (e)=>{
        e.preventDefault();
        e.stopPropagation();
        await deleteAttendeeFromAPI(item.email);
        history = history.filter(h => h !== item.displayName);
        await renderSuggestions(query);
      });
      
      row.addEventListener('mouseenter', ()=> deleteBtn.style.display = 'inline');
      row.addEventListener('mouseleave', ()=> deleteBtn.style.display = 'none');
      
      row.appendChild(textSpan);
      if (lastUsedSpan.textContent) {
        row.appendChild(lastUsedSpan);
      }
      row.appendChild(deleteBtn);
      suggestBox.appendChild(row);
    });
    setSuggestionsVisible(true);
  }

  tagsInput?.addEventListener('keydown', (e)=>{
    if (e.key === 'Enter' || e.key === ','){
      e.preventDefault();
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ suggestions, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      const selectedSuggestion = suggestBox?.querySelector('.suggestion-selected');
      if (selectedSuggestion) {
        const text = selectedSuggestion.querySelector('span').textContent;
        addTag(text);
        tagsInput.value = '';
        setSuggestionsVisible(false);
      } else {
        // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –≤ –ø–æ–ª–µ
        addTag(tagsInput.value);
        tagsInput.value = '';
        setSuggestionsVisible(false);
      }
    } else if (e.key === 'ArrowDown'){
      e.preventDefault();
      const suggestions = suggestBox?.querySelectorAll('div');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = suggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const next = currentSelected.nextElementSibling;
          if (next) {
            next.classList.add('suggestion-selected');
          } else {
            suggestions[0].classList.add('suggestion-selected');
          }
        } else {
          suggestions[0].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'ArrowUp'){
      e.preventDefault();
      const suggestions = suggestBox?.querySelectorAll('div');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = suggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const prev = currentSelected.previousElementSibling;
          if (prev) {
            prev.classList.add('suggestion-selected');
          } else {
            suggestions[suggestions.length - 1].classList.add('suggestion-selected');
          }
        } else {
          suggestions[suggestions.length - 1].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'Escape'){
      setSuggestionsVisible(false);
    } else if (e.key === 'Backspace' && !tagsInput.value && currentTags.length){
      currentTags.pop();
      renderTags();
      triggerAutoSave();
    }
  });
  tagsInput?.addEventListener('input', ()=>{
    renderSuggestions(tagsInput.value);
    checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
  });
  tagsInput?.addEventListener('blur', ()=>{
    if (tagsInput.value.trim()) addTag(tagsInput.value);
    tagsInput.value = '';
    setSuggestionsVisible(false);
    checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  });

  renderTags();

  // Stream –∫–∞–∫ —Ç–µ–≥–∏
  const streamContainer = document.getElementById('ve-stream-container');
  const streamInput = /** @type {HTMLInputElement} */(document.getElementById('ve-stream-input'));
  const streamSuggestBox = document.getElementById('ve-stream-suggest');
  let currentStreams = [...streams];
  let streamHistory = [];
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ streams –∏–∑ API
  async function loadStreamsFromAPI(search = ''){
    try {
      const response = await fetch(`/api/streams?search=${encodeURIComponent(search)}`);
      if (response.ok) {
        const streams = await response.json();
        return streams;
      }
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', err);
    }
    // Fallback –∫ localStorage
    return await loadStreamsFromStorage();
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ streams –∏–∑ localStorage (fallback)
  async function loadStreamsFromStorage(){
    try {
      const stored = localStorage.getItem('stream_history');
      return stored ? JSON.parse(stored) : [];
    } catch {
      return [];
    }
  }
  
  async function saveStreamToStorage(stream){
    try {
      const history = await loadStreamsFromStorage();
      if (!history.includes(stream)) {
        const updated = [stream, ...history].slice(0, 200);
        localStorage.setItem('stream_history', JSON.stringify(updated));
      }
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è stream:', err);
    }
  }
  
  loadStreamsFromStorage().then(list => { streamHistory = list; });

  function renderStreams(){
    if (!streamContainer) return;
    streamContainer.innerHTML = '';
    currentStreams.forEach(val => {
      const chip = document.createElement('span');
      chip.className = 'tag-chip';
      chip.textContent = val;
      chip.title = '–ü–ö–ú ‚Äî —É–¥–∞–ª–∏—Ç—å';
      chip.addEventListener('contextmenu', (e)=>{
        e.preventDefault();
        currentStreams = currentStreams.filter(v => v !== val);
        renderStreams();
        triggerAutoSave();
      });
      streamContainer.appendChild(chip);
    });
  }

  async function addStream(value){
    const v = (value||'').trim();
    if (!v) return;
    if (!currentStreams.includes(v)) {
      currentStreams.push(v);
      renderStreams();
      triggerAutoSave();
    }
    await saveStreamToStorage(v);
    if (!streamHistory.includes(v)) {
      streamHistory = [v, ...streamHistory].slice(0, 200);
    }
  }

  function setStreamSuggestionsVisible(visible){
    if (!streamSuggestBox) return;
    streamSuggestBox.classList.toggle('visible', !!visible);
  }

  async function renderStreamSuggestions(query){
    if (!streamSuggestBox) return;
    const q = (query||'').trim().toLowerCase();
    const apiList = await loadStreamsFromAPI(q);
    const list = apiList.filter(h => !currentStreams.includes(h)).slice(0, 8);
    
    if (list.length === 0) { streamSuggestBox.innerHTML = ''; setStreamSuggestionsVisible(false); return; }
    streamSuggestBox.innerHTML = '';
    list.forEach(item => {
      const row = document.createElement('div');
      row.className = 'suggestion-item'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
      row.style.cssText = 'display:flex; justify-content:space-between; align-items:center; padding:4px 8px;';
      
      const textSpan = document.createElement('span');
      textSpan.textContent = item;
      textSpan.style.flex = '1';
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è stream
      const addStreamAction = (e) => {
        e.preventDefault();
        addStream(item);
        if (streamInput) streamInput.value = '';
        setStreamSuggestionsVisible(false);
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ row –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–∫–∞ –∏ Enter
      textSpan.addEventListener('mousedown', addStreamAction);
      row.addEventListener('click', addStreamAction);
      
      row.appendChild(textSpan);
      streamSuggestBox.appendChild(row);
    });
    setStreamSuggestionsVisible(true);
  }

  streamInput?.addEventListener('keydown', (e)=>{
    if (e.key === 'Enter' || e.key === ','){
      e.preventDefault();
      const selectedSuggestion = streamSuggestBox?.querySelector('.suggestion-selected');
      if (selectedSuggestion) {
        selectedSuggestion.click();
      } else {
        addStream(streamInput.value);
        streamInput.value = '';
        setStreamSuggestionsVisible(false);
      }
    } else if (e.key === 'ArrowDown'){
      e.preventDefault();
      const suggestions = streamSuggestBox?.querySelectorAll('div');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = streamSuggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const next = currentSelected.nextElementSibling;
          if (next) {
            next.classList.add('suggestion-selected');
          } else {
            suggestions[0].classList.add('suggestion-selected');
          }
        } else {
          suggestions[0].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'ArrowUp'){
      e.preventDefault();
      const suggestions = streamSuggestBox?.querySelectorAll('div');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = streamSuggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const prev = currentSelected.previousElementSibling;
          if (prev) {
            prev.classList.add('suggestion-selected');
          } else {
            suggestions[suggestions.length - 1].classList.add('suggestion-selected');
          }
        } else {
          suggestions[suggestions.length - 1].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'Escape'){
      setStreamSuggestionsVisible(false);
    } else if (e.key === 'Backspace' && !streamInput.value && currentStreams.length){
      currentStreams.pop();
      renderStreams();
      triggerAutoSave();
    }
  });
  streamInput?.addEventListener('input', ()=>{
    renderStreamSuggestions(streamInput.value);
  });
  streamInput?.addEventListener('blur', ()=>{
    if (streamInput.value.trim()) addStream(streamInput.value);
    streamInput.value = '';
    setStreamSuggestionsVisible(false);
  });

  renderStreams();

  // –ó–∞–º–µ—Ç–∫–∏/–æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  const notesRowsEl = document.getElementById('ve-notes-rows');
  const addNoteBtn = document.getElementById('ve-add-note');
  let noteItems = [];
  
  // –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ ev.notes
  if (ev.notes) {
    if (Array.isArray(ev.notes)) {
      // –ï—Å–ª–∏ notes - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
      for (let noteIndex = 0; noteIndex < ev.notes.length; noteIndex++) {
        const noteObj = ev.notes[noteIndex];
        const noteData = {
          text: noteObj.text || '',
          time: noteObj.time || '',
          person: noteObj.person || '',
          isQuestion: noteObj.is_question || false,
          due: null,
          stream: noteObj.topic || null,
          important: false,
          asap: false,
          resolved: noteObj.resolved || false,
          resolved_at: noteObj.resolved_at || null,
          id: noteObj.id || null
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫—É "${noteData.text}" –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤. allStreamsData:`, allStreamsData);
        if (noteData.text && allStreamsData && allStreamsData.length > 0) {
          const extractedTags = extractTagsFromText(noteData.text, allStreamsData);
          console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ç–µ–≥–∏ –∏–∑ –∑–∞–º–µ—Ç–∫–∏ "${noteData.text}":`, extractedTags);
          if (extractedTags.length > 0) {
            console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ç–µ–≥–∏ –≤ –∑–∞–º–µ—Ç–∫–µ "${noteData.text}":`, extractedTags);
            console.log(`‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Open Questions –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è`);
          } else {
            console.log(`‚ö†Ô∏è –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞–º–µ—Ç–∫–µ "${noteData.text}"`);
          }
        } else {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–≥–æ–≤: allStreamsData –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞`);
        }
        
        noteItems.push(noteData);
      }
    } else if (typeof ev.notes === 'string' && ev.notes.trim()) {
      // –ï—Å–ª–∏ notes - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
      const notesLines = ev.notes.split('\n').filter(line => line.trim());
      notesLines.forEach(note => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const isFormattedWithMetadata = note.includes(' | ') && (note.includes('[') || note.includes(']'));
        
        if (isFormattedWithMetadata) {
          // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [time | person | #topic], 
          // —Ç–æ —ç—Ç–æ —Å—Ç–∞—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
          noteItems.push({
            text: note, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            time: '',
            person: '',
            isQuestion: false,
            due: null,
            topic: null,
            important: false,
            asap: false
          });
        } else {
          // –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å: "[HH:MM] [Person] [#topic] Note text"
          const parsed = parseQuestionMetadata(note);
          noteItems.push({
            text: parsed.text || note,
            time: parsed.time || '',
            person: parsed.person || '',
            isQuestion: false, // –û–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            due: parsed.due || null,
            stream: parsed.stream || null,
            important: parsed.important || false,
            asap: parsed.asap || false
          });
        }
      });
    }
  }

  // –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ open_questions
  if (openQuestions && openQuestions.length > 0) {
    openQuestions.forEach(q => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const isFormattedWithMetadata = q.includes(' | ') && (q.includes('[') || q.includes(']'));
      
      if (isFormattedWithMetadata) {
        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [time | person | #topic], 
        // —Ç–æ —ç—Ç–æ —Å—Ç–∞—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        noteItems.push({
          text: q, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          time: '',
          person: '',
          isQuestion: false,
          due: null,
          topic: null,
          important: false,
          asap: false
        });
      } else {
        // –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å: "[HH:MM] [Person] [#topic] Question text"
        const parsed = parseQuestionMetadata(q);
        noteItems.push({
          text: parsed.text || q,
          time: parsed.time || '',
          person: parsed.person || '',
          isQuestion: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏, –Ω–µ –≤–æ–ø—Ä–æ—Å—ã
          due: parsed.due || null,
          stream: parsed.stream || null,
          important: parsed.important || false,
          asap: parsed.asap || false
        });
      }
    });
  }


  function renderNoteRows(){
    if (!notesRowsEl) return;
    notesRowsEl.innerHTML = '';
    noteItems.forEach((n, idx)=>{
      const row = document.createElement('div');
      row.className = 'note-row';

      // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∏–Ω—É—Ç–∞–º–∏
      const timeSelect = document.createElement('select');
      
      // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏
      const [startHour, startMin] = formatHM(startMoscow).split(':').map(Number);
      const [endHour, endMin] = formatHM(endMoscow).split(':').map(Number);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–Ω—É—Ç –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∏
      // –ù–∞—á–∏–Ω–∞–µ–º —Å 00:00, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
      const meetingDurationMinutes = (endHour * 60 + endMin) - (startHour * 60 + startMin);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
      const defaultOpt = document.createElement('option');
      defaultOpt.value = '';
      defaultOpt.textContent = '--:--';
      timeSelect.appendChild(defaultOpt);
      
      for (let minutesFromStart = 0; minutesFromStart <= meetingDurationMinutes; minutesFromStart += 5) {
        const h = Math.floor(minutesFromStart / 60);
        const m = minutesFromStart % 60;
        const timeValue = `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
        const displayValue = timeValue; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        
        const opt = document.createElement('option');
        opt.value = timeValue;
        opt.textContent = displayValue;
        if (n.time === timeValue) opt.selected = true;
        timeSelect.appendChild(opt);
      }
      
      timeSelect.addEventListener('change', ()=>{ 
        n.time = timeSelect.value; 
        triggerAutoSave();
      });
      row.appendChild(timeSelect);

      // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã —Å –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–æ–º
      const personContainer = document.createElement('div');
      personContainer.className = 'note-person-container';
      
      // Checkbox –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã (resolved —Å—Ç–∞—Ç—É—Å)
      const personCheckbox = document.createElement('input');
      personCheckbox.type = 'checkbox';
      personCheckbox.className = 'note-person-checkbox';
      personCheckbox.checked = n.resolved || false;
      personCheckbox.addEventListener('change', async () => {
        n.resolved = personCheckbox.checked;
        personCheckbox.title = n.resolved ? '–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (n.id) {
          try {
            const response = await safeFetch(`/api/meeting-notes/update/${n.id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                resolved: n.resolved
              })
            });

            if (response) {
              console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å resolved –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID ${n.id}: ${n.resolved}`);
              showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${n.resolved ? '–†–µ—à–µ–Ω–∞' : '–ù–µ —Ä–µ—à–µ–Ω–∞'}`, 'success');
            } else {
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏');
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ resolved –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID ${n.id}:`, error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            personCheckbox.checked = !n.resolved;
            n.resolved = !n.resolved;
          }
        } else {
          // –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –±–µ–∑ ID, —Å–æ–∑–¥–∞–µ–º –µ—ë –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          console.log(`‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ ID, —Å–æ–∑–¥–∞–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${n.resolved}`);
          try {
            const response = await safeFetch('/api/meeting-notes', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                event_id: ev.id,
                text: n.text,
                time: n.time,
                person: n.person,
                isQuestion: n.isQuestion,
                resolved: n.resolved
              })
            });

            if (response && response.id) {
              n.id = response.id;
              console.log(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å ID ${response.id}`);
              showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${n.resolved ? '–†–µ—à–µ–Ω–∞' : '–ù–µ —Ä–µ—à–µ–Ω–∞'}`, 'success');
            } else {
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É');
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:`, error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            personCheckbox.checked = !n.resolved;
            n.resolved = !n.resolved;
          }
        }
        triggerAutoSave();
      });
      
      const personInput = document.createElement('input');
      personInput.type = 'text';
      personInput.className = 'note-person';
      personInput.placeholder = 'Who';
      personInput.value = n.person || '';
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
      personInput.addEventListener('keydown', (e) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
        let suggestionsBox = document.getElementById('global-suggestions-box');
        let suggestions = [];
        
        if (suggestionsBox && suggestionsBox.style.display !== 'none') {
          suggestions = suggestionsBox.querySelectorAll('.suggestion-item');
        } else {
          // –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π
          suggestionsBox = personSuggestBox;
          if (suggestionsBox && suggestionsBox.style.display !== 'none') {
            suggestions = suggestionsBox.querySelectorAll('.suggestion-item');
          }
        }
        
        if (suggestions.length === 0) return;
        
        let selectedIndex = -1;
        suggestions.forEach((item, index) => {
          if (item.classList.contains('suggestion-selected')) {
            selectedIndex = index;
          }
        });
        
        switch (e.key) {
          case 'ArrowDown':
            e.preventDefault();
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            suggestions.forEach(item => item.classList.remove('suggestion-selected'));
            
            // –í—ã–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if (selectedIndex === -1 || selectedIndex === suggestions.length - 1) {
              selectedIndex = 0;
            } else {
              selectedIndex++;
            }
            suggestions[selectedIndex].classList.add('suggestion-selected');
            break;
            
          case 'ArrowUp':
            e.preventDefault();
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            suggestions.forEach(item => item.classList.remove('suggestion-selected'));
            
            // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if (selectedIndex === -1 || selectedIndex === 0) {
              selectedIndex = suggestions.length - 1;
            } else {
              selectedIndex--;
            }
            suggestions[selectedIndex].classList.add('suggestion-selected');
            break;
            
          case 'Enter':
            e.preventDefault();
            const selectedItem = suggestionsBox.querySelector('.suggestion-selected');
            if (selectedItem) {
              personInput.value = selectedItem.textContent;
              n.person = selectedItem.textContent;
              hideGlobalSuggestionsBox();
              if (personSuggestBox) {
                personSuggestBox.style.display = 'none';
              }
              triggerAutoSave();
            }
            break;
            
          case 'Escape':
            e.preventDefault();
            hideGlobalSuggestionsBox();
            if (personSuggestBox) {
              personSuggestBox.style.display = 'none';
            }
            break;
        }
      });
      
      const personSuggestBox = document.createElement('div');
      personSuggestBox.className = 'suggestions-box';
      
      personContainer.appendChild(personInput);
      personContainer.appendChild(personSuggestBox);
      row.appendChild(personContainer);
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
      async function renderPersonSuggestions(query) {
        const q = (query || '').trim();
        
        try {
          const response = await fetch(`/api/attendees?search=${encodeURIComponent(q)}`);
          if (response.ok) {
            const attendees = await response.json();
            const list = attendees.map(a => {
              if (a.name && a.surname) {
                return `${a.name} ${a.surname}`;
              } else if (a.name) {
                return a.name;
              } else {
                return a.email;
              }
            }).slice(0, 8);
            
            if (list.length === 0) {
              hideGlobalSuggestionsBox();
              return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
            const globalBox = createGlobalSuggestionsBox();
            globalBox.innerHTML = '';
            
            list.forEach((item) => {
              const row = document.createElement('div');
              row.className = 'suggestion-item';
              row.textContent = item;
              row.addEventListener('mousedown', (e) => {
                e.preventDefault();
                personInput.value = item;
                n.person = item;
                hideGlobalSuggestionsBox();
                triggerAutoSave();
              });
              globalBox.appendChild(row);
            });
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
            const rect = personInput.getBoundingClientRect();
            
            globalBox.style.top = (rect.bottom + window.scrollY) + 'px';
            globalBox.style.left = (rect.left + window.scrollX) + 'px';
            globalBox.style.width = rect.width + 'px';
            globalBox.style.display = 'block';
            
            console.log('üîç Global suggestions box positioned and shown:', {
              top: globalBox.style.top,
              left: globalBox.style.left,
              width: globalBox.style.width,
              display: globalBox.style.display,
              itemsCount: list.length
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
            const viewportHeight = window.innerHeight;
            const dropdownHeight = Math.min(200, list.length * 32);
            const bottomPosition = rect.bottom + dropdownHeight;
            
            if (bottomPosition > viewportHeight) {
              // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–Ω–∏–∑—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ—Ä—Ö—É
              globalBox.style.top = (rect.top + window.scrollY - dropdownHeight) + 'px';
            }
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      personInput.addEventListener('input', () => {
        // –ü—Ä–∏ –≤–≤–æ–¥–µ —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
        hideGlobalSuggestionsBox();
        renderPersonSuggestions(personInput.value);
      });
      
      personInput.addEventListener('focus', () => {
        // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª–µ —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
        hideGlobalSuggestionsBox();
      });
      
      personInput.addEventListener('blur', () => {
        setTimeout(() => {
          hideGlobalSuggestionsBox();
        }, 200);
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      window.addEventListener('scroll', () => {
        if (globalSuggestionsBox && globalSuggestionsBox.style.display === 'block') {
          const rect = personInput.getBoundingClientRect();
          globalSuggestionsBox.style.top = (rect.bottom + window.scrollY) + 'px';
          globalSuggestionsBox.style.left = (rect.left + window.scrollX) + 'px';
        }
      });
      
      window.addEventListener('resize', () => {
        if (globalSuggestionsBox && globalSuggestionsBox.style.display === 'block') {
          const rect = personInput.getBoundingClientRect();
          globalSuggestionsBox.style.top = (rect.bottom + window.scrollY) + 'px';
          globalSuggestionsBox.style.left = (rect.left + window.scrollX) + 'px';
          globalSuggestionsBox.style.width = rect.width + 'px';
        }
      });
      
      personInput.addEventListener('change', () => {
        n.person = personInput.value;
        triggerAutoSave();
      });

      // –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ (—á—Ç–æ —Å–∫–∞–∑–∞–ª)
      const textInput = document.createElement('textarea');
      textInput.className = 'note-input';
      textInput.placeholder = 'Said ...';
      textInput.value = n.text;
      textInput.rows = 1;
      textInput.style.cssText = 'resize: vertical; min-height: 32px;';
      textInput.addEventListener('input', ()=>{ 
        n.text = textInput.value; 
        autoResizeTextarea(textInput);
        triggerAutoSave();
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞
      textInput.addEventListener('paste', () => {
        setTimeout(() => autoResizeTextarea(textInput), 0);
      });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç —Ç–µ–≥–æ–≤
      setupTagAutocomplete(textInput);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      setupAttendeeAutocomplete(textInput);
      
      row.appendChild(textInput);

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ ASAP –∏ IMP
      const buttonsContainer = document.createElement('div');
      buttonsContainer.className = 'note-buttons-container';
      buttonsContainer.style.cssText = 'display:flex; align-items:center; gap:4px; white-space:nowrap;';
      
      // –î–æ–±–∞–≤–ª—è–µ–º checkbox –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–æ–∫
      buttonsContainer.appendChild(personCheckbox);
      
      // –ö–Ω–æ–ø–∫–∞ ASAP
      const asapBtn = document.createElement('button');
      asapBtn.type = 'button';
      asapBtn.className = 'note-asap-btn';
      asapBtn.textContent = 'ASAP';
      asapBtn.classList.toggle('active', !!n.isASAP);
      asapBtn.addEventListener('click', async () => {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        if (asapBtn.disabled) {
          console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ ASAP —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫');
          return;
        }
        
        asapBtn.disabled = true;
        asapBtn.textContent = '‚è≥';
        
        try {
          n.isASAP = !n.isASAP;
          asapBtn.classList.toggle('active', n.isASAP);
          
          // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º ASAP, —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          if (n.isASAP) {
            await createQuestionFromNote(n, idx, ev.id);
          }
          
          triggerAutoSave();
        } finally {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
          asapBtn.disabled = false;
          asapBtn.textContent = 'ASAP';
        }
      });
      
      // –ö–Ω–æ–ø–∫–∞ IMP
      const impBtn = document.createElement('button');
      impBtn.type = 'button';
      impBtn.className = 'note-imp-btn';
      impBtn.textContent = 'IMP';
      impBtn.classList.toggle('active', !!n.isIMP);
      impBtn.addEventListener('click', async () => {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        if (impBtn.disabled) {
          console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ IMP —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫');
          return;
        }
        
        impBtn.disabled = true;
        impBtn.textContent = '‚è≥';
        
        try {
          n.isIMP = !n.isIMP;
          impBtn.classList.toggle('active', n.isIMP);
          
          // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º IMP, —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          if (n.isIMP) {
            await createQuestionFromNote(n, idx, ev.id);
          }
          
          triggerAutoSave();
        } finally {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
          impBtn.disabled = false;
          impBtn.textContent = 'IMP';
        }
      });
      
      buttonsContainer.appendChild(impBtn);
      buttonsContainer.appendChild(asapBtn);
      
      row.appendChild(buttonsContainer);
      notesRowsEl.appendChild(row);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä textarea
      autoResizeTextarea(textInput);
    });
  }

  function addNoteRow(prefill = ''){
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
    const autoTime = getTimeSinceMeetingStart();
    noteItems.push({ text: prefill, time: autoTime, person: '', isQuestion: false, due: null, stream: null, important: false, asap: false });
    renderNoteRows();
  }

  addNoteBtn?.addEventListener('click', ()=> addNoteRow(''));
  if (noteItems.length === 0) addNoteRow('');
  renderNoteRows();

  // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
  const actualQuestionsRowsEl = document.getElementById('ve-actual-questions-rows');
  const addActualQuestionBtn = document.getElementById('ve-add-actual-question');
  let actualQuestions = [];
  
  console.log('üîç DEBUG: Full event data from API:', ev);
  console.log('üîç DEBUG: ev.actual_open_questions value:', ev.actual_open_questions);
  console.log('üîç DEBUG: ev.actual_open_questions type:', typeof ev.actual_open_questions);
  
  if (ev.actual_open_questions && ev.actual_open_questions.trim()) {
    const lines = ev.actual_open_questions.split('\n').filter(l => l.trim());
    console.log('üîç DEBUG: Parsed lines from actual_open_questions:', lines);
    lines.forEach(line => {
      const completed = line.startsWith('‚úì ');
      const text = completed ? line.substring(2) : (line.startsWith('‚óã ') ? line.substring(2) : line);
      actualQuestions.push({ text, completed });
    });
  } else {
    console.log('üîç DEBUG: No actual_open_questions found in event data');
  }
  
  console.log('üîç DEBUG: Final actualQuestions after parsing:', actualQuestions);
  
  function renderActualQuestions() {
    if (!actualQuestionsRowsEl) return;
    actualQuestionsRowsEl.innerHTML = '';
    
    actualQuestions.forEach((q, idx) => {
      const row = document.createElement('div');
      row.className = 'actual-question-row';
      
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.className = 'actual-question-checkbox';
      checkbox.checked = q.completed || false;
      checkbox.addEventListener('change', (e) => {
        console.log('üîç DEBUG: Checkbox changed for question', idx, 'to', e.target.checked);
        actualQuestions[idx].completed = e.target.checked;
        console.log('üîç DEBUG: actualQuestions after checkbox change:', actualQuestions);
        triggerAutoSave();
      });
      
      const textInput = document.createElement('textarea');
      textInput.className = 'actual-question-text';
      textInput.value = q.text;
      textInput.placeholder = 'Question ...';
      textInput.rows = 1;
      textInput.style.cssText = 'resize: vertical; min-height: 32px;';
      textInput.addEventListener('input', (e) => {
        console.log('üîç DEBUG: Text changed for question', idx, 'to:', e.target.value);
        actualQuestions[idx].text = e.target.value;
        console.log('üîç DEBUG: actualQuestions after text change:', actualQuestions);
        autoResizeTextarea(textInput);
        triggerAutoSave();
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞
      textInput.addEventListener('paste', () => {
        setTimeout(() => autoResizeTextarea(textInput), 0);
      });
      
      const deleteBtn = document.createElement('button');
      deleteBtn.type = 'button';
      deleteBtn.className = 'actual-question-delete-btn';
      deleteBtn.textContent = '‚úï';
      deleteBtn.addEventListener('click', () => {
        actualQuestions.splice(idx, 1);
        renderActualQuestions();
        triggerAutoSave();
      });
      
      row.appendChild(checkbox);
      row.appendChild(textInput);
      row.appendChild(deleteBtn);
      actualQuestionsRowsEl.appendChild(row);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä textarea
      autoResizeTextarea(textInput);
    });
  }
  
  function addActualQuestion(text = '') {
    console.log('üîç DEBUG: Adding new actual question with text:', text);
    actualQuestions.push({ text, completed: false });
    console.log('üîç DEBUG: actualQuestions after adding:', actualQuestions);
    renderActualQuestions();
  }
  
  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  let saveTimeout = null;
  let lastSavedData = null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const saveIndicator = document.getElementById('ve-save-indicator');
  
  function triggerAutoSave() {
    clearTimeout(saveTimeout);
    
    if (!ev || !ev.id) {
      console.log('DEBUG: triggerAutoSave - –Ω–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ ID');
      return;
    }
    
    console.log('DEBUG: triggerAutoSave –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è ID:', ev.id, 'subject:', ev.subject);
    
    if (saveIndicator) {
      saveIndicator.textContent = '–ò–∑–º–µ–Ω—è–µ—Ç—Å—è...';
      saveIndicator.style.color = '#999';
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    saveTimeout = setTimeout(async () => {
      console.log('DEBUG: triggerAutoSave - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ID:', ev.id, 'subject:', ev.subject);
      
      const titleEl = /** @type {HTMLInputElement} */(document.getElementById('ve-title'));
      const addressEl = /** @type {HTMLInputElement} */(document.getElementById('ve-location-address'));
      const recUrlEl = /** @type {HTMLInputElement} */(document.getElementById('ve-recording-url'));
      const actualQuestionsEl = /** @type {HTMLTextAreaElement} */(document.getElementById('ve-actual-questions'));
      
      let fullLocation = '';
      if (chosenPlace) {
        fullLocation = addressEl?.value ? `${chosenPlace}: ${addressEl.value}` : chosenPlace;
      } else {
        fullLocation = addressEl?.value || '';
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º open_questions –∏–∑ noteItems (—Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã) –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª—è–º–∏
      const questions = noteItems
        .filter(n => n.isQuestion && n.text.trim())
        .map(n => ({
          text: n.text.trim(),
          time: n.time || null,
          person: n.person || null,
          stream: n.stream || null,
          important: n.important || false,
          asap: n.asap || false
        }));
      
      console.log(`üîÑ –°–æ–∑–¥–∞–µ–º Open Questions –∏–∑ –∑–∞–º–µ—Ç–æ–∫:`, questions);
      
      console.log(`üìù –í—Å–µ–≥–æ Open Questions –∏–∑ –∑–∞–º–µ—Ç–æ–∫: ${questions.length}`, questions);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª—è–º–∏
      const allNotes = noteItems
        .filter(n => n.text.trim())
        .map(n => ({
          id: n.id || null,  // –í–∫–ª—é—á–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
          text: n.text.trim(),
          time: n.time || null,
          person: n.person || null,
          stream: n.stream || null,
          isASAP: n.isASAP || false,
          isIMP: n.isIMP || false
        }));
      
      // –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –±—ã–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
      if (allNotes.length > 0) {
        console.log('üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:', allNotes);
      }

      console.log('DEBUG: noteItems:', noteItems);
      console.log('DEBUG: allNotes:', allNotes);
      console.log('DEBUG: recUrlEl?.value:', recUrlEl?.value);

      // –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å—Ç—Ä–æ–∫—É —Å –º–∞—Ä–∫–µ—Ä–æ–º actual-question
      console.log('üîç DEBUG: actualQuestions before processing:', actualQuestions);
      const actualQuestionsText = actualQuestions
        .filter(q => q.text.trim())
        .map(q => `${q.completed ? '‚úì ' : '‚óã '}${q.text.trim()}`)
        .join('\n');
      console.log('üîç DEBUG: actualQuestionsText:', actualQuestionsText);
      
      // –î–æ–±–∞–≤–ª—è–µ–º actual-question –º–∞—Ä–∫–µ—Ä –≤ notes
      let notesWithActualQuestions = '';
      if (actualQuestionsText) {
        notesWithActualQuestions = `actual-question:${actualQuestionsText}`;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
      const startTimeEl = document.getElementById('ve-start-time');
      const endTimeEl = document.getElementById('ve-end-time');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è
      console.log('üîç DEBUG: ev.start =', ev.start, 'ev.end =', ev.end);
      const originalStartDate = utcToMoscow(ev.start);
      const originalEndDate = utcToMoscow(ev.end);
      const originalStartTime = formatHM(originalStartDate);
      const originalEndTime = formatHM(originalEndDate);
      
      const newStartTime = startTimeEl?.value || originalStartTime;
      const newEndTime = endTimeEl?.value || originalEndTime;
      
      let newStartDate = originalStartDate;
      let newEndDate = originalEndDate;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      const timeChanged = newStartTime !== originalStartTime || newEndTime !== originalEndTime;
      
      if (timeChanged) {
        console.log('DEBUG: –í—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º:', {
          originalStart: originalStartTime,
          originalEnd: originalEndTime,
          newStart: newStartTime,
          newEnd: newEndTime
        });
        
        const [startHour, startMinute] = newStartTime.split(':').map(Number);
        const [endHour, endMinute] = newEndTime.split(':').map(Number);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–∞—Ç—ã
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º utcToMoscow –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const eventDate = utcToMoscow(ev.start);
        const year = eventDate.getFullYear();
        const month = eventDate.getMonth();
        const day = eventDate.getDate();
        
        newStartDate = new Date(year, month, day, startHour, startMinute, 0, 0);
        newEndDate = new Date(year, month, day, endHour, endMinute, 0, 0);
        
        console.log('DEBUG: –ù–æ–≤—ã–µ –¥–∞—Ç—ã:', {
          newStartDate: newStartDate.toISOString(),
          newEndDate: newEndDate.toISOString()
        });
      } else {
        console.log('DEBUG: –í—Ä–µ–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ');
      }
      
      const subject = titleEl?.value?.trim() || ev.subject;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –ø—É—Å—Ç–æ–µ
      if (!subject) {
        console.log('DEBUG: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        if (saveIndicator) {
          saveIndicator.textContent = '–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º';
          saveIndicator.style.color = '#ff4444';
        }
        return;
      }
      
      const updatedEvent = {
        subject: subject,
        start: toMoscowISOString(newStartDate),
        end: toMoscowISOString(newEndDate),
        location: fullLocation,
        attendees: currentTags.slice(),
        stream: currentStreams.slice(),
        notes: allNotes, // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        recording_url: recUrlEl?.value || '',
        open_questions: questions,
        actual_open_questions: actualQuestionsText
      };

      console.log('üîç DEBUG: updatedEvent before API call:', updatedEvent);
      console.log('üîç DEBUG: actual_open_questions in updatedEvent:', updatedEvent.actual_open_questions);
      console.log('DEBUG: recUrlEl?.value:', recUrlEl?.value);
      console.log('DEBUG: recording_url –≤ updatedEvent:', updatedEvent.recording_url);
      console.log('üîç DEBUG: timeChanged =', timeChanged, 'ev.start =', ev.start, 'updatedEvent.start =', updatedEvent.start);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const currentDataString = JSON.stringify(updatedEvent);
      if (lastSavedData === currentDataString) {
        console.log('üîç DEBUG: –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        if (saveIndicator) {
          saveIndicator.textContent = '‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
          saveIndicator.style.color = '#28a745';
        }
        return;
      }

      try {
        const response = await fetch(`/api/events/${ev.id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedEvent)
        });

        if (response.ok) {
          console.log('‚úì –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
          lastSavedData = currentDataString;
          
          if (saveIndicator) {
            saveIndicator.textContent = '‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
            saveIndicator.style.color = '#4CAF50';
            setTimeout(() => {
              if (saveIndicator) saveIndicator.textContent = '';
            }, 2000);
          }
          
          Object.assign(ev, updatedEvent);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º noteItems —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
          if (response.ok) {
            try {
              const responseData = await response.json();
              if (responseData && responseData.notes) {
                console.log('üîç DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º noteItems —Å ID –∏–∑ API:', responseData.notes);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º noteItems —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
                noteItems.forEach((noteItem, index) => {
                  if (responseData.notes[index]) {
                    noteItem.id = responseData.notes[index].id;
                    noteItem.resolved = responseData.notes[index].resolved || false;
                    noteItem.resolved_at = responseData.notes[index].resolved_at || null;
                    console.log(`üîç DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ ${index} —Å ID ${noteItem.id}`);
                  }
                });
                
                // –ù–ï –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ID –∑–∞–ø–∏—Å–æ–∫:', error);
            }
          }
          
          await loadEventsFromAPI();
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º Open Questions –∏–∑ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–∞–º–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Open Questions...');
          await processEventNotesForAutoOpenQuestions(ev);
        } else {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          const errorText = response.status === 409 
            ? '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.'
            : `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (${response.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
          showNotification(errorText, 'error');
          
          if (saveIndicator) {
            saveIndicator.textContent = '‚úó –û—à–∏–±–∫–∞';
            saveIndicator.style.color = '#ff4444';
          }
        }
      } catch(err) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', err);
        if (saveIndicator) {
          saveIndicator.textContent = '‚úó –û—à–∏–±–∫–∞';
          saveIndicator.style.color = '#ff4444';
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "Get participants" –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      checkAndShowCopyAttendeesButtonForView();
    }, 3000);
  }

  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫ –ø–æ–ª—è–º
  document.getElementById('ve-title')?.addEventListener('input', () => {
    triggerAutoSave();
    checkAndShowCopyLinkButtonForView();
  });
  document.getElementById('ve-location-address')?.addEventListener('input', triggerAutoSave);
  document.getElementById('ve-recording-url')?.addEventListener('input', triggerAutoSave);
  document.getElementById('ve-recording-url')?.addEventListener('blur', triggerAutoSave);
  document.getElementById('ve-start-time')?.addEventListener('change', triggerAutoSave);
  document.getElementById('ve-end-time')?.addEventListener('change', triggerAutoSave);
  // ve-actual-questions —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ actualQuestions array
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Delete
  const deleteBtn = document.getElementById('delete-event-btn');
  if (deleteBtn) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    deleteBtn.addEventListener('click', async (event) => {
    
    const eventTitle = ev.subject;
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
    const deletePhrase = prompt(
      `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\nDelete ${eventTitle}`
    );
    
    if (deletePhrase !== `Delete ${eventTitle}`) {
      alert('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    try {
      const response = await fetch(`/api/events/${ev.id}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        console.log(`‚úì –°–æ–±—ã—Ç–∏–µ "${eventTitle}" —É–¥–∞–ª–µ–Ω–æ`);
        alert(`–°–æ–±—ã—Ç–∏–µ "${eventTitle}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        eventDetails.innerHTML = '';
        await loadEventsFromAPI();
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
    }
  });
  } else {
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    const eventBlock = document.querySelector('.event-block');
    if (eventBlock) {
      eventBlock.addEventListener('click', async (event) => {
        if (event.target && event.target.id === 'delete-event-btn') {
          
          const eventTitle = ev.subject;
          
          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
          const deletePhrase = prompt(
            `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\nDelete ${eventTitle}`
          );
          
          if (deletePhrase !== `Delete ${eventTitle}`) {
            alert('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.');
            return;
          }
          
          // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
          try {
            const response = await fetch(`/api/events/${ev.id}`, {
              method: 'DELETE'
            });
            
            if (response.ok) {
              console.log(`‚úì –°–æ–±—ã—Ç–∏–µ "${eventTitle}" —É–¥–∞–ª–µ–Ω–æ`);
              alert(`–°–æ–±—ã—Ç–∏–µ "${eventTitle}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);
              
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
              eventDetails.innerHTML = '';
              await loadEventsFromAPI();
            } else {
              const errorText = await response.text();
              console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', response.status, errorText);
              alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${response.status}`);
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
          }
        }
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Reschedule
  document.getElementById('reschedule-event-btn')?.addEventListener('click', () => {
    showRescheduleModal(ev);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  document.getElementById('ve-copy-attendees-btn')?.addEventListener('click', async () => {
    console.log('üîò –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–ù–û–ü–ö–£ "–ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"');
    
    const subject = document.getElementById('ve-title')?.value.trim();
    if (!subject) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      alert('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      return;
    }
    
    console.log('üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', subject);
    
    const copyBtn = document.getElementById('ve-copy-attendees-btn');
    const originalText = copyBtn.textContent;
    copyBtn.textContent = '‚è≥';
    copyBtn.disabled = true;
    
    console.log('üîÑ –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...');
    
    try {
      const previousAttendees = await copyAttendeesFromPreviousEvent(subject);
      console.log('üë• –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', previousAttendees ? `–ù–∞–π–¥–µ–Ω–æ ${previousAttendees.length}` : '–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
      
      if (previousAttendees && previousAttendees.length > 0) {
        console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', previousAttendees);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        const attendeesContainer = document.getElementById('ve-tags-container');
        if (attendeesContainer) {
          console.log('üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', attendeesContainer.querySelectorAll('.tag').length);
          
          // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          attendeesContainer.innerHTML = '';
          currentTags = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ currentTags
          
          // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
          previousAttendees.forEach(attendee => {
            const tag = document.createElement('span');
            tag.className = 'tag';
            tag.textContent = attendee;
            tag.style.cssText = 'background: #e3f2fd; color: #1976d2; padding: 4px 8px; border-radius: 12px; margin: 2px; display: inline-block; font-size: 0.85em;';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            tag.addEventListener('contextmenu', (e) => {
              e.preventDefault();
              tag.remove();
              // –£–¥–∞–ª—è–µ–º –∏–∑ currentTags
              currentTags = currentTags.filter(t => t !== attendee);
              triggerAutoSave();
              checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            });
            
            attendeesContainer.appendChild(tag);
            currentTags.push(attendee); // –î–æ–±–∞–≤–ª—è–µ–º –≤ currentTags
          });
          
          console.log('üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', attendeesContainer.querySelectorAll('.tag').length);
          console.log('üîç currentTags –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', currentTags);
        }
        
        console.log('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', previousAttendees);
        triggerAutoSave(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        console.log('üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        
        console.log('üîç –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...');
        checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      } else {
        console.log('‚ùå –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        alert('–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
    } finally {
      copyBtn.textContent = originalText;
      copyBtn.disabled = false;
      console.log('üîò –ö–Ω–æ–ø–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  });
  document.getElementById('ve-copy-link-btn')?.addEventListener('click', async () => {
    console.log('üîò –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–ù–û–ü–ö–£ "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"');
    
    const subject = document.getElementById('ve-title')?.value.trim();
    if (!subject) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      alert('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      return;
    }
    
    console.log('üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', subject);
    
    const copyBtn = document.getElementById('ve-copy-link-btn');
    const originalText = copyBtn.textContent;
    copyBtn.textContent = '‚è≥';
    copyBtn.disabled = true;
    
    console.log('üîÑ –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Å—Å—ã–ª–∫–æ–π...');
    
    try {
      const previousLink = await copyLinkFromPreviousEvent(subject);
      console.log('üîó –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏:', previousLink ? '–ù–∞–π–¥–µ–Ω–∞' : '–ù–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      if (previousLink) {
        console.log('üìã –ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:', previousLink.substring(0, 100) + '...');
        
        const addressInput = document.getElementById('ve-location-address');
        if (addressInput) {
          console.log('üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞ –î–û –≤—Å—Ç–∞–≤–∫–∏:', addressInput.value.substring(0, 50) + '...');
          
          addressInput.value = previousLink;
          console.log('üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞ –ü–û–°–õ–ï –≤—Å—Ç–∞–≤–∫–∏:', addressInput.value.substring(0, 50) + '...');
          
          addressInput.style.borderColor = '#4CAF50';
          setTimeout(() => {
            addressInput.style.borderColor = '#ccc';
          }, 2000);
        }
        
        console.log('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', previousLink);
        triggerAutoSave(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        console.log('üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
        
        console.log('üîç –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...');
        checkAndShowCopyLinkButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      } else {
        console.log('‚ùå –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É');
        alert('–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏');
    } finally {
      copyBtn.textContent = originalText;
      copyBtn.disabled = false;
      console.log('üîò –ö–Ω–æ–ø–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  setTimeout(() => {
    console.log('üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ù–û–ü–ö–ò –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–û–°–ú–û–¢–†–ê');
    checkAndShowCopyLinkButtonForView();
  }, 100);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Add question" –≤ —Å–µ–∫—Ü–∏–∏ Actual Open Questions
  if (addActualQuestionBtn) {
    addActualQuestionBtn.addEventListener('click', () => {
      addActualQuestion('');
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ actual questions
  renderActualQuestions();
}

// –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
function showCreateForm(slotEl){
  const slotDateStr = slotEl.dataset.date; // YYYY-MM-DD
  const startTimeStr = slotEl.dataset.start; // HH:MM
  const endTimeStr = slotEl.dataset.end; // HH:MM

  console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Å–ª–æ—Ç–∞:', {
    date: slotDateStr,
    start: startTimeStr,
    end: endTimeStr
  });

  window.startISO = createMoscowTime(slotDateStr, startTimeStr);
  window.endISO = createMoscowTime(slotDateStr, endTimeStr);
  
  console.log('ISO –¥–∞—Ç—ã:', {
    start: window.startISO,
    end: window.endISO
  });

  eventDetails.innerHTML = `
    <div class="event-block">
      <form id="create-event-form">
        <input type="text" id="ce-title" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏" required style="width:100%; font-size:1.1rem; padding:8px; border-radius:6px; border:1px solid #ccc;" />

        <div style="margin-top:10px; display:flex; align-items:center; gap:12px; justify-content:space-between;">
          <span id="ce-time">${formatDateOnly(startISO)} ¬∑ ${formatHM(startISO)} ‚Äì ${formatHM(endISO)}</span>
          <div id="ce-location-buttons" style="display:flex; gap:6px; flex-wrap:wrap;">
            <button type="button" class="loc-btn" data-value="Zoom" title="Zoom - popular video conferencing platform">
              <img src="logos_pics/Zoom.svg?v=3" width="20" height="20" alt="Zoom" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">Z</span>
            </button>
            <button type="button" class="loc-btn" data-value="Teams" title="Microsoft Teams - video conferencing and collaboration platform">
              <img src="logos_pics/teams.png?v=1" width="20" height="20" alt="Microsoft Teams" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">T</span>
            </button>
            <button type="button" class="loc-btn" data-value="Google Meet" title="Google Meet - video conferencing by Google">
              <img src="logos_pics/meet.png?v=1" width="20" height="20" alt="Google Meet" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">G</span>
            </button>
            <button type="button" class="loc-btn" data-value="–¢–µ–ª–µ–º–æ—Å—Ç" title="Yandex Telemost - video conferencing for large groups">
              <img src="logos_pics/telemost.jpeg?v=1" width="20" height="20" alt="Yandex Telemost" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">Y</span>
            </button>
            <button type="button" class="loc-btn" data-value="–¢–µ–ª–µ–≥—Ä–∞–º" title="Telegram - messenger for quick communication">
              <img src="logos_pics/telegram.png?v=1" width="20" height="20" alt="Telegram" style="object-fit: contain;" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
              <span style="display:none; font-size:12px;">T</span>
            </button>
            <button type="button" class="loc-btn" data-value="–î—Ä—É–≥–æ–µ" title="Other - choose another way to conduct the meeting">Other</button>
          </div>
        </div>

        <div style="margin-top:8px; display: flex; gap: 8px; align-items: center;">
          <input type="text" id="ce-location-address" placeholder="Link for the meeting" style="flex: 1; padding:8px; border-radius:6px; border:1px solid #ccc;" />
          <button type="button" id="ce-copy-link-btn" title="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–±—ã—Ç–∏—è" style="padding: 8px 12px; background: #4285f4; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 11px; display: none;">üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É</button>
        </div>

        <div style="display:block; margin-top:10px;">
          <div style="margin-bottom:6px; font-weight:bold;">Participants</div>
          <div class="tag-input" id="ce-attendees-tags">
            <div class="tags" id="ce-tags-container"></div>
            <input type="text" id="ce-attendees-input" placeholder="Start to input name or e-mail..." />
            <div class="suggestions" id="ce-attendees-suggest"></div>
          </div>
        </div>

        <div style="display:block; margin-top:10px;">
          <div style="margin-bottom:6px; font-weight:bold;">Stream</div>
          <div class="tag-input" id="ce-stream-tags">
            <div class="tags" id="ce-stream-container"></div>
            <input type="text" id="ce-stream-input" placeholder="Start to input tag or stream..." />
            <div class="suggestions" id="ce-stream-suggest"></div>
          </div>
        </div>
         <div class="section-box">
           <div class="section-title" onclick="toggleSection('ce-actual-questions-section')">
             <span class="section-toggle">‚ñº</span>
             Actual open questions for the meeting
           </div>
           <div class="section-content actual-questions-section" id="ce-actual-questions-section">
             <button type="button" id="ce-add-actual-question" class="add-note-btn">Add question</button>
             <div id="ce-actual-questions-rows"></div>
           </div>
         </div>
         <div class="section-box">
           <div class="section-title" onclick="toggleSection('ce-notes-section')">
             <span class="section-toggle">‚ñº</span>
             Notes
           </div>
           <div class="section-content notes-section" id="ce-notes-section">
             <button type="button" id="ce-add-note" class="add-note-btn">Add row</button>
             <div id="ce-notes-rows"></div>
           </div>
         </div>
         <div style="display:block; margin-top:12px;">
           <div style="margin-bottom:6px; font-weight:bold;">Meeting materials</div>
           <input type="url" id="ce-recording-url" placeholder="Link to recording...." style="width:100%; padding:8px; border-radius:6px; border:1px solid #ccc;" />
         </div>
        <div style="margin-top:12px; display:flex; gap:8px;">
          <button type="button" id="ce-cancel" style="display:none;">–û—Ç–º–µ–Ω–∞</button>
        </div>
      </form>
    </div>
  `;

  const form = document.getElementById('create-event-form');
  const cancelBtn = document.getElementById('ce-cancel');
  cancelBtn?.addEventListener('click', ()=>{ eventDetails.innerHTML = ''; });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
  setTimeout(() => {
    checkAndShowCopyLinkButton();
  }, 100);

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ —Å—Å—ã–ª–∫–µ
  function detectPlatform(url) {
    const urlLower = url.toLowerCase();
    if (urlLower.includes('zoom.us') || urlLower.includes('zoom.com')) {
      return 'Zoom';
    }
    if (urlLower.includes('teams.microsoft.com') || urlLower.includes('teams.live.com')) {
      return 'Teams';
    }
    if (urlLower.includes('meet.google.com') || urlLower.includes('google.com/meet')) {
      return 'Google Meet';
    }
    if (urlLower.includes('telemost') || urlLower.includes('telemost.ru') || urlLower.includes('telemost.by')) {
      return '–¢–µ–ª–µ–º–æ—Å—Ç';
    }
    if (urlLower.includes('t.me') || urlLower.includes('telegram.me') || urlLower.includes('telegram.org')) {
      return '–¢–µ–ª–µ–≥—Ä–∞–º';
    }
    return '–î—Ä—É–≥–æ–µ';
  }
  
  // –í—ã–±–æ—Ä –º–µ—Å—Ç–∞
  let chosenPlace = '';
  const locButtons = Array.from(document.querySelectorAll('#ce-location-buttons .loc-btn'));
  const addressInput = /** @type {HTMLInputElement} */(document.getElementById('ce-location-address'));
  let editBtn = null;
  
  function updateLocationButtons() {
    const address = addressInput?.value || '';
    const hasLink = address.trim().length > 0;
    
    console.log('üîç DEBUG: updateLocationButtons (create) called', { address, hasLink, chosenPlace });
    
    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if (hasLink && !chosenPlace) {
      chosenPlace = detectPlatform(address);
      console.log('üîç DEBUG: Auto-detected platform (create):', chosenPlace);
    } else if (hasLink) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–º–µ–Ω—è–ª–∞—Å—å –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
      const detectedPlatform = detectPlatform(address);
      if (detectedPlatform !== chosenPlace && detectedPlatform !== '–î—Ä—É–≥–æ–µ') {
        chosenPlace = detectedPlatform;
        console.log('üîç DEBUG: Platform changed to (create):', chosenPlace);
      }
    }
    
    locButtons.forEach(btn => {
      const btnType = btn.dataset.value;
      
      if (btnType === chosenPlace && hasLink) {
        // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π - —Å–∏–Ω—è—è —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
        btn.style.display = 'inline-block';
        btn.style.background = '#0078d4';
        btn.style.color = 'white';
        btn.style.fontWeight = 'bold';
        btn.style.cursor = 'pointer';
        btn.style.paddingRight = '8px';
      } else if (btnType === chosenPlace) {
        // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –±–µ–∑ —Å—Å—ã–ª–∫–∏ - –æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è
        btn.style.display = 'inline-block';
        btn.classList.add('active');
        btn.style.background = '';
        btn.style.color = '';
        btn.style.fontWeight = '';
        btn.style.cursor = '';
        btn.style.paddingRight = '';
      } else {
        // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - —Å–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –∏ —ç—Ç–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–ª–∏ Other
        const communicationPlatforms = ['Zoom', 'Teams', 'Google Meet', '–¢–µ–ª–µ–º–æ—Å—Ç', '–¢–µ–ª–µ–≥—Ä–∞–º'];
        if (hasLink && (communicationPlatforms.includes(btnType) || btnType === '–î—Ä—É–≥–æ–µ')) {
          btn.style.display = 'none';
        } else {
          btn.style.display = 'inline-block';
          btn.classList.remove('active');
          btn.style.background = '';
          btn.style.color = '';
          btn.style.fontWeight = '';
          btn.style.cursor = '';
          btn.style.paddingRight = '';
        }
      }
    });
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π Edit
    if (hasLink && chosenPlace) {
      if (!editBtn) {
        editBtn = document.createElement('span');
        editBtn.textContent = '‚úèÔ∏è';
        editBtn.style.cssText = 'margin-left:8px; font-size:0.7em; cursor:pointer; margin-top:7px;';
        editBtn.addEventListener('click', ()=>{
          if (addressInput) {
            addressInput.style.display = 'block';
            addressInput.focus();
          }
        });
        document.getElementById('ce-location-buttons')?.appendChild(editBtn);
      }
      editBtn.style.display = 'inline';
    } else {
      if (editBtn) editBtn.style.display = 'none';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
    if (addressInput) {
      if (chosenPlace && hasLink) {
        addressInput.style.display = 'none';
      } else {
        addressInput.style.display = 'block';
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    setTimeout(() => {
      checkAndShowCopyLinkButton();
    }, 50);
  }
  
  locButtons.forEach(btn => {
    btn.addEventListener('click', ()=>{
      const btnType = btn.dataset.value;
      const address = addressInput?.value || '';
      const hasLink = address.trim().length > 0;
      
      // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á—É
      if (btnType === chosenPlace && hasLink) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤—Å—Ç—Ä–µ—á–∏
        meetingStartTime = new Date();
        console.log('üöÄ –í—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤', meetingStartTime.toLocaleTimeString());
        window.open(address, '_blank');
        return;
      }
      
      // –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π
      locButtons.forEach(b=> b.classList.remove('active'));
      btn.classList.add('active');
      chosenPlace = btn.dataset.value || '';
      
      // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      hideOtherLocationButtons(btn);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞
      btn.addEventListener('dblclick', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        btn.classList.remove('active');
        chosenPlace = '';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞
        showAllLocationButtons();
        
        updateLocationButtons();
      });
      
      updateLocationButtons();
    });
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞
  addressInput?.addEventListener('input', ()=>{
    updateLocationButtons();
  });
  
  // –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
  addressInput?.addEventListener('blur', ()=>{
    updateLocationButtons();
  });

  // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–∫ —Ç–µ–≥–∏
  const tagsContainer = document.getElementById('ce-tags-container');
  const tagsInput = /** @type {HTMLInputElement} */(document.getElementById('ce-attendees-input'));
  const suggestBox = document.getElementById('ce-attendees-suggest');
  /** @type {string[]} */
  currentTags = []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

  let history = [];
  
  console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è currentTags –≤ showCreateForm:', currentTags);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ API
  async function loadAttendeesFromAPI(search = ''){
    try {
      const response = await fetch(`/api/attendees?search=${encodeURIComponent(search)}`);
      if (response.ok) {
        const attendees = await response.json();
        return attendees.map(a => {
          let displayName;
          if (a.name && a.surname) {
            displayName = `${a.name} ${a.surname}`;
          } else if (a.name) {
            displayName = a.name;
          } else {
            displayName = a.email;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
          return {
            displayName: displayName,
            email: a.email,
            lastUsed: a.last_used,
            useCount: a.use_count,
            id: a.id
          };
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
        return deduplicateAttendees(attendees);
      }
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
    }
    return [];
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
  function parseAttendeeInput(input) {
    const trimmed = input.trim();
    
    // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç @ - —ç—Ç–æ email
    if (trimmed.includes('@')) {
      return {
        email: trimmed,
        name: null,
        surname: null
      };
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    const parts = trimmed.split(/\s+/).filter(part => part.length > 0);
    
    if (parts.length === 1) {
      // –û–¥–Ω–æ —Å–ª–æ–≤–æ - —ç—Ç–æ name
      return {
        email: trimmed, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ email –¥–ª—è –ø–æ–∏—Å–∫–∞
        name: trimmed,
        surname: null
      };
    } else if (parts.length === 2) {
      // –î–≤–∞ —Å–ª–æ–≤–∞ - name –∏ surname
      return {
        email: trimmed, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ email –¥–ª—è –ø–æ–∏—Å–∫–∞
        name: parts[0],
        surname: parts[1]
      };
    } else {
      // –ë–æ–ª—å—à–µ –¥–≤—É—Ö —Å–ª–æ–≤ - —Å—á–∏—Ç–∞–µ–º –≤—Å–µ name
      return {
        email: trimmed, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ email –¥–ª—è –ø–æ–∏—Å–∫–∞
        name: trimmed,
        surname: null
      };
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ API
  async function saveAttendeeToAPI(input){
    try {
      const parsed = parseAttendeeInput(input);
      console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', { input, parsed });
      
      const params = new URLSearchParams();
      params.append('email', parsed.email);
      if (parsed.name) params.append('name', parsed.name);
      if (parsed.surname) params.append('surname', parsed.surname);
      
      await fetch(`/api/attendees?${params.toString()}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', err);
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ API
  async function deleteAttendeeFromAPI(email){
    try {
      await fetch(`/api/attendees/${encodeURIComponent(email)}`, {
        method: 'DELETE'
      });
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', err);
    }
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
  loadAttendeesFromAPI().then(list => { history = list; });

  function renderTags(){
    if (!tagsContainer) return;
    tagsContainer.innerHTML = '';
    currentTags.forEach(val => {
      const chip = document.createElement('span');
      chip.className = 'tag-chip';
      chip.textContent = val;
      chip.title = '–ü–ö–ú ‚Äî —É–¥–∞–ª–∏—Ç—å';
      chip.addEventListener('contextmenu', (e)=>{
        e.preventDefault();
        currentTags = currentTags.filter(v => v !== val);
        renderTags();
        checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
      });
      tagsContainer.appendChild(chip);
    });
  }

  async function addTag(value){
    const v = (value||'').trim();
    if (!v) return;
    if (!currentTags.includes(v)) {
      currentTags.push(v);
      renderTags();
      renderNoteRows(); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await saveAttendeeToAPI(v);
    if (!history.includes(v)) {
      history = [v, ...history].slice(0, 200);
    }
  }

  function setSuggestionsVisible(visible){
    if (!suggestBox) return;
    suggestBox.classList.toggle('visible', !!visible);
  }

  async function renderSuggestions(query){
    if (!suggestBox) return;
    const q = (query||'').trim();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API —Å –ø–æ–∏—Å–∫–æ–º
    const apiList = await loadAttendeesFromAPI(q);
    const list = apiList.filter(h => !currentTags.includes(h.displayName)).slice(0, 8);
    
    if (list.length === 0) { suggestBox.innerHTML = ''; setSuggestionsVisible(false); return; }
    suggestBox.innerHTML = '';
    list.forEach((item, index) => {
      const row = document.createElement('div');
      row.style.cssText = 'display:flex; justify-content:space-between; align-items:center; padding:4px 8px;';
      
      const textSpan = document.createElement('span');
      textSpan.textContent = item.displayName;
      textSpan.style.flex = '1';
      textSpan.addEventListener('mousedown', (e)=>{ // mousedown —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–æ –¥–æ blur –∏–Ω–ø—É—Ç–∞
        e.preventDefault();
        addTag(item.displayName);
        if (tagsInput) tagsInput.value = '';
        setSuggestionsVisible(false);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
      const lastUsedSpan = document.createElement('span');
      if (item.lastUsed) {
        const lastUsedDate = new Date(item.lastUsed);
        const now = new Date();
        const diffDays = Math.floor((now - lastUsedDate) / (1000 * 60 * 60 * 24));
        
        let lastUsedText;
        if (diffDays === 0) {
          lastUsedText = '—Å–µ–≥–æ–¥–Ω—è';
        } else if (diffDays === 1) {
          lastUsedText = '–≤—á–µ—Ä–∞';
        } else if (diffDays < 7) {
          lastUsedText = `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
        } else if (diffDays < 30) {
          lastUsedText = `${Math.floor(diffDays / 7)} –Ω–µ–¥. –Ω–∞–∑–∞–¥`;
        } else {
          lastUsedText = `${Math.floor(diffDays / 30)} –º–µ—Å. –Ω–∞–∑–∞–¥`;
        }
        
        lastUsedSpan.textContent = lastUsedText;
        lastUsedSpan.style.cssText = 'font-size:0.8em; color:#666; margin-left:8px;';
        lastUsedSpan.title = `–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${lastUsedDate.toLocaleDateString('ru-RU')}`;
      }
      
      const deleteBtn = document.createElement('span');
      deleteBtn.textContent = '‚úï';
      deleteBtn.style.cssText = 'cursor:pointer; color:#999; padding:0 4px; display:none; font-weight:bold;';
      deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏';
      deleteBtn.addEventListener('mousedown', async (e)=>{
        e.preventDefault();
        e.stopPropagation();
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await deleteAttendeeFromAPI(item.email);
        history = history.filter(h => h !== item.displayName);
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        await renderSuggestions(query);
      });
      
      row.addEventListener('mouseenter', ()=> deleteBtn.style.display = 'inline');
      row.addEventListener('mouseleave', ()=> deleteBtn.style.display = 'none');
      
      row.appendChild(textSpan);
      if (lastUsedSpan.textContent) {
        row.appendChild(lastUsedSpan);
      }
      row.appendChild(deleteBtn);
      suggestBox.appendChild(row);
    });
    setSuggestionsVisible(true);
  }

  tagsInput?.addEventListener('keydown', (e)=>{
    if (e.key === 'Enter' || e.key === ','){
      e.preventDefault();
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ suggestions, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      const selectedSuggestion = suggestBox?.querySelector('.suggestion-selected');
      if (selectedSuggestion) {
        const text = selectedSuggestion.querySelector('span').textContent;
        addTag(text);
        tagsInput.value = '';
        setSuggestionsVisible(false);
      } else {
        // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –≤ –ø–æ–ª–µ
        addTag(tagsInput.value);
        tagsInput.value = '';
        setSuggestionsVisible(false);
      }
    } else if (e.key === 'ArrowDown'){
      e.preventDefault();
      const suggestions = suggestBox?.querySelectorAll('div');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = suggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const next = currentSelected.nextElementSibling;
          if (next) {
            next.classList.add('suggestion-selected');
          } else {
            suggestions[0].classList.add('suggestion-selected');
          }
        } else {
          suggestions[0].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'ArrowUp'){
      e.preventDefault();
      const suggestions = suggestBox?.querySelectorAll('div');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = suggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const prev = currentSelected.previousElementSibling;
          if (prev) {
            prev.classList.add('suggestion-selected');
          } else {
            suggestions[suggestions.length - 1].classList.add('suggestion-selected');
          }
        } else {
          suggestions[suggestions.length - 1].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'Escape'){
      setSuggestionsVisible(false);
    } else if (e.key === 'Backspace' && !tagsInput.value && currentTags.length){
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ
      currentTags.pop();
      renderTags();
    }
  });
  tagsInput?.addEventListener('input', ()=>{
    renderSuggestions(tagsInput.value);
    checkAndShowCopyAttendeesButtonForView(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
  });
  tagsInput?.addEventListener('blur', ()=>{
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ —É—Ö–æ–¥–µ —Ñ–æ–∫—É—Å–∞
    if (tagsInput.value.trim()) addTag(tagsInput.value);
    tagsInput.value = '';
    setSuggestionsVisible(false);
  });

  // Stream –∫–∞–∫ —Ç–µ–≥–∏
  const streamContainer = document.getElementById('ce-stream-container');
  const streamInput = /** @type {HTMLInputElement} */(document.getElementById('ce-stream-input'));
  const streamSuggestBox = document.getElementById('ce-stream-suggest');
  let currentStreams = [];
  let streamHistory = [];
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ streams –∏–∑ API
  async function loadStreamsFromAPI(search = ''){
    try {
      const response = await fetch(`/api/streams?search=${encodeURIComponent(search)}`);
      if (response.ok) {
        const streams = await response.json();
        return streams;
      }
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', err);
    }
    // Fallback –∫ localStorage
    return await loadStreamsFromStorage();
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ streams –∏–∑ localStorage (fallback)
  async function loadStreamsFromStorage(){
    try {
      const stored = localStorage.getItem('stream_history');
      return stored ? JSON.parse(stored) : [];
    } catch {
      return [];
    }
  }
  
  async function saveStreamToStorage(stream){
    try {
      const history = await loadStreamsFromStorage();
      if (!history.includes(stream)) {
        const updated = [stream, ...history].slice(0, 200);
        localStorage.setItem('stream_history', JSON.stringify(updated));
      }
    } catch(err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è stream:', err);
    }
  }
  
  loadStreamsFromStorage().then(list => { streamHistory = list; });

  function renderStreams(){
    if (!streamContainer) return;
    streamContainer.innerHTML = '';
    currentStreams.forEach(val => {
      const chip = document.createElement('span');
      chip.className = 'tag-chip';
      chip.textContent = val;
      chip.title = '–ü–ö–ú ‚Äî —É–¥–∞–ª–∏—Ç—å';
      chip.addEventListener('contextmenu', (e)=>{
        e.preventDefault();
        currentStreams = currentStreams.filter(v => v !== val);
        renderStreams();
      });
      streamContainer.appendChild(chip);
    });
  }

  async function addStream(value){
    const v = (value||'').trim();
    if (!v) return;
    if (!currentStreams.includes(v)) {
      currentStreams.push(v);
      renderStreams();
    }
    await saveStreamToStorage(v);
    if (!streamHistory.includes(v)) {
      streamHistory = [v, ...streamHistory].slice(0, 200);
    }
  }

  function setStreamSuggestionsVisible(visible){
    if (!streamSuggestBox) return;
    streamSuggestBox.classList.toggle('visible', !!visible);
  }

  async function renderStreamSuggestions(query){
    if (!streamSuggestBox) return;
    const q = (query||'').trim().toLowerCase();
    const apiList = await loadStreamsFromAPI(q);
    const list = apiList.filter(h => !currentStreams.includes(h)).slice(0, 8);
    
    if (list.length === 0) { streamSuggestBox.innerHTML = ''; setStreamSuggestionsVisible(false); return; }
    streamSuggestBox.innerHTML = '';
    list.forEach(item => {
      const row = document.createElement('div');
      row.className = 'suggestion-item'; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
      row.style.cssText = 'display:flex; justify-content:space-between; align-items:center; padding:4px 8px;';
      
      const textSpan = document.createElement('span');
      textSpan.textContent = item;
      textSpan.style.flex = '1';
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è stream
      const addStreamAction = (e) => {
        e.preventDefault();
        addStream(item);
        if (streamInput) streamInput.value = '';
        setStreamSuggestionsVisible(false);
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ row –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–∫–∞ –∏ Enter
      textSpan.addEventListener('mousedown', addStreamAction);
      row.addEventListener('click', addStreamAction);
      
      row.appendChild(textSpan);
      streamSuggestBox.appendChild(row);
    });
    setStreamSuggestionsVisible(true);
  }

  streamInput?.addEventListener('keydown', (e)=>{
    if (e.key === 'Enter' || e.key === ','){
      e.preventDefault();
      const selectedSuggestion = streamSuggestBox?.querySelector('.suggestion-selected');
      if (selectedSuggestion) {
        selectedSuggestion.click();
      } else {
        addStream(streamInput.value);
        streamInput.value = '';
        setStreamSuggestionsVisible(false);
      }
    } else if (e.key === 'ArrowDown'){
      e.preventDefault();
      const suggestions = streamSuggestBox?.querySelectorAll('.suggestion-item');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = streamSuggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const next = currentSelected.nextElementSibling;
          if (next) {
            next.classList.add('suggestion-selected');
          } else {
            suggestions[0].classList.add('suggestion-selected');
          }
        } else {
          suggestions[0].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'ArrowUp'){
      e.preventDefault();
      const suggestions = streamSuggestBox?.querySelectorAll('.suggestion-item');
      if (suggestions && suggestions.length > 0) {
        const currentSelected = streamSuggestBox?.querySelector('.suggestion-selected');
        if (currentSelected) {
          currentSelected.classList.remove('suggestion-selected');
          const prev = currentSelected.previousElementSibling;
          if (prev) {
            prev.classList.add('suggestion-selected');
          } else {
            suggestions[suggestions.length - 1].classList.add('suggestion-selected');
          }
        } else {
          suggestions[suggestions.length - 1].classList.add('suggestion-selected');
        }
      }
    } else if (e.key === 'Backspace' && !streamInput.value && currentStreams.length){
      currentStreams.pop();
      renderStreams();
    }
  });
  streamInput?.addEventListener('input', ()=>{
    renderStreamSuggestions(streamInput.value);
  });
  streamInput?.addEventListener('blur', ()=>{
    if (streamInput.value.trim()) addStream(streamInput.value);
    streamInput.value = '';
    setStreamSuggestionsVisible(false);
  });

  // –ó–∞–º–µ—Ç–∫–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏, –ø–µ—Ä—Å–æ–Ω–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
  const notesRowsEl = document.getElementById('ce-notes-rows');
  const addNoteBtn = document.getElementById('ce-add-note');
  /** @type {{text:string, time:string, person:string, isQuestion:boolean, due:string|null, topic:string|null}[]} */
  let noteItems = [];

  function renderNoteRows(){
    if (!notesRowsEl) return;
    notesRowsEl.innerHTML = '';
    noteItems.forEach((n, idx)=>{
      const row = document.createElement('div');
      row.className = 'note-row';

      // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∏–Ω—É—Ç–∞–º–∏
      const timeSelect = document.createElement('select');
      timeSelect.className = 'note-time';
      timeSelect.style.cssText = 'width:100px; padding:6px; border:1px solid #ccc; border-radius:4px; font-size: 14px;';
      
      // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –≤—Å—Ç—Ä–µ—á–∏
      const [startHour, startMin] = startTimeStr.split(':').map(Number);
      const [endHour, endMin] = endTimeStr.split(':').map(Number);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–Ω—É—Ç –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∏
      // –ù–∞—á–∏–Ω–∞–µ–º —Å 00:00, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
      const meetingDurationMinutes = (endHour * 60 + endMin) - (startHour * 60 + startMin);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
      const defaultOpt = document.createElement('option');
      defaultOpt.value = '';
      defaultOpt.textContent = '--:--';
      timeSelect.appendChild(defaultOpt);
      
      for (let minutesFromStart = 0; minutesFromStart <= meetingDurationMinutes; minutesFromStart += 5) {
        const h = Math.floor(minutesFromStart / 60);
        const m = minutesFromStart % 60;
        const timeValue = `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
        const displayValue = timeValue; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        
        const opt = document.createElement('option');
        opt.value = timeValue;
        opt.textContent = displayValue;
        if (n.time === timeValue) opt.selected = true;
        timeSelect.appendChild(opt);
      }
      
      timeSelect.addEventListener('change', ()=>{ n.time = timeSelect.value; });
      row.appendChild(timeSelect);

      // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã —Å –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–æ–º
      const personContainer = document.createElement('div');
      personContainer.className = 'note-person-container';
      
      // Checkbox –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã (resolved —Å—Ç–∞—Ç—É—Å)
      const personCheckbox = document.createElement('input');
      personCheckbox.type = 'checkbox';
      personCheckbox.className = 'note-person-checkbox';
      personCheckbox.checked = n.resolved || false;
      personCheckbox.addEventListener('change', async () => {
        n.resolved = personCheckbox.checked;
        personCheckbox.title = n.resolved ? '–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–µ';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (n.id) {
          try {
            const response = await safeFetch(`/api/meeting-notes/update/${n.id}`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                resolved: n.resolved
              })
            });

            if (response) {
              console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å resolved –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID ${n.id}: ${n.resolved}`);
              showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${n.resolved ? '–†–µ—à–µ–Ω–∞' : '–ù–µ —Ä–µ—à–µ–Ω–∞'}`, 'success');
            } else {
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏');
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ resolved –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID ${n.id}:`, error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            personCheckbox.checked = !n.resolved;
            n.resolved = !n.resolved;
          }
        } else {
          // –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –±–µ–∑ ID, —Å–æ–∑–¥–∞–µ–º –µ—ë –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          console.log(`‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ –±–µ–∑ ID, —Å–æ–∑–¥–∞–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${n.resolved}`);
          try {
            const response = await safeFetch('/api/meeting-notes', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                event_id: ev.id,
                text: n.text,
                time: n.time,
                person: n.person,
                isQuestion: n.isQuestion,
                resolved: n.resolved
              })
            });

            if (response && response.id) {
              n.id = response.id;
              console.log(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å ID ${response.id}`);
              showNotification(`–°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${n.resolved ? '–†–µ—à–µ–Ω–∞' : '–ù–µ —Ä–µ—à–µ–Ω–∞'}`, 'success');
            } else {
              throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É');
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:`, error);
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            personCheckbox.checked = !n.resolved;
            n.resolved = !n.resolved;
          }
        }
        triggerAutoSave();
      });
      
      const personInput = document.createElement('input');
      personInput.type = 'text';
      personInput.className = 'note-person';
      personInput.placeholder = 'Who';
      personInput.value = n.person || '';
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
      personInput.addEventListener('keydown', (e) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
        let suggestionsBox = document.getElementById('global-suggestions-box');
        let suggestions = [];
        
        if (suggestionsBox && suggestionsBox.style.display !== 'none') {
          suggestions = suggestionsBox.querySelectorAll('.suggestion-item');
        } else {
          // –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π
          suggestionsBox = personSuggestBox;
          if (suggestionsBox && suggestionsBox.style.display !== 'none') {
            suggestions = suggestionsBox.querySelectorAll('.suggestion-item');
          }
        }
        
        if (suggestions.length === 0) return;
        
        let selectedIndex = -1;
        suggestions.forEach((item, index) => {
          if (item.classList.contains('suggestion-selected')) {
            selectedIndex = index;
          }
        });
        
        switch (e.key) {
          case 'ArrowDown':
            e.preventDefault();
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            suggestions.forEach(item => item.classList.remove('suggestion-selected'));
            
            // –í—ã–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if (selectedIndex === -1 || selectedIndex === suggestions.length - 1) {
              selectedIndex = 0;
            } else {
              selectedIndex++;
            }
            suggestions[selectedIndex].classList.add('suggestion-selected');
            break;
            
          case 'ArrowUp':
            e.preventDefault();
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            suggestions.forEach(item => item.classList.remove('suggestion-selected'));
            
            // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if (selectedIndex === -1 || selectedIndex === 0) {
              selectedIndex = suggestions.length - 1;
            } else {
              selectedIndex--;
            }
            suggestions[selectedIndex].classList.add('suggestion-selected');
            break;
            
          case 'Enter':
            e.preventDefault();
            const selectedItem = suggestionsBox.querySelector('.suggestion-selected');
            if (selectedItem) {
              personInput.value = selectedItem.textContent;
              n.person = selectedItem.textContent;
              hideGlobalSuggestionsBox();
              if (personSuggestBox) {
                personSuggestBox.style.display = 'none';
              }
              triggerAutoSave();
            }
            break;
            
          case 'Escape':
            e.preventDefault();
            hideGlobalSuggestionsBox();
            if (personSuggestBox) {
              personSuggestBox.style.display = 'none';
            }
            break;
        }
      });
      
      const personSuggestBox = document.createElement('div');
      personSuggestBox.className = 'suggestions-box';
      
      personContainer.appendChild(personInput);
      personContainer.appendChild(personSuggestBox);
      row.appendChild(personContainer);
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
      async function renderPersonSuggestions(query) {
        if (!personSuggestBox) return;
        const q = (query || '').trim();
        
        try {
          const response = await fetch(`/api/attendees?search=${encodeURIComponent(q)}`);
          if (response.ok) {
            const attendees = await response.json();
            const list = attendees.map(a => {
              if (a.name && a.surname) {
                return `${a.name} ${a.surname}`;
              } else if (a.name) {
                return a.name;
              } else {
                return a.email;
              }
            }).slice(0, 8);
            
            if (list.length === 0) {
              personSuggestBox.innerHTML = '';
              personSuggestBox.style.display = 'none';
              return;
            }
            
            personSuggestBox.innerHTML = '';
            list.forEach((item) => {
              const row = document.createElement('div');
              row.style.cssText = 'padding: 4px 8px; cursor: pointer;';
              row.textContent = item;
              row.addEventListener('mousedown', (e) => {
                e.preventDefault();
                personInput.value = item;
                n.person = item;
                personSuggestBox.style.display = 'none';
              });
              row.addEventListener('mouseenter', () => {
                row.style.backgroundColor = '#f0f0f0';
              });
              row.addEventListener('mouseleave', () => {
                row.style.backgroundColor = '';
              });
              personSuggestBox.appendChild(row);
            });
            
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º z-index
            const rect = personInput.getBoundingClientRect();
            const currentZIndex = 2147483647; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π z-index (2^31-1)
            
            personSuggestBox.style.position = 'fixed';
            personSuggestBox.style.top = (rect.bottom + window.scrollY) + 'px';
            personSuggestBox.style.left = (rect.left + window.scrollX) + 'px';
            personSuggestBox.style.width = rect.width + 'px';
            personSuggestBox.style.zIndex = currentZIndex;
            personSuggestBox.style.display = 'block';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
            const viewportHeight = window.innerHeight;
            const dropdownHeight = Math.min(200, list.length * 32); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            const bottomPosition = rect.bottom + dropdownHeight;
            
            if (bottomPosition > viewportHeight) {
              // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–Ω–∏–∑—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ—Ä—Ö—É
              personSuggestBox.style.top = (rect.top + window.scrollY - dropdownHeight) + 'px';
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è - —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç—ã
            const allSuggestionsBoxes = document.querySelectorAll('.notes-section .suggestions-box');
            allSuggestionsBoxes.forEach(box => {
              if (box !== personSuggestBox) {
                box.style.display = 'none';
              }
            });
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      personInput.addEventListener('input', () => {
        // –ü—Ä–∏ –≤–≤–æ–¥–µ —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤–æ–≥–æ
        hideGlobalSuggestionsBox();
        renderPersonSuggestions(personInput.value);
      });
      
      personInput.addEventListener('focus', () => {
        // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª–µ —Å–∫—Ä—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
        hideGlobalSuggestionsBox();
      });
      
      personInput.addEventListener('blur', () => {
        setTimeout(() => {
          hideGlobalSuggestionsBox();
        }, 200);
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      window.addEventListener('scroll', () => {
        if (globalSuggestionsBox && globalSuggestionsBox.style.display === 'block') {
          const rect = personInput.getBoundingClientRect();
          globalSuggestionsBox.style.top = (rect.bottom + window.scrollY) + 'px';
          globalSuggestionsBox.style.left = (rect.left + window.scrollX) + 'px';
        }
      });
      
      window.addEventListener('resize', () => {
        if (globalSuggestionsBox && globalSuggestionsBox.style.display === 'block') {
          const rect = personInput.getBoundingClientRect();
          globalSuggestionsBox.style.top = (rect.bottom + window.scrollY) + 'px';
          globalSuggestionsBox.style.left = (rect.left + window.scrollX) + 'px';
          globalSuggestionsBox.style.width = rect.width + 'px';
        }
      });
      
      personInput.addEventListener('change', () => {
        n.person = personInput.value;
      });

      // –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏ (—á—Ç–æ —Å–∫–∞–∑–∞–ª)
      const textInput = document.createElement('textarea');
      textInput.className = 'note-input';
      textInput.placeholder = 'Said ...';
      textInput.value = n.text;
      textInput.rows = 1;
      textInput.style.cssText = 'resize: vertical; min-height: 32px;';
      textInput.addEventListener('input', ()=>{ 
        n.text = textInput.value; 
        autoResizeTextarea(textInput);
        triggerAutoSave();
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞
      textInput.addEventListener('paste', () => {
        setTimeout(() => autoResizeTextarea(textInput), 0);
      });
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç —Ç–µ–≥–æ–≤
      setupTagAutocomplete(textInput);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      setupAttendeeAutocomplete(textInput);
      
      row.appendChild(textInput);

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ ASAP –∏ IMP
      const buttonsContainer = document.createElement('div');
      buttonsContainer.className = 'note-buttons-container';
      buttonsContainer.style.cssText = 'display:flex; align-items:center; gap:4px; white-space:nowrap;';
      
      // –î–æ–±–∞–≤–ª—è–µ–º checkbox –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–æ–∫
      buttonsContainer.appendChild(personCheckbox);
      
      // –ö–Ω–æ–ø–∫–∞ ASAP
      const asapBtn = document.createElement('button');
      asapBtn.type = 'button';
      asapBtn.className = 'note-asap-btn';
      asapBtn.textContent = 'ASAP';
      asapBtn.classList.toggle('active', !!n.isASAP);
      asapBtn.addEventListener('click', async () => {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        if (asapBtn.disabled) {
          console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ ASAP —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫');
          return;
        }
        
        asapBtn.disabled = true;
        asapBtn.textContent = '‚è≥';
        
        try {
          n.isASAP = !n.isASAP;
          asapBtn.classList.toggle('active', n.isASAP);
          
          // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º ASAP, —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          if (n.isASAP) {
            await createQuestionFromNote(n, idx, ev.id);
          }
        } finally {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
          asapBtn.disabled = false;
          asapBtn.textContent = 'ASAP';
        }
      });
      
      // –ö–Ω–æ–ø–∫–∞ IMP
      const impBtn = document.createElement('button');
      impBtn.type = 'button';
      impBtn.className = 'note-imp-btn';
      impBtn.textContent = 'IMP';
      impBtn.classList.toggle('active', !!n.isIMP);
      impBtn.addEventListener('click', async () => {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
        if (impBtn.disabled) {
          console.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ IMP —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫');
          return;
        }
        
        impBtn.disabled = true;
        impBtn.textContent = '‚è≥';
        
        try {
          n.isIMP = !n.isIMP;
          impBtn.classList.toggle('active', n.isIMP);
          
          // –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º IMP, —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          if (n.isIMP) {
            await createQuestionFromNote(n, idx, ev.id);
          }
        } finally {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
          impBtn.disabled = false;
          impBtn.textContent = 'IMP';
        }
      });
      
      buttonsContainer.appendChild(impBtn);
      buttonsContainer.appendChild(asapBtn);
      
      row.appendChild(buttonsContainer);

      notesRowsEl.appendChild(row);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä textarea
      autoResizeTextarea(textInput);
    });
  }

  function addNoteRow(prefill = ''){
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏
    const autoTime = getTimeSinceMeetingStart();
    noteItems.push({ text: prefill, time: autoTime, person: '', isQuestion: false, due: null, stream: null, important: false, asap: false });
    renderNoteRows();
  }

  addNoteBtn?.addEventListener('click', ()=> addNoteRow(''));
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  addNoteRow('');

  // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
  const ceActualQuestionsRowsEl = document.getElementById('ce-actual-questions-rows');
  const ceAddActualQuestionBtn = document.getElementById('ce-add-actual-question');
  let ceActualQuestions = [];
  
  function renderCeActualQuestions() {
    if (!ceActualQuestionsRowsEl) return;
    ceActualQuestionsRowsEl.innerHTML = '';
    
    ceActualQuestions.forEach((q, idx) => {
      const row = document.createElement('div');
      row.className = 'actual-question-row';
      
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.className = 'actual-question-checkbox';
      checkbox.checked = q.completed || false;
      checkbox.addEventListener('change', (e) => {
        ceActualQuestions[idx].completed = e.target.checked;
      });
      
      const textInput = document.createElement('textarea');
      textInput.className = 'actual-question-text';
      textInput.value = q.text;
      textInput.placeholder = 'Question ...';
      textInput.rows = 1;
      textInput.style.cssText = 'resize: vertical; min-height: 32px;';
      textInput.addEventListener('input', (e) => {
        ceActualQuestions[idx].text = e.target.value;
        autoResizeTextarea(textInput);
      });
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞
      textInput.addEventListener('paste', () => {
        setTimeout(() => autoResizeTextarea(textInput), 0);
      });
      
      const deleteBtn = document.createElement('button');
      deleteBtn.type = 'button';
      deleteBtn.className = 'actual-question-delete-btn';
      deleteBtn.textContent = '‚úï';
      deleteBtn.addEventListener('click', () => {
        ceActualQuestions.splice(idx, 1);
        renderCeActualQuestions();
      });
      
      row.appendChild(checkbox);
      row.appendChild(textInput);
      row.appendChild(deleteBtn);
      ceActualQuestionsRowsEl.appendChild(row);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä textarea
      autoResizeTextarea(textInput);
    });
  }
  
  function addCeActualQuestion(text = '') {
    ceActualQuestions.push({ text, completed: false });
    renderCeActualQuestions();
  }
  
  ceAddActualQuestionBtn?.addEventListener('click', () => addCeActualQuestion(''));
  addCeActualQuestion('');

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
  async function copyLinkFromPreviousEvent(subject) {
    const previousEvent = await findPreviousEventWithSameName(subject);
    if (previousEvent && previousEvent.location) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ø–æ–ª—è location
      const location = previousEvent.location;
      
      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
      const urlRegex = /(https?:\/\/[^\s]+)/g;
      const urls = location.match(urlRegex);
      
      if (urls && urls.length > 0) {
        return urls[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
      }
    }
    return null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏
  async function checkAndShowCopyLinkButton() {
    const subject = document.getElementById('ce-title')?.value.trim();
    const copyBtn = document.getElementById('ce-copy-link-btn');
    const addressInput = document.getElementById('ce-location-address');
    
    console.log('üîç checkAndShowCopyLinkButton –≤—ã–∑–≤–∞–Ω–∞:', {
      subject: subject,
      copyBtnExists: !!copyBtn,
      addressInputExists: !!addressInput
    });
    
    if (!subject || !copyBtn || !addressInput) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏–º–æ –ª–∏ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞
    const isAddressFieldVisible = addressInput.style.display !== 'none';
    console.log('üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞:', {
      isVisible: isAddressFieldVisible,
      displayStyle: addressInput.style.display
    });
    
    if (!isAddressFieldVisible) {
      // –ï—Å–ª–∏ –ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ —Å–∫—Ä—ã—Ç–æ, —Å–∫—Ä—ã–≤–∞–µ–º –∏ –∫–Ω–æ–ø–∫—É
      console.log('‚ùå –ü–æ–ª–µ –∞–¥—Ä–µ—Å–∞ —Å–∫—Ä—ã—Ç–æ - —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É');
      copyBtn.style.display = 'none';
      return;
    }
    
    try {
      console.log('üîç –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:', subject);
      const previousEvent = await findPreviousEventWithSameName(subject);
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', {
        found: !!previousEvent,
        eventDate: previousEvent?.start?.split('T')[0],
        hasLocation: !!previousEvent?.location
      });
      
      if (previousEvent && previousEvent.location) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –ø–æ–ª–µ location
        const urlRegex = /(https?:\/\/[^\s]+)/g;
        const hasLink = urlRegex.test(previousEvent.location);
        console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏:', {
          hasLink: hasLink,
          location: previousEvent.location.substring(0, 100) + '...'
        });
        
        if (hasLink) {
          console.log('‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É!');
          copyBtn.style.display = 'block';
          copyBtn.title = `–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–±—ã—Ç–∏—è "${subject}" (${previousEvent.start?.split('T')[0] || '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'})`;
        } else {
          console.log('‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ location');
          copyBtn.style.display = 'none';
        }
      } else {
        console.log('‚ùå –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç location');
        copyBtn.style.display = 'none';
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
      copyBtn.style.display = 'none';
    }
  }


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
  document.getElementById('ce-copy-link-btn')?.addEventListener('click', async () => {
    const subject = document.getElementById('ce-title')?.value.trim();
    if (!subject) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      return;
    }
    
    const copyBtn = document.getElementById('ce-copy-link-btn');
    const originalText = copyBtn.textContent;
    copyBtn.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
    copyBtn.disabled = true;
    
    try {
      const previousLink = await copyLinkFromPreviousEvent(subject);
      if (previousLink) {
        const addressInput = document.getElementById('ce-location-address');
        if (addressInput) {
          addressInput.value = previousLink;
          addressInput.style.borderColor = '#4CAF50';
          addressInput.style.backgroundColor = '#f0f8ff';
          setTimeout(() => {
            addressInput.style.borderColor = '#ccc';
            addressInput.style.backgroundColor = 'white';
          }, 3000);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        copyBtn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        copyBtn.style.background = '#4CAF50';
        
        setTimeout(() => {
          copyBtn.textContent = originalText;
          copyBtn.style.background = '#4285f4';
        }, 2000);
        
        console.log('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', previousLink);
      } else {
        alert('–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É');
        copyBtn.textContent = originalText;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏');
      copyBtn.textContent = originalText;
    } finally {
      copyBtn.disabled = false;
    }
  });
    
  async function createEvent() {
    console.log('=== createEvent: –Ω–∞—á–∞–ª–æ ===');
    console.log('window.startISO:', window.startISO);
    console.log('window.endISO:', window.endISO);
    console.log('DEBUG: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç:', {
      slotDate: slotDateStr,
      startTime: startTimeStr,
      endTime: endTimeStr
    });
    
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è...');
    const subject = /** @type {HTMLInputElement} */(document.getElementById('ce-title')).value.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –ø—É—Å—Ç–æ–µ
    if (!subject) {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!');
      return;
    }
    
    let address = /** @type {HTMLInputElement} */(document.getElementById('ce-location-address')).value.trim();
     const attendees = currentTags.slice();
     const streams = currentStreams.slice();
     const recUrl = /** @type {HTMLInputElement} */(document.getElementById('ce-recording-url')).value.trim();
     
     console.log('üîç currentTags –≤ createEvent:', currentTags);
     console.log('üîç attendees –≤ createEvent:', attendees);
     
     // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –ø—É—Å—Ç–æ–π, –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
     if (!address) {
       console.log('üîç –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:', subject);
       const previousLink = await copyLinkFromPreviousEvent(subject);
       if (previousLink) {
         address = previousLink;
         // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
         const addressInput = document.getElementById('ce-location-address');
         if (addressInput) {
           addressInput.value = address;
         }
         console.log('‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', previousLink);
       } else {
         console.log('üìù –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É');
       }
     }
     
     console.log('DEBUG: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', {
       subject,
       address,
       attendees,
       streams,
       recUrl
     });
     
     // –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å—Ç—Ä–æ–∫—É
     const actualQuestionsText = ceActualQuestions
       .filter(q => q.text.trim())
       .map(q => `${q.completed ? '‚úì ' : '‚óã '}${q.text.trim()}`)
       .join('\n');

    // –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∑–∞–º–µ—Ç–æ–∫

    // –°–±–æ—Ä–∫–∞ –º–µ—Å—Ç–∞: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º –∞–¥—Ä–µ—Å. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ Zoom/Teams –∏ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å ‚Äî –æ–±—ä–µ–¥–∏–Ω–∏–º.
    let location = '';
    if (chosenPlace && address) location = `${chosenPlace}: ${address}`;
    else location = chosenPlace || address;

    // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª—è–º–∏
    const notesAsObjects = noteItems
      .filter(n => n.text.trim())
      .map(n => ({
        text: n.text.trim(),
        time: n.time || null,
        person: n.person || null,
        topic: n.topic || null
      }));

    const oqFromNotes = noteItems
      .filter(n => n.isQuestion && n.text.trim())
      .map(n => {
        const meta = [];
        if (n.time) meta.push(n.time);
        if (n.person) meta.push(n.person);
        if (n.stream) meta.push(`#${n.stream}`);
        if (n.due) meta.push(`–¥–æ ${new Date(n.due).toLocaleString()}`);
        if (n.important) meta.push('Important');
        if (n.asap) meta.push('ASAP');
        return `${meta.length? '['+meta.join(' | ')+'] ' : ''}${n.text.trim()}`;
      });

    console.log('DEBUG: Payload —Å–æ–±—ã—Ç–∏—è:', {
      subject: subject || '–ë–µ–∑ —Ç–µ–º—ã',
      start: window.startISO,
      end: window.endISO,
      location,
      attendees,
      stream: streams,
      notes: notesAsObjects, // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
      recording_url: recUrl,
      open_questions: oqFromNotes,
      actual_open_questions: actualQuestionsText
    });

    const payload = {
      subject: subject || '–ë–µ–∑ —Ç–µ–º—ã',
      start: window.startISO,
      end: window.endISO,
      location,
      attendees,
      stream: streams,
      notes: notesAsObjects, // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
      recording_url: recUrl,
      open_questions: oqFromNotes,
      actual_open_questions: actualQuestionsText
    };

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', payload);
    console.log('=== createEvent: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ===');

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    let saved = null;
    try {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      const resp = await fetch('/api/events', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', resp.status, resp.statusText);
      
      if (resp.ok) {
        saved = await resp.json();
        console.log('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', saved);
        console.log('DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', {
          id: saved.id,
          subject: saved.subject,
          start: saved.start,
          end: saved.end,
          start_time: saved.start_time,
          end_time: saved.end_time
        });
        console.log('=== createEvent: —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===');
      } else {
        const errorText = await resp.text();
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', resp.status, errorText);
        console.log('DEBUG: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
          status: resp.status,
          statusText: resp.statusText,
          errorText: errorText
        });
        console.log('=== createEvent: –æ—à–∏–±–∫–∞ ===');
      }
    } catch(err) {
      // –æ—Ñ—Ñ–ª–∞–π–Ω/—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
      console.warn('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—é –ª–æ–∫–∞–ª—å–Ω–æ', err);
      console.log('=== createEvent: –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ ===');
    }

    if (saved) {
      // –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      console.log('–°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:', saved);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é (weekly –∏–ª–∏ daily)
      const subjectLower = subject.toLowerCase();
      // –ò—Å–∫–ª—é—á–∞–µ–º DEV Daily –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–∏–π
      if ((subjectLower.includes('weekly') || subjectLower.includes('daily')) && !subjectLower.includes('dev daily')) {
        const recurrenceType = subjectLower.includes('weekly') ? 'weekly' : 'daily';
        const createSeries = confirm(
          `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${recurrenceType}" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.\n\n` +
          `–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–µ—Å—è—Ü?\n` +
          `(${recurrenceType === 'weekly' ? '4 –Ω–µ–¥–µ–ª–∏, –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π' : '5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ'})`
        );
        
        if (createSeries) {
          await createRecurringSeries(payload, recurrenceType);
          alert(`–°–µ—Ä–∏—è –∏–∑ ${recurrenceType === 'weekly' ? '4' : '5'} —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–∞!`);
          
          // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –≤—Å—Ç—Ä–µ—á
          await suggestAttendeesForSeries(payload.subject);
        }
      }
      
      console.log('=== createEvent: –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è ===');
      await loadEventsFromAPI();
      console.log('=== createEvent: —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã, mockEvents.length:', mockEvents.length);
      
      // –ù–∞–π–¥—ë–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –ø–æ–∫–∞–∂–µ–º –µ–≥–æ
      const createdEvent = mockEvents.find(ev => ev.id === saved.id);
      console.log('=== createEvent: –∏—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ ===', {
        savedId: saved.id,
        foundEvent: createdEvent ? '–Ω–∞–π–¥–µ–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
      
      if (createdEvent) {
        console.log('=== createEvent: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ===');
        showEvent(createdEvent);
      } else {
        console.log('=== createEvent: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ mockEvents ===');
      }
    } else {
      // –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const newEvent = {
        id: generateEventId(),
        ...payload
      };
      mockEvents.push(newEvent);
      markEventSlots(newEvent);
      showEvent(newEvent);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã (submit)
  form?.addEventListener('submit', async (e)=>{
    e.preventDefault();
    await createEvent();
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
  function checkExistingEvent(subject, startTime, endTime) {
    return mockEvents.some(event => 
      event.subject === subject && 
      event.start === startTime && 
      event.end === endTime
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  function resetAutoSaveState() {
    isEventCreated = false;
    isCreating = false;
    lastCreatedSubject = '';
    lastCreatedTime = '';
    if (inputTimeout) {
      clearTimeout(inputTimeout);
      inputTimeout = null;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async function findSimilarEvents(subject) {
    if (!subject || subject.length < 3) {
      return { suggested_attendees: [], similar_events: [] };
    }
    
    try {
      const response = await fetch(`/api/similar-events?subject=${encodeURIComponent(subject)}&limit=5`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error);
      return { suggested_attendees: [], similar_events: [] };
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  function showSuggestedAttendees(suggestedAttendees, similarEvents) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const existingSuggestions = document.getElementById('attendee-suggestions');
    if (existingSuggestions) {
      existingSuggestions.remove();
    }
    
    if (!suggestedAttendees || suggestedAttendees.length === 0) {
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.id = 'attendee-suggestions';
    suggestionsContainer.style.cssText = `
      margin-top: 8px;
      padding: 8px;
      background: #f0f8ff;
      border: 1px solid #4aa3ff;
      border-radius: 6px;
      font-size: 12px;
    `;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.createElement('div');
    title.style.cssText = 'font-weight: bold; margin-bottom: 6px; color: #333;';
    title.textContent = `üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π (${similarEvents.length} –Ω–∞–π–¥–µ–Ω–æ):`;
    suggestionsContainer.appendChild(title);
    
    // –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const attendeesList = document.createElement('div');
    attendeesList.style.cssText = 'display: flex; flex-wrap: wrap; gap: 4px; margin-bottom: 6px;';
    
    suggestedAttendees.forEach(attendee => {
      const attendeeTag = document.createElement('span');
      attendeeTag.style.cssText = `
        background: #4aa3ff;
        color: white;
        padding: 2px 6px;
        border-radius: 12px;
        cursor: pointer;
        font-size: 11px;
        transition: background-color 0.2s;
      `;
      attendeeTag.textContent = attendee;
      attendeeTag.title = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      attendeeTag.addEventListener('click', () => {
        addSuggestedAttendee(attendee);
        attendeeTag.style.background = '#28a745';
        attendeeTag.textContent = '‚úì ' + attendee;
        setTimeout(() => {
          attendeeTag.remove();
        }, 1000);
      });
      
      // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
      attendeeTag.addEventListener('mouseenter', () => {
        attendeeTag.style.background = '#357abd';
      });
      attendeeTag.addEventListener('mouseleave', () => {
        attendeeTag.style.background = '#4aa3ff';
      });
      
      attendeesList.appendChild(attendeeTag);
    });
    
    suggestionsContainer.appendChild(attendeesList);
    
    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö"
    const addAllBtn = document.createElement('button');
    addAllBtn.style.cssText = `
      background: #28a745;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 11px;
      cursor: pointer;
      margin-right: 8px;
    `;
    addAllBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö';
    addAllBtn.addEventListener('click', () => {
      suggestedAttendees.forEach(attendee => {
        addSuggestedAttendee(attendee);
      });
      suggestionsContainer.remove();
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
    const closeBtn = document.createElement('button');
    closeBtn.style.cssText = `
      background: #6c757d;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 11px;
      cursor: pointer;
    `;
    closeBtn.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
    closeBtn.addEventListener('click', () => {
      suggestionsContainer.remove();
    });
    
    const buttonsContainer = document.createElement('div');
    buttonsContainer.appendChild(addAllBtn);
    buttonsContainer.appendChild(closeBtn);
    suggestionsContainer.appendChild(buttonsContainer);
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const attendeesContainer = document.getElementById('ce-attendees-tags');
    if (attendeesContainer) {
      attendeesContainer.appendChild(suggestionsContainer);
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  function addSuggestedAttendee(attendee) {
    if (!currentTags.includes(attendee)) {
      currentTags.push(attendee);
      renderTags();
    }
  }

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const titleInput = /** @type {HTMLInputElement} */(document.getElementById('ce-title'));
  let isEventCreated = false;
  let isCreating = false; // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  let inputTimeout = null; // –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  let lastCreatedSubject = ''; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  let lastCreatedTime = ''; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  
  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
  titleInput?.addEventListener('input', async ()=>{
    const subject = titleInput.value.trim();
    const currentTime = `${window.startISO}_${window.endISO}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    await checkAndShowCopyLinkButton();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    const eventExists = checkExistingEvent(subject, window.startISO, window.endISO);
    
    // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (subject && subject.length >= 3) {
      const similarData = await findSimilarEvents(subject);
      if (similarData.suggested_attendees && similarData.suggested_attendees.length > 0) {
        showSuggestedAttendees(similarData.suggested_attendees, similarData.similar_events);
      }
    }
    
    if (subject && !isEventCreated && !isCreating && 
        (subject !== lastCreatedSubject || currentTime !== lastCreatedTime) && 
        !eventExists) {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
      if (inputTimeout) {
        clearTimeout(inputTimeout);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
      inputTimeout = setTimeout(async () => {
        console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è...', {
          subject,
          start: window.startISO,
          end: window.endISO,
          eventExists
        });
        isCreating = true;
        try {
          await createEvent();
          isEventCreated = true;
          lastCreatedSubject = subject;
          lastCreatedTime = currentTime;
        } finally {
          isCreating = false;
        }
      }, 1000);
    }
  });
  
  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è
  titleInput?.addEventListener('blur', async ()=>{
    const subject = titleInput.value.trim();
    const currentTime = `${window.startISO}_${window.endISO}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    const eventExists = checkExistingEvent(subject, window.startISO, window.endISO);
    
    if (subject && !isEventCreated && !isCreating && 
        (subject !== lastCreatedSubject || currentTime !== lastCreatedTime) && 
        !eventExists) {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (inputTimeout) {
        clearTimeout(inputTimeout);
        inputTimeout = null;
      }
      
      console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞...', {
        subject,
        start: window.startISO,
        end: window.endISO,
        eventExists
      });
      isCreating = true;
      try {
        await createEvent();
        isEventCreated = true;
        lastCreatedSubject = subject;
        lastCreatedTime = currentTime;
      } finally {
        isCreating = false;
      }
    }
  });
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–ª–æ—Ç–∞
  resetAutoSaveState();
}

// –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è - UTC+3
const MOSCOW_OFFSET_HOURS = 3;

// –°–æ–∑–¥–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
function createMoscowTime(isoYMD, hhmm) {
  // –°–æ–∑–¥–∞–µ–º ISO —Å—Ç—Ä–æ–∫—É —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º timezone offset (+03:00)
  return `${isoYMD}T${hhmm}:00+03:00`;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î (–æ–Ω–æ —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
function utcToMoscow(dateStr) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dateStr –Ω–µ undefined –∏–ª–∏ null
  if (!dateStr) {
    console.warn('utcToMoscow: dateStr is undefined or null');
    return new Date();
  }
  
  console.log('üîç utcToMoscow input:', dateStr, 'type:', typeof dateStr);
  
  // –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ - –≤—Å–µ –¥–∞—Ç—ã —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const result = new Date(dateStr);
  
  console.log('üîç utcToMoscow output:', result.toString(), 'ISO:', result.toISOString());
  
  return result;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞)
function formatDateOnly(date) {
  const d = date.getDate();
  const months = ['January', 'February', 'March', 'April', 'May', 'June', 
                  'July', 'August', 'September', 'October', 'November', 'December'];
  return `${d} ${months[date.getMonth()]} ${date.getFullYear()}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ HH:MM
function formatHM(date) {
  const hh = String(date.getHours()).padStart(2, '0');
  const mm = String(date.getMinutes()).padStart(2, '0');
  return `${hh}:${mm}`;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Ç–µ–≥–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
function loadTagsHistory(){
  try { return JSON.parse(localStorage.getItem('question_tags_history')||'[]'); } catch { return []; }
}
function saveTagToHistory(tag){
  console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π stream –≤ –∏—Å—Ç–æ—Ä–∏—é:', tag);
  try {
    let history = loadTagsHistory();
    console.log('üìã –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è streams:', history);
    if (!history.includes(tag)) {
      history = [tag, ...history].slice(0, 50);
      localStorage.setItem('question_tags_history', JSON.stringify(history));
      console.log('‚úÖ –ù–æ–≤—ã–π stream –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é:', tag);
      console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:', history);
    } else {
      console.log('‚ÑπÔ∏è Stream —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏:', tag);
    }
  } catch(err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è stream –≤ –∏—Å—Ç–æ—Ä–∏—é:', err);
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ (15-–º–∏–Ω—É—Ç–Ω—ã–º–∏)
function loadSplitSlots(){
  try { 
    return JSON.parse(localStorage.getItem('split_slots_history') || '[]'); 
  } catch { 
    return []; 
  }
}

function saveSplitSlot(date, startTime, endTime){
  try {
    let splits = loadSplitSlots();
    const key = `${date}_${startTime}_${endTime}`;
    if (!splits.includes(key)) {
      splits.push(key);
      localStorage.setItem('split_slots_history', JSON.stringify(splits));
    }
  } catch {}
}

function isSplitSlot(date, startTime, endTime){
  const splits = loadSplitSlots();
  const key = `${date}_${startTime}_${endTime}`;
  return splits.includes(key);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ streams –∏–∑ API
async function loadStreamsFromAPI(search = ''){
  try {
    const response = await fetch(`/api/streams?search=${encodeURIComponent(search)}`);
    if (response.ok) {
      const streams = await response.json();
      return streams;
    }
  } catch(err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', err);
  }
  // Fallback –∫ localStorage
  try {
    const stored = localStorage.getItem('question_tags_history');
    return stored ? JSON.parse(stored) : [];
  } catch {
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ API
async function loadAttendeesFromAPI(search = ''){
  try {
    const response = await fetch(`/api/attendees?search=${encodeURIComponent(search)}`);
    if (response.ok) {
      const attendees = await response.json();
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
      return attendees.map(attendee => {
        if (attendee.name && attendee.surname) {
          return `${attendee.name} ${attendee.surname}`;
        } else if (attendee.name) {
          return attendee.name;
        } else if (attendee.email) {
          return attendee.email;
        }
        return '';
      }).filter(name => name.trim() !== '');
    }
  } catch(err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
  }
  // Fallback –∫ localStorage
  try {
    const stored = localStorage.getItem('attendees_history');
    return stored ? JSON.parse(stored) : [];
  } catch {
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ —Ç–µ–≥–æ–≤ –≤ –ø–æ–ª–µ NOTES
function setupTagAutocomplete(textarea) {
  console.log('üè∑Ô∏è setupTagAutocomplete: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è textarea');
  
  let tagSuggestBox = null;
  let currentTagQuery = '';
  let tagStartPos = 0;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç–µ–≥–æ–≤
  function createTagSuggestBox() {
    console.log('üè∑Ô∏è createTagSuggestBox: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');
    if (tagSuggestBox) return tagSuggestBox;
    
    tagSuggestBox = document.createElement('div');
    tagSuggestBox.className = 'tag-suggest-box';
    tagSuggestBox.style.cssText = `
      position: fixed;
      background: white;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      max-height: 200px;
      overflow-y: auto;
      z-index: 9999;
      display: none;
      min-width: 220px;
      margin-top: 2px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
    const style = document.createElement('style');
    style.textContent = `
      .tag-suggest-box::-webkit-scrollbar {
        width: 6px;
      }
      .tag-suggest-box::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
      }
      .tag-suggest-box::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
      }
      .tag-suggest-box::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
      }
    `;
    document.head.appendChild(style);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫ body –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    document.body.appendChild(tagSuggestBox);

    return tagSuggestBox;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  function setTagSuggestionsVisible(visible) {
    console.log('üè∑Ô∏è setTagSuggestionsVisible:', visible ? '–ø–æ–∫–∞–∑–∞—Ç—å' : '—Å–∫—Ä—ã—Ç—å');
    if (!tagSuggestBox) {
      console.log('üè∑Ô∏è tagSuggestBox –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
      createTagSuggestBox();
    }
    if (!tagSuggestBox) {
      console.log('‚ùå tagSuggestBox –Ω–µ —Å–æ–∑–¥–∞–Ω');
      return;
    }
    
    if (visible) {
      console.log('üè∑Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤');
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ
      const cursorPos = textarea.selectionStart;
      const textBeforeCursor = textarea.value.substring(0, cursorPos);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ # –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
      const lastHashIndex = textBeforeCursor.lastIndexOf('#');
      if (lastHashIndex === -1) {
        console.log('üè∑Ô∏è –°–∏–º–≤–æ–ª # –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
        tagSuggestBox.style.display = 'none';
        return;
      }
      
      console.log('üè∑Ô∏è –ù–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª # –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏:', lastHashIndex);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
      const tempDiv = document.createElement('div');
      tempDiv.style.cssText = `
        position: absolute;
        visibility: hidden;
        white-space: pre-wrap;
        font: ${window.getComputedStyle(textarea).font};
        padding: ${window.getComputedStyle(textarea).padding};
        border: ${window.getComputedStyle(textarea).border};
        width: ${textarea.offsetWidth}px;
        height: auto;
        word-wrap: break-word;
      `;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—è –≤–≤–æ–¥–∞
      const textareaRect = textarea.getBoundingClientRect();
      
      // –ò–∑–º–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–æ —Å–∏–º–≤–æ–ª–∞ #
      const textUpToHash = textarea.value.substring(0, lastHashIndex + 1);
      tempDiv.textContent = textUpToHash;
      document.body.appendChild(tempDiv);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      const textWidth = tempDiv.offsetWidth;
      const lineHeight = parseInt(window.getComputedStyle(textarea).lineHeight) || 20;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ —Å–∏–º–≤–æ–ª–∞ #
      const lines = Math.floor(textWidth / textareaRect.width);
      const verticalOffset = lines * lineHeight;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ # –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
      const textInCurrentLine = textUpToHash.split('\n').pop() || '';
      const tempDivLine = document.createElement('div');
      tempDivLine.style.cssText = `
        position: absolute;
        visibility: hidden;
        white-space: nowrap;
        font: ${window.getComputedStyle(textarea).font};
      `;
      tempDivLine.textContent = textInCurrentLine;
      document.body.appendChild(tempDivLine);
      
      const horizontalOffset = tempDivLine.offsetWidth;
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–∏–º–≤–æ–ª–∞ #
      const leftPos = textareaRect.left + horizontalOffset + 10;
      const topPos = textareaRect.top + verticalOffset + 5;
      
      console.log('üè∑Ô∏è –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', {
        textareaRect: { left: textareaRect.left, top: textareaRect.top },
        horizontalOffset,
        verticalOffset,
        finalPosition: { left: leftPos, top: topPos }
      });
      
      tagSuggestBox.style.left = leftPos + 'px';
      tagSuggestBox.style.top = topPos + 'px';
      tagSuggestBox.style.display = 'block';
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      document.body.removeChild(tempDiv);
      document.body.removeChild(tempDivLine);
    } else {
      tagSuggestBox.style.display = 'none';
    }
  }
  
  // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤
  async function renderTagSuggestions(query) {
    console.log('üè∑Ô∏è renderTagSuggestions: –∑–∞–ø—Ä–æ—Å —Ç–µ–≥–æ–≤ –¥–ª—è:', query);
    console.log('üè∑Ô∏è renderTagSuggestions: tagSuggestBox —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?', !!tagSuggestBox);
    if (!tagSuggestBox) {
      console.log('üè∑Ô∏è tagSuggestBox –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
      createTagSuggestBox();
    }
    if (!tagSuggestBox) {
      console.log('‚ùå tagSuggestBox –Ω–µ —Å–æ–∑–¥–∞–Ω');
      return;
    }
    
    const q = (query || '').trim().toLowerCase();
    console.log('üè∑Ô∏è –ò—â–µ–º —Ç–µ–≥–∏ –¥–ª—è:', q);
    const apiList = await loadStreamsFromAPI(q);
    console.log('üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ–≥–∏ –∏–∑ API:', apiList);
    const list = apiList.slice(0, 8); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    if (list.length === 0) {
      console.log('üè∑Ô∏è –ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      tagSuggestBox.innerHTML = '';
      setTagSuggestionsVisible(false);
      return;
    }
    
    console.log('üè∑Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–≥–∏:', list);
    tagSuggestBox.innerHTML = '';
    list.forEach(item => {
      const row = document.createElement('div');
      row.className = 'tag-suggestion-item';
      row.style.cssText = `
        padding: 10px 14px;
        cursor: pointer;
        border-bottom: 1px solid #f5f5f5;
        font-size: 13px;
        color: #333;
        transition: background-color 0.15s ease;
        line-height: 1.4;
      `;
      
      const textSpan = document.createElement('span');
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—ã
      textSpan.textContent = typeof item === 'string' ? item : item.name;
      row.appendChild(textSpan);
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      const selectTag = () => {
        insertTagIntoTextarea(item);
        setTagSuggestionsVisible(false);
      };
      
      textSpan.addEventListener('mousedown', selectTag);
      row.addEventListener('click', selectTag);
      
      // Hover —ç—Ñ—Ñ–µ–∫—Ç
      row.addEventListener('mouseenter', () => {
        row.style.backgroundColor = '#f8f9fa';
        row.style.color = '#1a1a1a';
      });
      row.addEventListener('mouseleave', () => {
        row.style.backgroundColor = 'white';
        row.style.color = '#333';
      });
      
      tagSuggestBox.appendChild(row);
    });
    
    setTagSuggestionsVisible(true);
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥ –≤ textarea
  function insertTagIntoTextarea(tag) {
    console.log('üè∑Ô∏è insertTagIntoTextarea: –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥:', tag);
    
    const text = textarea.value;
    const beforeTag = text.substring(0, tagStartPos);
    const afterTag = text.substring(tagStartPos + currentTagQuery.length + 1); // +1 –¥–ª—è —Å–∏–º–≤–æ–ª–∞ #
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ tag –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
    const tagName = typeof tag === 'object' ? tag.name : tag;
    
    const newText = beforeTag + '#' + tagName + ' ' + afterTag;
    
    console.log('üè∑Ô∏è –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', {
      beforeTag: beforeTag.substring(Math.max(0, beforeTag.length - 10)),
      currentTagQuery,
      tagName,
      afterTag: afterTag.substring(0, 10),
      newText: newText.substring(Math.max(0, newText.length - 30))
    });
    
    textarea.value = newText;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
    const newCursorPos = beforeTag.length + tagName.length + 2; // +2 –¥–ª—è # –∏ –ø—Ä–æ–±–µ–ª–∞
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    
    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    textarea.dispatchEvent(new Event('input', { bubbles: true }));
    
    setTagSuggestionsVisible(false);
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
  textarea.addEventListener('input', (e) => {
    const cursorPos = textarea.selectionStart;
    const textBeforeCursor = textarea.value.substring(0, cursorPos);
    
    console.log('üè∑Ô∏è Input event:', { 
      cursorPos, 
      textBeforeCursor: textBeforeCursor.substring(Math.max(0, textBeforeCursor.length - 50)), // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
      fullTextBeforeCursor: textBeforeCursor // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª # –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    const lastHashIndex = textBeforeCursor.lastIndexOf('#');
    console.log('üè∑Ô∏è –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞ #:', { 
      lastHashIndex, 
      textBeforeCursor: textBeforeCursor.substring(Math.max(0, lastHashIndex - 10), lastHashIndex + 20),
      cursorPos 
    });
    
    if (lastHashIndex === -1) {
      console.log('üè∑Ô∏è –°–∏–º–≤–æ–ª # –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
      setTagSuggestionsVisible(false);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ # –µ—Å—Ç—å —Å–∏–º–≤–æ–ª—ã —Ç–µ–≥–∞ (–Ω–µ –ø—É—Å—Ç–æ –∏ –Ω–µ –ø—Ä–æ–±–µ–ª)
    const textAfterHash = textBeforeCursor.substring(lastHashIndex + 1);
    console.log('üè∑Ô∏è –ü–æ—Å–ª–µ #:', { textAfterHash, length: textAfterHash.length });
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ # –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª - —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—Ç–µ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω)
    if (textAfterHash.includes(' ')) {
      console.log('üè∑Ô∏è –ü–æ—Å–ª–µ # –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª, —Ç–µ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
      setTagSuggestionsVisible(false);
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ # –ø—É—Å—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
    if (textAfterHash.trim() === '') {
      console.log('üè∑Ô∏è –ü–æ—Å–ª–µ # –ø—É—Å—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏');
      currentTagQuery = '';
      tagStartPos = lastHashIndex;
      renderTagSuggestions('');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    currentTagQuery = textAfterHash;
    tagStartPos = lastHashIndex;
    
    console.log('üè∑Ô∏è –ù–∞–π–¥–µ–Ω —Ç–µ–≥:', currentTagQuery, '–ø–æ–∑–∏—Ü–∏—è:', tagStartPos);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    console.log('üè∑Ô∏è –í—ã–∑—ã–≤–∞–µ–º renderTagSuggestions —Å –∑–∞–ø—Ä–æ—Å–æ–º:', currentTagQuery);
    renderTagSuggestions(currentTagQuery);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
  textarea.addEventListener('keydown', (e) => {
    if (!tagSuggestBox || tagSuggestBox.style.display === 'none') return;
    
    console.log('üè∑Ô∏è Keydown event:', e.key);
    
    const items = tagSuggestBox.querySelectorAll('.tag-suggestion-item');
    if (items.length === 0) return;
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    let selectedIndex = -1;
    for (let i = 0; i < items.length; i++) {
      if (items[i].classList.contains('selected')) {
        selectedIndex = i;
        break;
      }
    }
    
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –≤—ã–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (selectedIndex === -1) {
          selectedIndex = 0;
        } else {
          selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
        }
        updateSelection(items, selectedIndex);
        break;
        
      case 'ArrowUp':
        e.preventDefault();
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ, –≤—ã–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        if (selectedIndex === -1) {
          selectedIndex = items.length - 1;
        } else {
          selectedIndex = Math.max(selectedIndex - 1, 0);
        }
        updateSelection(items, selectedIndex);
        break;
        
      case 'Enter':
        e.preventDefault();
        if (selectedIndex >= 0) {
          const selectedItem = items[selectedIndex];
          const tagText = selectedItem.textContent.trim();
          insertTagIntoTextarea(tagText);
        }
        return;
        
      case 'Escape':
        e.preventDefault();
        setTagSuggestionsVisible(false);
        return;
        
      case 'Tab':
        // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Tab —Å–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç
        e.preventDefault();
        setTagSuggestionsVisible(false);
        return;
    }
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
  function updateSelection(items, selectedIndex) {
    items.forEach((item, index) => {
      if (index === selectedIndex) {
        item.classList.add('selected');
        item.style.backgroundColor = '#e3f2fd';
        item.style.color = '#1976d2';
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
      } else {
        item.classList.remove('selected');
        item.style.backgroundColor = 'white';
        item.style.color = '#333';
      }
    });
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
  textarea.addEventListener('blur', () => {
    setTimeout(() => setTagSuggestionsVisible(false), 150);
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener('scroll', () => {
    if (tagSuggestBox && tagSuggestBox.style.display === 'block') {
      setTagSuggestionsVisible(true);
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  window.addEventListener('resize', () => {
    if (tagSuggestBox && tagSuggestBox.style.display === 'block') {
      setTagSuggestionsVisible(true);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ–ª–µ NOTES
function setupAttendeeAutocomplete(textarea) {
  let attendeeSuggestBox = null;
  let currentAttendeeQuery = '';
  let attendeeStartPos = 0;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  function createAttendeeSuggestBox() {
    if (attendeeSuggestBox) return attendeeSuggestBox;
    
    attendeeSuggestBox = document.createElement('div');
    attendeeSuggestBox.className = 'attendee-suggest-box';
    attendeeSuggestBox.style.cssText = `
      position: fixed;
      background: white;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      max-height: 200px;
      overflow-y: auto;
      z-index: 9999;
      display: none;
      min-width: 220px;
      margin-top: 2px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
    const style = document.createElement('style');
    style.textContent = `
      .attendee-suggest-box::-webkit-scrollbar {
        width: 6px;
      }
      .attendee-suggest-box::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
      }
      .attendee-suggest-box::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
      }
      .attendee-suggest-box::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
      }
    `;
    document.head.appendChild(style);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫ body –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    document.body.appendChild(attendeeSuggestBox);
    
    return attendeeSuggestBox;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  function setAttendeeSuggestionsVisible(visible) {
    if (!attendeeSuggestBox) return;
    
    if (visible) {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ
      const cursorPos = textarea.selectionStart;
      const textBeforeCursor = textarea.value.substring(0, cursorPos);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ @ –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
      const lastAtIndex = textBeforeCursor.lastIndexOf('@');
      if (lastAtIndex === -1) {
        attendeeSuggestBox.style.display = 'none';
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
      const tempDiv = document.createElement('div');
      tempDiv.style.cssText = `
        position: absolute;
        visibility: hidden;
        white-space: pre-wrap;
        font: ${window.getComputedStyle(textarea).font};
        padding: ${window.getComputedStyle(textarea).padding};
        border: ${window.getComputedStyle(textarea).border};
        width: ${textarea.offsetWidth}px;
        height: auto;
        word-wrap: break-word;
      `;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—è –≤–≤–æ–¥–∞
      const textareaRect = textarea.getBoundingClientRect();
      
      // –ò–∑–º–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–æ —Å–∏–º–≤–æ–ª–∞ @
      const textUpToAt = textarea.value.substring(0, lastAtIndex + 1);
      tempDiv.textContent = textUpToAt;
      document.body.appendChild(tempDiv);
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      const textWidth = tempDiv.offsetWidth;
      const lineHeight = parseInt(window.getComputedStyle(textarea).lineHeight) || 20;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ —Å–∏–º–≤–æ–ª–∞ @
      const lines = Math.floor(textWidth / textareaRect.width);
      const verticalOffset = lines * lineHeight;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ @ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
      const textInCurrentLine = textUpToAt.split('\n').pop() || '';
      const tempDivLine = document.createElement('div');
      tempDivLine.style.cssText = `
        position: absolute;
        visibility: hidden;
        white-space: nowrap;
        font: ${window.getComputedStyle(textarea).font};
      `;
      tempDivLine.textContent = textInCurrentLine;
      document.body.appendChild(tempDivLine);
      
      const horizontalOffset = tempDivLine.offsetWidth;
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–∏–º–≤–æ–ª–∞ @
      attendeeSuggestBox.style.left = (textareaRect.left + horizontalOffset + 10) + 'px';
      attendeeSuggestBox.style.top = (textareaRect.top + verticalOffset + 5) + 'px';
      attendeeSuggestBox.style.display = 'block';
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      document.body.removeChild(tempDiv);
      document.body.removeChild(tempDivLine);
    } else {
      attendeeSuggestBox.style.display = 'none';
    }
  }
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ textarea
  function insertAttendeeIntoTextarea(attendee) {
    const cursorPos = textarea.selectionStart;
    const textBeforeCursor = textarea.value.substring(0, cursorPos);
    const textAfterCursor = textarea.value.substring(cursorPos);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ @ –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    const lastAtIndex = textBeforeCursor.lastIndexOf('@');
    if (lastAtIndex === -1) return;
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç @ –¥–æ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const textBeforeAt = textarea.value.substring(0, lastAtIndex);
    const newText = textBeforeAt + '@' + attendee + ' ' + textAfterCursor;
    
    textarea.value = newText;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const newCursorPos = textBeforeAt.length + attendee.length + 2; // +2 –¥–ª—è @ –∏ –ø—Ä–æ–±–µ–ª–∞
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ textarea
    textarea.focus();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    saveAttendeeToHistory(attendee);
  }
  
  // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async function renderAttendeeSuggestions(query) {
    if (!attendeeSuggestBox) createAttendeeSuggestBox();
    if (!attendeeSuggestBox) return;
    
    const q = (query || '').trim().toLowerCase();
    const apiList = await loadAttendeesFromAPI(q);
    const list = apiList.slice(0, 8); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    if (list.length === 0) {
      attendeeSuggestBox.innerHTML = '';
      setAttendeeSuggestionsVisible(false);
      return;
    }
    
    attendeeSuggestBox.innerHTML = '';
    list.forEach(item => {
      const row = document.createElement('div');
      row.className = 'attendee-suggestion-item';
      row.style.cssText = `
        padding: 10px 14px;
        cursor: pointer;
        border-bottom: 1px solid #f5f5f5;
        font-size: 13px;
        color: #333;
        transition: background-color 0.15s ease;
        line-height: 1.4;
      `;
      
      const textSpan = document.createElement('span');
      textSpan.textContent = item;
      row.appendChild(textSpan);
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      const selectAttendee = () => {
        insertAttendeeIntoTextarea(item);
        setAttendeeSuggestionsVisible(false);
      };
      
      textSpan.addEventListener('mousedown', selectAttendee);
      row.addEventListener('click', selectAttendee);
      
      // Hover —ç—Ñ—Ñ–µ–∫—Ç
      row.addEventListener('mouseenter', () => {
        row.style.backgroundColor = '#f8f9fa';
        row.style.color = '#1a1a1a';
      });
      
      row.addEventListener('mouseleave', () => {
        row.style.backgroundColor = 'white';
        row.style.color = '#333';
      });
      
      attendeeSuggestBox.appendChild(row);
    });
    
    setAttendeeSuggestionsVisible(true);
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
  textarea.addEventListener('input', (e) => {
    const cursorPos = textarea.selectionStart;
    const textBeforeCursor = textarea.value.substring(0, cursorPos);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª @ –ø–µ—Ä–µ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    const lastAtIndex = textBeforeCursor.lastIndexOf('@');
    if (lastAtIndex === -1) {
      setAttendeeSuggestionsVisible(false);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ @ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–∞ (–∑–Ω–∞—á–∏—Ç –º—ã –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)
    const textAfterAt = textBeforeCursor.substring(lastAtIndex + 1);
    if (textAfterAt.includes(' ')) {
      setAttendeeSuggestionsVisible(false);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    currentAttendeeQuery = textAfterAt;
    attendeeStartPos = lastAtIndex;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    renderAttendeeSuggestions(currentAttendeeQuery);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  textarea.addEventListener('keydown', (e) => {
    if (!attendeeSuggestBox || attendeeSuggestBox.style.display === 'none') return;
    
    const items = attendeeSuggestBox.querySelectorAll('.attendee-suggestion-item');
    if (items.length === 0) return;
    
    let selectedIndex = -1;
    items.forEach((item, index) => {
      if (item.classList.contains('selected')) {
        selectedIndex = index;
      }
    });
    
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
        updateSelection(items, selectedIndex);
        break;
        
      case 'ArrowUp':
        e.preventDefault();
        selectedIndex = Math.max(selectedIndex - 1, 0);
        updateSelection(items, selectedIndex);
        break;
        
      case 'Enter':
      case 'Tab':
        e.preventDefault();
        if (selectedIndex >= 0) {
          const selectedItem = items[selectedIndex];
          const attendee = selectedItem.textContent.trim();
          insertAttendeeIntoTextarea(attendee);
          setAttendeeSuggestionsVisible(false);
        }
        break;
        
      case 'Escape':
        e.preventDefault();
        setAttendeeSuggestionsVisible(false);
        break;
    }
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
  function updateSelection(items, selectedIndex) {
    items.forEach((item, index) => {
      if (index === selectedIndex) {
        item.classList.add('selected');
        item.style.backgroundColor = '#e3f2fd';
        item.style.color = '#1976d2';
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
      } else {
        item.classList.remove('selected');
        item.style.backgroundColor = 'white';
        item.style.color = '#333';
      }
    });
  }
  
  // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
  textarea.addEventListener('blur', () => {
    setTimeout(() => setAttendeeSuggestionsVisible(false), 150);
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener('scroll', () => {
    if (attendeeSuggestBox && attendeeSuggestBox.style.display === 'block') {
      setAttendeeSuggestionsVisible(true);
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  window.addEventListener('resize', () => {
    if (attendeeSuggestBox && attendeeSuggestBox.style.display === 'block') {
      setAttendeeSuggestionsVisible(true);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
function saveAttendeeToHistory(attendee) {
  try {
    const history = JSON.parse(localStorage.getItem('attendees_history') || '[]');
    const index = history.indexOf(attendee);
    if (index > -1) {
      history.splice(index, 1);
    }
    history.unshift(attendee);
    localStorage.setItem('attendees_history', JSON.stringify(history.slice(0, 20)));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
function migrateOldNotesToNewFormat(notesString) {
  if (!notesString || typeof notesString !== 'string') {
    return [];
  }
  
  console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏:', notesString);
  
  const notesLines = notesString.split('\n').filter(line => line.trim());
  const migratedNotes = [];
  const seenTexts = new Set(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  
  notesLines.forEach(note => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const isFormattedWithMetadata = note.includes(' | ') && (note.includes('[') || note.includes(']'));
    
    let migratedNote;
    
    if (isFormattedWithMetadata) {
      // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: [time | person | #topic] text
      const parsed = parseQuestionMetadata(note);
      migratedNote = {
        text: parsed.text || note,
        time: parsed.time || null,
        person: parsed.person || null,
        stream: parsed.stream || null
      };
    } else {
      // –û–±—ã—á–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      migratedNote = {
        text: note,
        time: null,
        person: null,
        topic: null
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ç–µ–∫—Å—Ç–∞
    const textContent = migratedNote.text.trim().toLowerCase();
    
    if (seenTexts.has(textContent)) {
      console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É:', migratedNote.text);
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    seenTexts.add(textContent);
    
    console.log('‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞:', migratedNote);
    migratedNotes.push(migratedNote);
  });
  
  console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è):', migratedNotes);
  return migratedNotes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Person –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
function extractPersonFromText(text) {
  if (!text || typeof text !== 'string') return null;
  console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º Person –∏–∑ —Ç–µ–∫—Å—Ç–∞:', text);
  
  // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–º–µ–Ω
  const patterns = [
    // –§–æ—Ä–º–∞—Ç 1: "[–ò–º—è]" (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö)
    /\[([A-Za-z–ê-–Ø–∞-—è]{1,20})\]/,
    // –§–æ—Ä–º–∞—Ç 2: "–ò–º—è:" (—Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
    /([A-Za-z–ê-–Ø–∞-—è]{1,20}):/,
    // –§–æ—Ä–º–∞—Ç 3: "meeting –ò–º—è" (–ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ meeting)
    /meeting\s+([A-Za-z–ê-–Ø–∞-—è]{1,20})/i,
    // –§–æ—Ä–º–∞—Ç 4: "–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–º—è" (–ø–æ—Å–ª–µ "–°–ø—Ä–æ—Å–∏—Ç—å —É")
    /–°–ø—Ä–æ—Å–∏—Ç—å\s+—É\s+([A-Za-z–ê-–Ø–∞-—è]{1,20})/i,
    // –§–æ—Ä–º–∞—Ç 5: "—É –ò–º—è" (–ø–æ—Å–ª–µ "—É" —Å –ø—Ä–æ–±–µ–ª–æ–º)
    /\b—É\s+([A-Za-z–ê-–Ø–∞-—è]{1,20})\b/i
  ];
  
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i];
    const match = text.match(pattern);
    console.log(`üîç –ü–∞—Ç—Ç–µ—Ä–Ω ${i + 1}:`, pattern, '–†–µ–∑—É–ª—å—Ç–∞—Ç:', match);
    if (match) {
      const potentialName = match[1];
      console.log('üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∏–º—è:', potentialName);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ
      if (potentialName.length <= 20 && 
          !/[0-9@#$%^&*()_+=\[\]{}|\\:";'<>?,./]/.test(potentialName) &&
          !['important', 'asap', 'integration', 'time', 'topic', 'meeting', '—Å–ø—Ä–æ—Å–∏—Ç—å'].includes(potentialName.toLowerCase()) &&
          !/\b(—Å–∫–∞–∑–∞–ª–∞|—Å–∫–∞–∑–∞–ª|–ø–æ–ø—Ä–æ—Å–∏–ª|–ø–æ–ø—Ä–æ—Å–∏–ª–∞|–Ω—É–∂–Ω–æ|–¥–æ–ª–∂–µ–Ω|–¥–æ–ª–∂–Ω–∞)\b/i.test(potentialName)) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω Person –≤ —Ç–µ–∫—Å—Ç–µ:', potentialName);
        return potentialName;
      } else {
        console.log('‚ùå –ò–º—è –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é:', potentialName);
      }
    }
  }
  
  return null;
}

// –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ Stream —Å –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–æ–º
function showStreamSelectorWithPriority(suggestedStream = null, suggestedPerson = null){
  console.log('üöÄüöÄüöÄ –û–¢–ö–†–´–í–ê–ï–ú –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û OQ –î–õ–Ø –í–´–ë–û–†–ê STREAM üöÄüöÄüöÄ');
  console.log('üîç –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –°–ö–†–ò–ü–¢–ê –ó–ê–ì–†–£–ñ–ï–ù–ê! v1759823488');
  console.log('üîç –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π Stream –∏–∑ –≤—Å—Ç—Ä–µ—á–∏:', suggestedStream);
  console.log('üîç –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π Person –∏–∑ —Ç–µ–∫—Å—Ç–∞:', suggestedPerson);
  return new Promise((resolve)=>{
    const overlay = document.createElement('div');
    overlay.style.cssText = 'position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.5); z-index:9999; display:flex; align-items:center; justify-content:center;';
    
    const dialog = document.createElement('div');
    dialog.style.cssText = 'background:white; padding:20px; border-radius:8px; min-width:400px; max-width:500px;';
    
    const title = document.createElement('h3');
    title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ Stream –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç';
    title.style.marginTop = '0';
    dialog.appendChild(title);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ü–ï–†–í–´–ú–ò
    const prioritySection = document.createElement('div');
    prioritySection.style.cssText = 'margin-bottom:16px; padding:12px; background:#f8f9fa; border-radius:6px;';
    
    const priorityTitle = document.createElement('div');
    priorityTitle.textContent = '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:';
    priorityTitle.style.cssText = 'font-size:0.9em; color:#666; margin-bottom:8px; font-weight:bold;';
    prioritySection.appendChild(priorityTitle);
    
    const priorityCheckboxes = document.createElement('div');
    priorityCheckboxes.style.cssText = 'display:flex; gap:16px;';
    
    // Important checkbox
    const importantWrap = document.createElement('div');
    importantWrap.style.cssText = 'display:flex; align-items:center; gap:4px;';
    
    const importantToggle = document.createElement('input');
    importantToggle.type = 'checkbox';
    importantToggle.id = 'priority-important';
    
    const importantLbl = document.createElement('label');
    importantLbl.htmlFor = 'priority-important';
    importantLbl.textContent = 'Important';
    importantLbl.style.cssText = 'font-size:0.9em; color:#d97706; font-weight:bold; cursor:pointer;';
    
    importantWrap.appendChild(importantToggle);
    importantWrap.appendChild(importantLbl);
    priorityCheckboxes.appendChild(importantWrap);
    
    // ASAP checkbox
    const asapWrap = document.createElement('div');
    asapWrap.style.cssText = 'display:flex; align-items:center; gap:4px;';
    
    const asapToggle = document.createElement('input');
    asapToggle.type = 'checkbox';
    asapToggle.id = 'priority-asap';
    
    const asapLbl = document.createElement('label');
    asapLbl.htmlFor = 'priority-asap';
    asapLbl.textContent = 'ASAP';
    asapLbl.style.cssText = 'font-size:0.9em; color:#dc2626; font-weight:bold; cursor:pointer;';
    
    asapWrap.appendChild(asapToggle);
    asapWrap.appendChild(asapLbl);
    priorityCheckboxes.appendChild(asapWrap);
    
    prioritySection.appendChild(priorityCheckboxes);
    dialog.appendChild(prioritySection);
    
    const inputLabel = document.createElement('div');
    inputLabel.textContent = '–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ Stream:';
    inputLabel.style.cssText = 'font-size:0.9em; color:#666; margin-bottom:8px;';
    dialog.appendChild(inputLabel);
    
    const inputWrapper = document.createElement('div');
    inputWrapper.style.cssText = 'position:relative; margin-bottom:12px;';
    
    const input = document.createElement('input');
    input.type = 'text';
    input.placeholder = '–í–≤–µ–¥–∏—Ç–µ Stream...';
    input.style.cssText = 'width:100%; padding:8px; border:1px solid #ccc; border-radius:4px;';
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π Stream
    if (suggestedStream) {
      input.value = suggestedStream;
      console.log('üîç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π Stream:', suggestedStream);
    }
    inputWrapper.appendChild(input);
    
    // –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
    const suggestions = document.createElement('div');
    suggestions.id = 'stream-suggestions-' + Date.now();
    suggestions.style.cssText = 'position:absolute; top:100%; left:0; right:0; background:white; border:2px solid #4aa3ff; border-radius:6px; max-height:200px; overflow-y:auto; display:none; z-index:10000; box-shadow:0 4px 12px rgba(0,0,0,0.2); margin-top:2px;';
    inputWrapper.appendChild(suggestions);
    
    dialog.appendChild(inputWrapper);
    
    let searchTimeout;
    let allStreams = [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ streams –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    loadStreamsFromAPI().then(streams => {
      console.log('üîç –ó–∞–≥—Ä—É–∂–µ–Ω—ã streams –¥–ª—è OQ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', streams);
      console.log('üîç –¢–∏–ø streams:', typeof streams, '–î–ª–∏–Ω–∞:', streams?.length);
      console.log('üîç –ü–µ—Ä–≤—ã–µ 3 streams:', streams?.slice(0, 3));
      allStreams = streams || [];
      console.log('üîç allStreams —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', allStreams.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    }).catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ streams:', err);
      allStreams = [];
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–æ–º
    input.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(async () => {
        const query = input.value.trim().toLowerCase();
        if (query.length < 2) {
          suggestions.style.display = 'none';
          return;
        }
        
      const filtered = allStreams.filter(stream => {
        return stream.toLowerCase().includes(query);
      });
        
        suggestions.innerHTML = '';
        if (filtered.length === 0) {
          suggestions.style.display = 'none';
          return;
        }
        
        filtered.forEach(stream => {
          const item = document.createElement('div');
          item.textContent = stream;
          item.style.cssText = 'padding:10px; cursor:pointer; border-bottom:1px solid #f0f0f0; transition:background-color 0.2s; font-size:14px;';
          item.addEventListener('mouseenter', () => item.style.background = '#e3f2fd');
          item.addEventListener('mouseleave', () => item.style.background = '');
          item.addEventListener('click', () => {
            console.log('‚úÖ –í—ã–±—Ä–∞–Ω stream –¥–ª—è OQ:', stream);
            input.value = stream;
            suggestions.style.display = 'none';
            document.body.removeChild(overlay);
            resolve({
              stream: stream,
              important: importantToggle.checked,
              asap: asapToggle.checked,
              person: suggestedPerson || null
            });
          });
          suggestions.appendChild(item);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º suggestions —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const inputRect = input.getBoundingClientRect();
        suggestions.style.display = 'block';
        suggestions.style.position = 'fixed';
        suggestions.style.top = (inputRect.bottom + 5) + 'px';
        suggestions.style.left = inputRect.left + 'px';
        suggestions.style.width = inputRect.width + 'px';
        suggestions.style.zIndex = '10000';
        console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º suggestions:', filtered.length, '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
        console.log('üîç Input –ø–æ–∑–∏—Ü–∏—è:', inputRect);
        console.log('üîç Suggestions –ø–æ–∑–∏—Ü–∏—è:', suggestions.getBoundingClientRect());
        console.log('üîç Suggestions —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:', suggestions.innerHTML);
      }, 300);
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º suggestions –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    input.addEventListener('blur', () => {
      setTimeout(() => suggestions.style.display = 'none', 150);
    });
    
    const buttons = document.createElement('div');
    buttons.style.cssText = 'display:flex; gap:8px; justify-content:flex-end;';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.textContent = '–û—Ç–º–µ–Ω–∞';
    cancelBtn.style.cssText = 'padding:6px 12px; border:1px solid #ccc; border-radius:4px; background:white; cursor:pointer;';
    cancelBtn.addEventListener('click', ()=>{
      document.body.removeChild(overlay);
      resolve(null);
    });
    
    const okBtn = document.createElement('button');
    okBtn.type = 'button';
    okBtn.textContent = '–û–ö';
    okBtn.style.cssText = 'padding:6px 12px; border:1px solid #4aa3ff; border-radius:4px; background:#4aa3ff; color:white; cursor:pointer;';
    okBtn.addEventListener('click', ()=>{
      const val = input.value.trim();
      document.body.removeChild(overlay);
      resolve({
        stream: val || null,
        important: importantToggle.checked,
        asap: asapToggle.checked,
        person: suggestedPerson || null
      });
    });
    
    buttons.appendChild(cancelBtn);
    buttons.appendChild(okBtn);
    dialog.appendChild(buttons);
    
    overlay.appendChild(dialog);
    document.body.appendChild(overlay);
    input.focus();
    
    input.addEventListener('keydown', (e)=>{
      if (e.key === 'Enter') {
        e.preventDefault();
        okBtn.click();
      } else if (e.key === 'Escape') {
        e.preventDefault();
        cancelBtn.click();
      }
    });
  });
}

function showStreamSelector(){
  return new Promise((resolve)=>{
    const overlay = document.createElement('div');
    overlay.style.cssText = 'position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.5); z-index:9999; display:flex; align-items:center; justify-content:center;';
    
    const dialog = document.createElement('div');
    dialog.style.cssText = 'background:white; padding:20px; border-radius:8px; min-width:400px; max-width:500px;';
    
    const title = document.createElement('h3');
    title.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ Stream';
    title.style.marginTop = '0';
    dialog.appendChild(title);
    
    const inputLabel = document.createElement('div');
    inputLabel.textContent = '–ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ Stream:';
    inputLabel.style.cssText = 'font-size:0.9em; color:#666; margin-bottom:8px;';
    dialog.appendChild(inputLabel);
    
    const inputWrapper = document.createElement('div');
    inputWrapper.style.cssText = 'position:relative; margin-bottom:12px;';
    
    const input = document.createElement('input');
    input.type = 'text';
    input.placeholder = '–í–≤–µ–¥–∏—Ç–µ Stream...';
    input.style.cssText = 'width:100%; padding:8px; border:1px solid #ccc; border-radius:4px;';
    inputWrapper.appendChild(input);
    
    // –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
    const suggestions = document.createElement('div');
    suggestions.id = 'stream-suggestions-' + Date.now();
    suggestions.style.cssText = 'position:absolute; top:100%; left:0; right:0; background:white; border:2px solid #4aa3ff; border-radius:6px; max-height:200px; overflow-y:auto; display:none; z-index:10000; box-shadow:0 4px 12px rgba(0,0,0,0.2); margin-top:2px;';
    inputWrapper.appendChild(suggestions);
    
    dialog.appendChild(inputWrapper);
    
    let searchTimeout;
    let allStreams = [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ streams –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    loadStreamsFromAPI().then(streams => {
      allStreams = streams;
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–æ–º
    input.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(async () => {
        const query = input.value.trim().toLowerCase();
        if (query.length < 2) {
          suggestions.style.display = 'none';
          return;
        }
        
        const filtered = allStreams.filter(stream => 
          stream.toLowerCase().includes(query)
        );
        
        suggestions.innerHTML = '';
        if (filtered.length === 0) {
          suggestions.style.display = 'none';
          return;
        }
        
        filtered.forEach(stream => {
          const item = document.createElement('div');
          item.textContent = stream;
          item.style.cssText = 'padding:8px; cursor:pointer; border-bottom:1px solid #f0f0f0;';
          item.addEventListener('mouseenter', () => item.style.background = '#f0f0f0');
          item.addEventListener('mouseleave', () => item.style.background = '');
          item.addEventListener('click', () => {
            document.body.removeChild(overlay);
            resolve(stream);
          });
          suggestions.appendChild(item);
        });
        suggestions.style.display = 'block';
      }, 300);
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º suggestions –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    input.addEventListener('blur', () => {
      setTimeout(() => suggestions.style.display = 'none', 150);
    });
    
    const buttons = document.createElement('div');
    buttons.style.cssText = 'display:flex; gap:8px; justify-content:flex-end;';
    
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.textContent = '–û—Ç–º–µ–Ω–∞';
    cancelBtn.style.cssText = 'padding:6px 12px; border:1px solid #ccc; border-radius:4px; background:white; cursor:pointer;';
    cancelBtn.addEventListener('click', ()=>{
      document.body.removeChild(overlay);
      resolve(null);
    });
    
    const okBtn = document.createElement('button');
    okBtn.type = 'button';
    okBtn.textContent = '–û–ö';
    okBtn.style.cssText = 'padding:6px 12px; border:1px solid #4aa3ff; border-radius:4px; background:#4aa3ff; color:white; cursor:pointer;';
    okBtn.addEventListener('click', ()=>{
      const val = input.value.trim();
      document.body.removeChild(overlay);
      resolve(val || null);
    });
    
    buttons.appendChild(cancelBtn);
    buttons.appendChild(okBtn);
    dialog.appendChild(buttons);
    
    overlay.appendChild(dialog);
    document.body.appendChild(overlay);
    input.focus();
    
    input.addEventListener('keydown', (e)=>{
      if (e.key === 'Enter') {
        e.preventDefault();
        okBtn.click();
      } else if (e.key === 'Escape') {
        e.preventDefault();
        cancelBtn.click();
      }
    });
  });
}

function generateEventId(){
  let maxId = 0;
  for (const ev of mockEvents) maxId = Math.max(maxId, ev.id || 0);
  return maxId + 1;
}

function formatTime(dateStr) {
  const d = new Date(dateStr);
  return d.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});
}

function formatDate(dateStr) {
  const d = new Date(dateStr);
  return d.toLocaleString();
}

function formatDateOnly(dateStr){
  const d = new Date(dateStr);
  return d.toLocaleDateString(undefined, { year:'numeric', month:'long', day:'numeric' });
}

function formatHM(dateStr){
  const d = new Date(dateStr);
  return d.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});
}

// =======================
// –¢–∞–π–º–ª–∞–π–Ω: —Å–ª–µ–≤–∞ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç, —Å–ø—Ä–∞–≤–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –¥–Ω–µ–π
// =======================
const startHour = 8;
const endHour = 22;
const slotMinutes = 30;

function pad(num) { return num.toString().padStart(2,'0'); }

function formatDayHeader(date) {
  const monthsFullEn = [
    'January','February','March','April','May','June','July','August','September','October','November','December'
  ];
  return `${date.getDate()} ${monthsFullEn[date.getMonth()]}`;
}

function renderDays(rangeBefore = 1, rangeAfter = 1) {
  const today = new Date();
  today.setHours(0,0,0,0);
  // –õ–µ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä 2 –æ–∫—Ç 2025)
  allSlotsEl.innerHTML = '';
  const dates = [];
  for (let d = -rangeBefore; d <= rangeAfter; d++) {
    const date = new Date(today);
    date.setDate(today.getDate() + d);
    dates.push(date);
  }
  // –°–ª–µ–≤–∞ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –∑–¥–µ—Å—å

  // –°–ø—Ä–∞–≤–∞: –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Å–ª–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
  dates.forEach((date, idx) => {
    if (idx !== 0) {
      const hr = document.createElement('hr');
      hr.className = 'day-divider';
      hr.dataset.date = date.toISOString().slice(0,10);
      allSlotsEl.appendChild(hr);
    }
    
    const dateStr = date.toISOString().slice(0,10);
    for(let h=8; h<=21; h++){
      for(let m=0; m<60; m+=30){
        const start = `${pad(h)}:${pad(m)}`;
        const end = m === 0 ? `${pad(h)}:30` : `${pad(h+1)}:00`;
        
        const li = document.createElement('li');
        li.className = 'slot';
        if (isSlotInPast(dateStr, start)) {
          li.classList.add('past-slot');
        }
        li.dataset.date = dateStr;
        li.dataset.start = start;
        li.dataset.end = end;
        li.textContent = `${start} ‚Äì ${end}`;
        allSlotsEl.appendChild(li);
      }
    }
  });
}

renderDays(7, 7);

// –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–∞—Ç—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
let centeringInProgress = false;

function centerTodayInDateList(){
  if (centeringInProgress) {
    return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
  }
  
  centeringInProgress = true;
  
  const activeEl = dateListEl.querySelector('.date-item.active');
  if(!activeEl) {
    console.log('–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ');
    centeringInProgress = false;
    return;
  }
  
  const topSpacer = dateListEl.querySelector('.date-spacer-top');
  if (!topSpacer) {
    console.log('–ù–µ –Ω–∞–π–¥–µ–Ω topSpacer');
    return;
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º viewport height –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
  const viewportHeight = window.innerHeight;
  const targetCenter = viewportHeight / 2;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ viewport
  const itemRect = activeEl.getBoundingClientRect();
  const itemCenter = itemRect.top + itemRect.height / 2;
  
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω—É–∂–Ω—É—é –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ø–µ–π—Å–µ—Ä–∞
  const currentSpacerHeight = topSpacer.offsetHeight || 0;
  const delta = targetCenter - itemCenter;
  const newSpacerHeight = Math.max(0, currentSpacerHeight + delta);
  
  console.log('–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:', {
    viewportHeight,
    targetCenter,
    itemCenter,
    delta,
    newSpacerHeight
  });
  
  topSpacer.style.height = `${newSpacerHeight}px`;
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
  setTimeout(() => {
    centeringInProgress = false;
  }, 100);
}

centerTodayInDateList();
window.addEventListener('resize', centerTodayInDateList);
window.addEventListener('load', ()=> {
  setTimeout(centerTodayInDateList, 100);
});

// –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ª–µ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä 2 –æ–∫—Ç 2025
function renderFixedLeftDates(){
  dateListEl.innerHTML = '';
  const monthsShortEn = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  const formatShort = d => `${d.getDate()} ${monthsShortEn[d.getMonth()]}`;
  const center = new Date(2025, 9, 2); // 2 –æ–∫—Ç 2025
  center.setHours(0,0,0,0);
  const maxUp = new Date(2025, 9, 20); // 20 –æ–∫—Ç 2025
  const minDown = new Date(2025, 8, 1); // 1 —Å–µ–Ω 2025

  const topSpacer = document.createElement('div');
  topSpacer.className = 'date-spacer-top';
  dateListEl.appendChild(topSpacer);

  for(let d = new Date(maxUp); d > center; d.setDate(d.getDate()-1)){
    const el = document.createElement('div');
    el.className = 'date-item';
    el.dataset.date = d.toISOString().slice(0,10);
    el.textContent = formatShort(d);
    dateListEl.insertBefore(el, topSpacer.nextSibling);
  }

  const centerEl = document.createElement('div');
  centerEl.className = 'date-item active';
  centerEl.dataset.date = center.toISOString().slice(0,10);
  centerEl.textContent = formatShort(center);
  dateListEl.appendChild(centerEl);

  for(let d = new Date(center); d > minDown; ){
    d.setDate(d.getDate()-1);
    const el = document.createElement('div');
    el.className = 'date-item';
    el.dataset.date = d.toISOString().slice(0,10);
    el.textContent = formatShort(d);
    dateListEl.appendChild(el);
  }

  const bottomSpacer = document.createElement('div');
  bottomSpacer.className = 'date-spacer-bottom';
  dateListEl.appendChild(bottomSpacer);

  centerTodayInDateList();
}

renderFixedLeftDates();

// –ü–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
setTimeout(centerTodayInDateList, 300);
setTimeout(centerTodayInDateList, 600);

// =======================
// –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –æ–¥–Ω–∞ –¥–∞—Ç–∞ (2 –æ–∫—Ç—è–±—Ä—è 2025) –∏ —Å–ª–æ—Ç—ã 08:00‚Äì23:00
// =======================
function formatFullRu(date){
  const monthsShortEn = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  return `${date.getDate()} ${monthsShortEn[date.getMonth()]} ${date.getFullYear().toString().slice(-2)}`;
}

function formatFullRuWithWeekday(date){
  const monthsShortEn = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  const weekdaysShortEn = ['Su','Mo','Tu','We','Th','Fr','Sa'];
  const weekday = weekdaysShortEn[date.getDay()];
  return `${date.getDate()} ${monthsShortEn[date.getMonth()]} ${date.getFullYear().toString().slice(-2)} (${weekday})`;
}

function formatActiveDate(date){
  const monthsShortEn = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  const day = date.getDate();
  const month = monthsShortEn[date.getMonth()];
  const year = date.getFullYear();
  
  return {
    day: day,
    month: month,
    year: year
  };
}

function renderSingleLeftDate(center){
  dateListEl.innerHTML = '';
  const topSpacer = document.createElement('div');
  topSpacer.className = 'date-spacer-top';
  dateListEl.appendChild(topSpacer);

  const centerEl = document.createElement('div');
  centerEl.className = 'date-item active';
  centerEl.dataset.date = center.toISOString().slice(0,10);
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
  const dateInfo = formatActiveDate(center);
  centerEl.innerHTML = `
    <div class="active-date-day">${dateInfo.day}</div>
    <div class="active-date-month">${dateInfo.month}</div>
    <div class="active-date-year">${dateInfo.year}</div>
  `;
  
  dateListEl.appendChild(centerEl);

  const bottomSpacer = document.createElement('div');
  bottomSpacer.className = 'date-spacer-bottom';
  dateListEl.appendChild(bottomSpacer);
}

function isSlotInPast(dateStr, startTime) {
  const now = getMoscowTime();
  const today = getMoscowTime();
  today.setHours(0, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è
  
  const slotDate = new Date(dateStr);
  slotDate.setHours(0, 0, 0, 0); // –ù–∞—á–∞–ª–æ –¥–Ω—è –¥–ª—è —Å–ª–æ—Ç–∞
  
  // –ï—Å–ª–∏ —Å–ª–æ—Ç –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
  if (slotDate < today) {
    return true;
  }
  
  // –ï—Å–ª–∏ —Å–ª–æ—Ç —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
  if (slotDate.getTime() === today.getTime()) {
    const [hours, minutes] = startTime.split(':').map(Number);
    const slotDateTime = getMoscowTime();
    slotDateTime.setHours(hours, minutes, 0, 0);
    
    return slotDateTime < now;
  }
  
  return false;
}

function renderSingleDaySlots(center){
  allSlotsEl.innerHTML = '';
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞)
  const year = center.getFullYear();
  const month = String(center.getMonth() + 1).padStart(2, '0');
  const day = String(center.getDate()).padStart(2, '0');
  const dateStr = `${year}-${month}-${day}`;
  console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã:', dateStr, formatFullRu(center));
  console.log('DEBUG: renderSingleDaySlots - center:', center);
  console.log('DEBUG: renderSingleDaySlots - dateStr:', dateStr);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã —Å 8:00 –¥–æ 22:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  for(let h=8; h<=21; h++){
    for(let m=0; m<60; m+=30){
      const start = `${pad(h)}:${pad(m)}`;
      const end = m === 0 ? `${pad(h)}:30` : `${pad(h+1)}:00`;
      
      // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—É—á–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const li = document.createElement('li');
      li.className = 'slot';
      if (isSlotInPast(dateStr, start)) {
        li.classList.add('past-slot');
        console.log('–î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å past-slot –¥–ª—è:', dateStr, start);
      }
      li.dataset.date = dateStr;
      li.dataset.start = start;
      li.dataset.end = end;
      li.dataset.isSplit = 'false'; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
      li.textContent = `${start} ‚Äì ${end}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
      li.onclick = () => {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
        document.querySelectorAll('#all-slots li.selected').forEach(slot => {
          slot.classList.remove('selected');
        });
        // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
        li.classList.add('selected');
        showCreateForm(li);
      };
      
      allSlotsEl.appendChild(li);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Å–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–∞ –¥–≤–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö
function splitSlotInto15Min(slotElement) {
  if (slotElement.dataset.isSplit === 'true') {
    return; // –£–∂–µ —Ä–∞–∑–¥–µ–ª–µ–Ω
  }
  
  const start = slotElement.dataset.start;
  const end = slotElement.dataset.end;
  const date = slotElement.dataset.date;
  
  // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞
  const [startHour, startMin] = start.split(':').map(Number);
  const midMin = startMin + 15;
  const midHour = midMin >= 60 ? startHour + 1 : startHour;
  const midMinAdjusted = midMin >= 60 ? midMin - 60 : midMin;
  
  const midTime = `${pad(midHour)}:${pad(midMinAdjusted)}`;
  
  // –ü–µ—Ä–≤—ã–π 15-–º–∏–Ω—É—Ç–Ω—ã–π —Å–ª–æ—Ç
  const firstSlot = document.createElement('li');
  firstSlot.className = 'slot';
  if (isSlotInPast(date, start)) {
    firstSlot.classList.add('past-slot');
  }
  firstSlot.dataset.date = date;
  firstSlot.dataset.start = start;
  firstSlot.dataset.end = midTime;
  firstSlot.dataset.isSplit = 'true';
  firstSlot.textContent = `${start} ‚Äì ${midTime}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  firstSlot.onclick = () => {
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
    document.querySelectorAll('#all-slots li.selected').forEach(slot => {
      slot.classList.remove('selected');
    });
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
    firstSlot.classList.add('selected');
    showCreateForm(firstSlot);
  };
  
  // –í—Ç–æ—Ä–æ–π 15-–º–∏–Ω—É—Ç–Ω—ã–π —Å–ª–æ—Ç
  const secondSlot = document.createElement('li');
  secondSlot.className = 'slot';
  if (isSlotInPast(date, midTime)) {
    secondSlot.classList.add('past-slot');
  }
  secondSlot.dataset.date = date;
  secondSlot.dataset.start = midTime;
  secondSlot.dataset.end = end;
  secondSlot.dataset.isSplit = 'true';
  secondSlot.textContent = `${midTime} ‚Äì ${end}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  secondSlot.onclick = () => {
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
    document.querySelectorAll('#all-slots li.selected').forEach(slot => {
      slot.classList.remove('selected');
    });
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
    secondSlot.classList.add('selected');
    showCreateForm(secondSlot);
  };
  
  // –ó–∞–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–≤—É–º—è –Ω–æ–≤—ã–º–∏
  slotElement.parentNode.insertBefore(firstSlot, slotElement);
  slotElement.parentNode.insertBefore(secondSlot, slotElement);
  slotElement.remove();
  
  console.log(`–°–ª–æ—Ç ${start} ‚Äì ${end} —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${start} ‚Äì ${midTime} –∏ ${midTime} ‚Äì ${end}`);
}

function initSingleDay(){
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
  renderSingleLeftDate(currentDisplayDate);
  renderSingleDaySlots(currentDisplayDate);
  centerTodayInDateList();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
  console.log('=== initSingleDay: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è ===');
  loadEventsFromAPI();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
// initSingleDay(); - —É–±—Ä–∞–ª–∏ –æ—Ç—Å—é–¥–∞, –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –≤ switchToDate

// –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤ –±–∞–Ω–Ω–µ—Ä–µ –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç—ã –¥–∞—Ç—É —Å–µ–≥–æ–¥–Ω—è –º–∏–Ω—É—Å 2 –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "D –º–µ—Å—è—Ü YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)"
const pastDateBannerEl = document.getElementById('past-date-banner');
if (pastDateBannerEl) {
  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
  twoDaysAgo.setHours(0,0,0,0);
  pastDateBannerEl.textContent = formatFullRuWithWeekday(twoDaysAgo);
}

// –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤ –±–∞–Ω–Ω–µ—Ä–µ "–ó–∞–≤—Ç—Ä–∞" –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
const tomorrowBannerEl = document.getElementById('tomorrow-banner');
if (tomorrowBannerEl) {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  tomorrow.setHours(0,0,0,0);
  tomorrowBannerEl.textContent = `Tomorrow (${formatDayMonth(tomorrow)})`;
}

// –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤ –±–∞–Ω–Ω–µ—Ä–µ "–°–µ–≥–æ–¥–Ω—è" —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
const todayBannerEl = document.getElementById('today-banner');
if (todayBannerEl) {
  const today = new Date();
  today.setHours(0,0,0,0);
  todayBannerEl.textContent = `–°–µ–≥–æ–¥–Ω—è (${formatDayMonth(today)})`;
}

// –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤ –±–∞–Ω–Ω–µ—Ä–µ "–í—á–µ—Ä–∞" –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
const yesterdayBannerEl = document.getElementById('yesterday-banner');
if (yesterdayBannerEl) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  yesterday.setHours(0,0,0,0);
  yesterdayBannerEl.textContent = `Yesterday (${formatDayMonth(yesterday)})`;
}

// –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤ –±–∞–Ω–Ω–µ—Ä–µ "future-date-banner" –¥–∞—Ç—É —Å–µ–≥–æ–¥–Ω—è –ø–ª—é—Å 2 –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "D –º–µ—Å—è—Ü YYYY (–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)"
const futureDateBannerEl = document.getElementById('future-date-banner');
if (futureDateBannerEl) {
  const twoDaysAhead = new Date();
  twoDaysAhead.setDate(twoDaysAhead.getDate() + 2);
  twoDaysAhead.setHours(0,0,0,0);
  futureDateBannerEl.textContent = formatFullRuWithWeekday(twoDaysAhead);
}

// –ó–∞–ø–æ–ª–Ω–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã (–Ω–∞–¥ future-date-banner)
// –û–Ω–∏ –∏–¥—É—Ç –æ—Ç –±–æ–ª–µ–µ –¥–∞–ª—ë–∫–∏—Ö –∫ –±–ª–∏–∂–Ω–∏–º: future-7 (—Å–µ–≥–æ–¥–Ω—è+7) ... future-3 (—Å–µ–≥–æ–¥–Ω—è+3)
for (let i = 7; i >= 3; i--) {
  const el = document.getElementById(`future-${i}`);
  if (el) {
    const date = new Date();
    date.setDate(date.getDate() + i);
    date.setHours(0,0,0,0);
    el.textContent = formatFullRuWithWeekday(date);
  }
}

// –ó–∞–ø–æ–ª–Ω–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã (–ø–æ–¥ past-date-banner)
// –û–Ω–∏ –∏–¥—É—Ç –æ—Ç –±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏—Ö –∫ –¥–∞–ª—ë–∫–∏–º: past-3 (—Å–µ–≥–æ–¥–Ω—è-3) ... past-7 (—Å–µ–≥–æ–¥–Ω—è-7)
for (let i = 3; i <= 7; i++) {
  const el = document.getElementById(`past-${i}`);
  if (el) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    date.setHours(0,0,0,0);
    el.textContent = formatFullRuWithWeekday(date);
  }
}

function formatDayMonth(date) {
  const monthsShortEn = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  return `${date.getDate()} ${monthsShortEn[date.getMonth()]}`;
}

// –ë–ª–æ–∫ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞—Ç–∞–º–∏ –æ—Ç–∫–ª—é—á—ë–Ω

// =======================
// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å –≤–∏–¥–∏–º—ã–º –¥–Ω—ë–º
// =======================
function parseISODateOnly(isoYYYYMMDD){
  const [y,m,d] = isoYYYYMMDD.split('-').map(Number);
  return new Date(y, m-1, d);
}

function formatShortWithYear(date){
  const monthsShortEn = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  return `${date.getDate()} ${monthsShortEn[date.getMonth()]} ${date.getFullYear()}`;
}

function setLeftLabelsByBaseDate(baseDate){
  if (clockTimeEl) clockTimeEl.textContent = formatShortWithYear(baseDate);
  const monthsFullEn = [
    'January','February','March','April','May','June','July','August','September','October','November','December'
  ];
  const tomorrow = new Date(baseDate);
  tomorrow.setDate(baseDate.getDate() + 1);
  const yesterday = new Date(baseDate);
  yesterday.setDate(baseDate.getDate() - 1);
  if (dateTopEl) dateTopEl.textContent = `${tomorrow.getDate()} ${monthsFullEn[tomorrow.getMonth()]}`;
  if (dateBottomEl) dateBottomEl.textContent = `${yesterday.getDate()} ${monthsFullEn[yesterday.getMonth()]}`;
}

function updateVisibleDayLabels(){
  const scrollContainer = sidebarEl || document.body;
  const containerTop = scrollContainer.getBoundingClientRect().top;
  let bestDateStr = null;
  let bestDist = Infinity;
  document.querySelectorAll('#all-slots > .day-divider, #all-slots > li').forEach(el=>{
    const rect = el.getBoundingClientRect();
    const dist = Math.abs(rect.top - containerTop - 8);
    const dateStr = el.dataset.date;
    if (!dateStr) return;
    if (dist < bestDist) {
      bestDist = dist;
      bestDateStr = dateStr;
    }
  });
  if (bestDateStr) {
    const baseDate = parseISODateOnly(bestDateStr);
    setLeftLabelsByBaseDate(baseDate);
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–∞—Ç—ã —Å–ª–µ–≤–∞
    document.querySelectorAll('#date-list .date-item').forEach(d=>{
      d.classList.toggle('active', d.dataset.date === bestDateStr);
    });
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –≤–∏–¥–∏–º–æ–º—É –¥–Ω—é –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞

// =======================
// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–ª–æ—Ç–æ–≤ –∏ –≤—ã–±–æ—Ä
// =======================
let isSelecting = false;
let startSlot = null;

allSlotsEl.addEventListener("mousedown", e=>{
  if(e.target.tagName === 'LI'){
    isSelecting = true;
    startSlot = e.target;
    startSlot.classList.add("selected");
  }
});

allSlotsEl.addEventListener("mouseover", e=>{
  if(isSelecting && e.target.tagName==='LI'){
    clearSelectionWithin(e.target.dataset.date);
    selectRangeWithin(startSlot, e.target);
  }
});

document.addEventListener("mouseup", e=>{
  isSelecting = false;
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ hover
allSlotsEl.addEventListener("mouseover", e=>{
  if(e.target.tagName==='LI' && !e.target.classList.contains('event-slot')){
    // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–Ω–æ–≤–∞
    if (e.target.querySelector('.empty-slot-btn')) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ - –µ—Å–ª–∏ 15 –º–∏–Ω—É—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Split
    const startTime = e.target.dataset.start;
    const endTime = e.target.dataset.end;
    if (startTime && endTime) {
      const [startH, startM] = startTime.split(':').map(Number);
      const [endH, endM] = endTime.split(':').map(Number);
      const durationMinutes = (endH * 60 + endM) - (startH * 60 + startM);
      
      // –ï—Å–ª–∏ —Å–ª–æ—Ç 15-–º–∏–Ω—É—Ç–Ω—ã–π, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Split
      if (durationMinutes === 15) return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ —â–µ–ª—á–∫–∞ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Å–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–∞ 2 –ø–æ 15 –º–∏–Ω—É—Ç
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    if (!e.target.hasAttribute('data-dblclick-added')) {
      e.target.setAttribute('data-dblclick-added', 'true');
      e.target.addEventListener('dblclick', (ev) => {
      ev.stopPropagation();
      
      const [startHour, startMin] = e.target.dataset.start.split(':').map(Number);
      const midMin = startMin + 15;
      const midTime = `${String(startHour).padStart(2, '0')}:${String(midMin).padStart(2, '0')}`;
      const date = e.target.dataset.date;
      const startTime = e.target.dataset.start;
      const endTime = e.target.dataset.end;
      
      // –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π
      e.target.classList.add('split-into-15');
      
      // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞
      e.target.style.display = 'none';
      
      // –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—ã–π 15-–º–∏–Ω—É—Ç–Ω—ã–π —Å–ª–æ—Ç
      const firstSlot = document.createElement('li');
      firstSlot.textContent = `${startTime} : ${midTime}`;
      firstSlot.dataset.date = date;
      firstSlot.dataset.start = startTime;
      firstSlot.dataset.end = midTime;
      firstSlot.style.cursor = 'pointer';
      firstSlot.style.padding = '0.3rem 0.5rem'; // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π padding –¥–ª—è –º–µ–Ω—å—à–µ–π –≤—ã—Å–æ—Ç—ã
      firstSlot.style.fontSize = '0.9em'; // –ß—É—Ç—å –º–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞
      firstSlot.addEventListener('click', (event) => {
        event.stopPropagation();
        clearSelectionWithin(date);
        firstSlot.classList.add('selected');
        showCreateForm(firstSlot);
      });
      
      // –°–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π 15-–º–∏–Ω—É—Ç–Ω—ã–π —Å–ª–æ—Ç
      const secondSlot = document.createElement('li');
      secondSlot.textContent = `${midTime} : ${endTime}`;
      secondSlot.dataset.date = date;
      secondSlot.dataset.start = midTime;
      secondSlot.dataset.end = endTime;
      secondSlot.style.cursor = 'pointer';
      secondSlot.style.padding = '0.3rem 0.5rem'; // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π padding –¥–ª—è –º–µ–Ω—å—à–µ–π –≤—ã—Å–æ—Ç—ã
      secondSlot.style.fontSize = '0.9em'; // –ß—É—Ç—å –º–µ–Ω—å—à–∏–π —à—Ä–∏—Ñ—Ç
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–æ—Ç–∞
      secondSlot.addEventListener('click', (event) => {
        event.stopPropagation();
        clearSelectionWithin(date);
        secondSlot.classList.add('selected');
        showCreateForm(secondSlot);
      });
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
      e.target.insertAdjacentElement('afterend', secondSlot);
      e.target.insertAdjacentElement('afterend', firstSlot);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –≤ localStorage
      saveSplitSlot(date, startTime, endTime);
      
        console.log(`‚úì –°–ª–æ—Ç ${startTime}-${endTime} —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ –¥–≤–∞ –ø–æ 15 –º–∏–Ω—É—Ç`);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –¥–≤–æ–π–Ω–æ–º —â–µ–ª—á–∫–µ
      e.target.title = `${e.target.title || ''}\n\nüí° –î–≤–æ–π–Ω–æ–π —â–µ–ª—á–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω—ã–µ`;
    }
  }
});

// –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω–æ–π —â–µ–ª—á–æ–∫)
// allSlotsEl.addEventListener("mouseleave", e=>{
//   if(e.target.tagName==='LI'){
//     const buttons = e.target.querySelectorAll('.empty-slot-btn');
//     buttons.forEach(btn => btn.remove());
//   }
// }, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capture phase –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã

// –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∫–ª–∏–∫–æ–º
allSlotsEl.addEventListener("click", e=>{
  if(e.target.tagName==='LI' && !isSelecting){
    const dateStr = e.target.dataset.date;
    const selectedSlots = Array.from(allSlotsEl.querySelectorAll(`li.selected[data-date="${dateStr}"]`));
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∏ –∫–ª–∏–∫–Ω—É—Ç—ã–π —Å–ª–æ—Ç - –ø—É—Å—Ç–æ–π –∏ –ù–ï –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π
    if (selectedSlots.length > 0 && !e.target.classList.contains('event-slot') && !e.target.classList.contains('selected')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∏–∫–Ω—É—Ç—ã–π —Å–ª–æ—Ç —Å–º–µ–∂–Ω—ã–º —Å —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏
      const allDateSlots = Array.from(allSlotsEl.querySelectorAll(`li[data-date="${dateStr}"]`));
      const clickedIndex = allDateSlots.indexOf(e.target);
      const selectedIndices = selectedSlots.map(slot => allDateSlots.indexOf(slot));
      const minSelected = Math.min(...selectedIndices);
      const maxSelected = Math.max(...selectedIndices);
      
      // –ï—Å–ª–∏ —Å–ª–æ—Ç —Å–º–µ–∂–Ω—ã–π (—Ä—è–¥–æ–º —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏), –¥–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–¥–µ–ª–µ–Ω–∏—é
      if (clickedIndex === minSelected - 1 || clickedIndex === maxSelected + 1) {
        e.target.classList.add('selected');
        selectedSlots.push(e.target);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω
        selectedSlots.sort((a, b) => allDateSlots.indexOf(a) - allDateSlots.indexOf(b));
        
        const firstSlot = selectedSlots[0];
        const lastSlot = selectedSlots[selectedSlots.length - 1];
        
        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è —Ñ–æ—Ä–º—ã
        const mergedSlot = {
          dataset: {
            date: firstSlot.dataset.date,
            start: firstSlot.dataset.start,
            end: lastSlot.dataset.end
          }
        };
        
        showCreateForm(mergedSlot);
      } else {
        // –°–ª–æ—Ç –Ω–µ —Å–º–µ–∂–Ω—ã–π - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
        clearSelectionWithin(dateStr);
        e.target.classList.add("selected");
        showCreateForm(e.target);
      }
    } else {
      // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –æ–¥–∏–Ω —Å–ª–æ—Ç
      clearSelectionWithin(dateStr);
      e.target.classList.add("selected");
      if (!e.target.classList.contains('event-slot')){
        showCreateForm(e.target);
      }
    }
  }
});

function clearSelectionWithin(dateStr){
  if(!dateStr) return;
  allSlotsEl.querySelectorAll(`li.selected[data-date="${dateStr}"]`).forEach(li=> li.classList.remove('selected'));
}

function selectRangeWithin(start, end){
  if(start.dataset.date !== end.dataset.date) return;
  const slots = Array.from(allSlotsEl.querySelectorAll(`li[data-date="${start.dataset.date}"]`));
  const startIndex = slots.indexOf(start);
  const endIndex = slots.indexOf(end);
  const [from, to] = startIndex<endIndex ? [startIndex,endIndex] : [endIndex,startIndex];
  for(let i=from;i<=to;i++) slots[i].classList.add('selected');
}

// =======================
// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
// =======================
async function createRecurringSeries(eventData, recurrenceType) {
  const createdEvents = [];
  const baseDate = createMoscowDate(eventData.start);
  
  let count = 0;
  let interval = 0;
  
  if (recurrenceType === 'weekly') {
    count = 1; // 1 –Ω–µ–¥–µ–ª—è (5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)
    interval = 7; // –¥–Ω–µ–π
  } else if (recurrenceType === 'daily') {
    count = 5; // 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    interval = 1; // –¥–µ–Ω—å
  }
  
  console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –∏–∑ ${count} —Å–æ–±—ã—Ç–∏–π (${recurrenceType})`);
  
  for (let i = 1; i <= count; i++) {
    let nextDate;
    let nextEndDate;
    
    if (recurrenceType === 'daily') {
      // –î–ª—è Daily —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
      nextDate = getNextWorkingDay(baseDate, i);
      // –î–ª—è Daily —Å–æ–±—ã—Ç–∏–π –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
      const duration = utcToMoscow(eventData.end).getTime() - utcToMoscow(eventData.start).getTime();
      nextEndDate = new Date(nextDate.getTime() + duration);
    } else {
      // –î–ª—è Weekly —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–µ–º –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è
      nextDate = new Date(baseDate);
      nextDate.setDate(nextDate.getDate() + (interval * i));
      
      // –î–ª—è Weekly —Å–æ–±—ã—Ç–∏–π –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
      const duration = utcToMoscow(eventData.end).getTime() - utcToMoscow(eventData.start).getTime();
      nextEndDate = new Date(nextDate.getTime() + duration);
    }
    
    const nextEventData = {
      ...eventData,
      start: toMoscowISOString(nextDate),
      end: toMoscowISOString(nextEndDate)
    };
    
    try {
      const response = await fetch('/api/events', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(nextEventData)
      });
      
      if (response.ok) {
        const created = await response.json();
        createdEvents.push(created);
        console.log(`‚úì –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${i}/${count}: ${nextDate.toLocaleDateString()}`);
      }
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è ${i}:`, err);
    }
  }
  
  return createdEvents;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
function getNextWorkingDay(baseDate, workingDayNumber) {
  const date = new Date(baseDate);
  let workingDaysFound = 0;
  
  while (workingDaysFound < workingDayNumber) {
    date.setDate(date.getDate() + 1);
    const dayOfWeek = date.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 6 = —Å—É–±–±–æ—Ç–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
    if (dayOfWeek >= 1 && dayOfWeek <= 5) {
      workingDaysFound++;
    }
  }
  
  return date;
}

// =======================
// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Å–µ—Ä–∏–∏
// =======================
async function checkAndExtendSeries(ev) {
  const eventDate = utcToMoscow(ev.start);
  const subject = ev.subject.toLowerCase();
  
  let recurrenceType = null;
  if (subject.includes('weekly')) {
    recurrenceType = 'weekly';
  } else if (subject.includes('daily') && !subject.includes('dev daily')) {
    recurrenceType = 'daily';
  }
  
  if (!recurrenceType) return;
  
  // –ò—â–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API)
  let similarEvents = [];
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ API');
    const response = await fetch('/api/events');
    if (response.ok) {
      const allEvents = await response.json();
      console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:', allEvents.length);
      similarEvents = allEvents.filter(e => 
        e.subject.toLowerCase() === subject && e.id !== ev.id
      );
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–∏–∏ "${subject}":`, similarEvents.length);
      console.log('üìã –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–∏–∏:', similarEvents.map(e => ({ id: e.id, start: e.start, subject: e.subject })));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–∏–∏:', error);
    // Fallback –∫ mockEvents
    similarEvents = mockEvents.filter(e => 
      e.subject.toLowerCase() === subject && e.id !== ev.id
    );
  }
  
  if (similarEvents.length === 0) return;
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
  similarEvents.sort((a, b) => utcToMoscow(a.start) - utcToMoscow(b.start));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–º
  const lastEvent = similarEvents[similarEvents.length - 1];
  const isLast = utcToMoscow(ev.start) >= utcToMoscow(lastEvent.start);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ)
  let hasUpcomingEvents = false;
  if (isLast) {
    const currentDate = new Date(utcToMoscow(ev.start));
    const nextDay = new Date(currentDate);
    nextDay.setDate(currentDate.getDate() + 1);
    const dayAfterTomorrow = new Date(currentDate);
    dayAfterTomorrow.setDate(currentDate.getDate() + 2);
    const threeDaysLater = new Date(currentDate);
    threeDaysLater.setDate(currentDate.getDate() + 3);
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:');
    console.log('üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:', currentDate.toLocaleDateString('ru-RU'));
    console.log('üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å:', nextDay.toLocaleDateString('ru-RU'));
    console.log('üìÖ –ß–µ—Ä–µ–∑ –¥–µ–Ω—å:', dayAfterTomorrow.toLocaleDateString('ru-RU'));
    console.log('üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è:', threeDaysLater.toLocaleDateString('ru-RU'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, —á–µ—Ä–µ–∑ –¥–µ–Ω—å –∏–ª–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
    hasUpcomingEvents = similarEvents.some(event => {
      const eventDate = new Date(utcToMoscow(event.start));
      const isNextDay = eventDate.getTime() === nextDay.getTime();
      const isDayAfterTomorrow = eventDate.getTime() === dayAfterTomorrow.getTime();
      const isThreeDaysLater = eventDate.getTime() === threeDaysLater.getTime();
      
      if (isNextDay || isDayAfterTomorrow || isThreeDaysLater) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ ${eventDate.toLocaleDateString('ru-RU')}:`, event.subject);
        return true;
      }
      return false;
    });
    
    console.log('üîç –ï—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è:', hasUpcomingEvents);
  }
  
  if (isLast && !hasUpcomingEvents) {
    const extendMore = confirm(
      `–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–µ—Ä–∏–∏ "${ev.subject}".\n\n` +
      `–°–ª–µ–¥—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ 3 –¥–Ω—è –≤–ø–µ—Ä—ë–¥).\n\n` +
      `–ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Ä–∏—é –µ—â—ë –Ω–∞ –Ω–µ–¥–µ–ª—é (5 –±—É–¥—É—â–∏—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)?`
    );
    
    if (extendMore) {
      const eventData = {
        subject: ev.subject,
        start: ev.start,
        end: ev.end,
        location: ev.location || '',
        attendees: ev.attendees || [],
        stream: ev.stream || [],
        notes: ev.notes || ''
      };
      
      await createRecurringSeries(eventData, recurrenceType);
      await loadEventsFromAPI();
      alert(`–°–µ—Ä–∏—è "${ev.subject}" –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é (5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)!`);
    }
  }
}

// =======================
// –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—É—á–∞—Å–æ–≤—ã–º —Å–ª–æ—Ç–æ–º
// =======================
async function combineWithNext(ev, currentSlot) {
  console.log(`–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è "${ev.subject}" —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ—Ç–æ–º`);
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç
  const allSlots = Array.from(allSlotsEl.querySelectorAll(`li[data-date="${currentSlot.dataset.date}"]`));
  const currentIndex = allSlots.indexOf(currentSlot);
  
  if (currentIndex === -1 || currentIndex >= allSlots.length - 1) {
    alert('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç –¥–Ω—è, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ');
    return;
  }
  
  const nextSlot = allSlots[currentIndex + 1];
  const nextSlotStartTime = nextSlot.dataset.start;
  const nextSlotEndTime = nextSlot.dataset.end;
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ª–æ—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  let nextEvent = null;
  if (nextSlot.classList.contains('event-slot')) {
    // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç
    nextEvent = mockEvents.find(e => {
      const eStart = utcToMoscow(e.start);
      const eEnd = utcToMoscow(e.end);
      const slotStart = new Date(currentSlot.dataset.date + 'T' + nextSlotStartTime);
      const slotEnd = new Date(currentSlot.dataset.date + 'T' + nextSlotEndTime);
      return eEnd > slotStart && eStart < slotEnd;
    });
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  let confirmMessage = `–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${ev.subject}" —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ—Ç–æ–º (${nextSlotStartTime} ‚Äì ${nextSlotEndTime})?`;
  
  if (nextEvent) {
    confirmMessage = `–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ —Å–æ–±—ã—Ç–∏—è?\n\n` +
      `1Ô∏è‚É£ "${ev.subject}" (${currentSlot.dataset.start} ‚Äì ${currentSlot.dataset.end})\n` +
      `2Ô∏è‚É£ "${nextEvent.subject}" (${nextSlotStartTime} ‚Äì ${nextSlotEndTime})\n\n` +
      `–†–µ–∑—É–ª—å—Ç–∞—Ç: "${ev.subject}" (${currentSlot.dataset.start} ‚Äì ${nextSlotEndTime})\n\n` +
      `‚ö†Ô∏è –í—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –µ–≥–æ –∑–∞–º–µ—Ç–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –ø–µ—Ä–≤–æ–º—É.`;
  }
  
  if (!confirm(confirmMessage)) {
    return;
  }
  
  // –†–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
  const [year, month, day] = nextSlot.dataset.date.split('-').map(Number);
  const [endHour, endMinute] = nextSlotEndTime.split(':').map(Number);
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
  const newEndTime = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}T${String(endHour).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}:00`;
  
  console.log('DEBUG combineWithNext:', {
    nextSlotDate: nextSlot.dataset.date,
    nextSlotEndTime: nextSlotEndTime,
    year, month, day, endHour, endMinute,
    newEndTime: newEndTime
  });
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–º–µ—Ç–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ
  let combinedNotes = ev.notes || '';
  let combinedAttendees = [...(ev.attendees || [])];
  let combinedStreams = [...(ev.stream || [])];
  
  if (nextEvent) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    if (nextEvent.notes) {
      combinedNotes = combinedNotes 
        ? `${combinedNotes}\n\n--- –ó–∞–º–µ—Ç–∫–∏ –∏–∑ "${nextEvent.subject}" ---\n${nextEvent.notes}`
        : nextEvent.notes;
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    if (nextEvent.attendees) {
      nextEvent.attendees.forEach(att => {
        if (!combinedAttendees.includes(att)) {
          combinedAttendees.push(att);
        }
      });
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–∏–º—ã (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    if (nextEvent.stream) {
      nextEvent.stream.forEach(str => {
        if (!combinedStreams.includes(str)) {
          combinedStreams.push(str);
        }
      });
    }
  }
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const response = await fetch(`/api/events/${ev.id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        end: newEndTime,
        notes: combinedNotes,
        attendees: combinedAttendees,
        stream: combinedStreams
      })
    });
    
    if (response.ok) {
      console.log('‚úì –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–æ –¥–æ', nextSlotEndTime);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (nextEvent) {
        await fetch(`/api/events/${nextEvent.id}`, {
          method: 'DELETE'
        });
        console.log('‚úì –í—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      }
      
      await loadEventsFromAPI();
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', err);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏—è');
  }
}

// =======================
// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Å–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –¥–≤–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö
// =======================
async function splitTo15Min(ev, currentSlot) {
  console.log(`–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è "${ev.subject}" –Ω–∞ –¥–≤–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è`);
  
  // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–æ–±—ã—Ç–∏—è
  const [startHour, startMin] = currentSlot.dataset.start.split(':').map(Number);
  const [endHour, endMin] = currentSlot.dataset.end.split(':').map(Number);
  
  // –°–æ–∑–¥–∞—ë–º –¥–≤–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
  const midMin = startMin + 15;
  const midTime = `${String(startHour).padStart(2, '0')}:${String(midMin).padStart(2, '0')}`;
  
  const event1 = {
    subject: ev.subject,
    start: createMoscowTime(currentSlot.dataset.date, currentSlot.dataset.start),
    end: createMoscowTime(currentSlot.dataset.date, midTime),
    location: ev.location || '',
    attendees: ev.attendees || [],
    stream: ev.stream || [],
    notes: ev.notes || ''
  };
  
  const event2 = {
    subject: ev.subject,
    start: createMoscowTime(currentSlot.dataset.date, midTime),
    end: createMoscowTime(currentSlot.dataset.date, currentSlot.dataset.end),
    location: ev.location || '',
    attendees: ev.attendees || [],
    stream: ev.stream || [],
    notes: ev.notes || ''
  };
  
  try {
    // –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤–æ–µ 15-–º–∏–Ω—É—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const response1 = await fetch('/api/events', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(event1)
    });
    
    // –°–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–µ 15-–º–∏–Ω—É—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const response2 = await fetch('/api/events', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(event2)
    });
    
    if (response1.ok && response2.ok) {
      console.log('‚úì –î–≤–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã');
      
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª—É—á–∞—Å–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
      await fetch(`/api/events/${ev.id}`, {
        method: 'DELETE'
      });
      console.log('‚úì –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      
      await loadEventsFromAPI();
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', err);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
  }
}

// =======================
// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã
// =======================
async function splitEvent(ev, markedSlots) {
  console.log(`–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è "${ev.subject}" –Ω–∞ ${markedSlots.length} —Å–ª–æ—Ç–æ–≤`);
  
  // –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Å–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
  const newEvents = [];
  for (let i = 0; i < markedSlots.length; i++) {
    const slot = markedSlots[i];
    const startTime = createMoscowTime(slot.dataset.date, slot.dataset.start);
    const endTime = createMoscowTime(slot.dataset.date, slot.dataset.end);
    
    const newEvent = {
      subject: ev.subject,
      start: startTime,
      end: endTime,
      location: ev.location || '',
      attendees: ev.attendees || [],
      stream: ev.stream || [],
      notes: ev.notes || ''
    };
    
    try {
      const response = await fetch('/api/events', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newEvent)
      });
      
      if (response.ok) {
        const created = await response.json();
        newEvents.push(created);
        console.log(`‚úì –°–æ–∑–¥–∞–Ω —Å–ª–æ—Ç ${i + 1}/${markedSlots.length}:`, slot.dataset.start, '-', slot.dataset.end);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞:', err);
    }
  }
  
  // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
  try {
    await fetch(`/api/events/${ev.id}`, {
      method: 'DELETE'
    });
    console.log('‚úì –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', err);
  }
  
  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
  await loadEventsFromAPI();
}

// =======================
// –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π —Å–ª–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ–±—ã—Ç–∏–π
// =======================
function resetSlotStyles() {
  const slots = Array.from(allSlotsEl.querySelectorAll('li'));
  slots.forEach(li => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    li.style.height = '';
    li.style.display = '';
    li.style.alignItems = '';
    li.classList.remove('event-slot', 'event-slot-first', 'event-slot-hidden');
    li.onclick = null;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    const start = li.dataset.start;
    const end = li.dataset.end;
    li.textContent = `${start} ‚Äì ${end}`;
    li.title = '';
  });
}

// =======================
// –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ —Ç–∞–π–º–ª–∞–π–Ω–µ
// =======================
function markEventSlots(ev){
  console.log('=== markEventSlots: –Ω–∞—á–∞–ª–æ ===', {
    subject: ev.subject,
    start: ev.start,
    end: ev.end
  });
  
  console.log('DEBUG: markEventSlots - –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
    evStart: ev.start,
    evEnd: ev.end,
    evStartType: typeof ev.start,
    evEndType: typeof ev.end
  });
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ –ë–î –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const startTime = utcToMoscow(ev.start);
  const endTime = utcToMoscow(ev.end);
  
  // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ–º UTC –≤—Ä–µ–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  const startTimeUTC = new Date(startTime.getTime() + (3 * 60 * 60 * 1000));
  const endTimeUTC = new Date(endTime.getTime() + (3 * 60 * 60 * 1000));
  
  console.log('DEBUG: markEventSlots - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:', {
    startTimeUTC: startTimeUTC.toISOString(),
    endTimeUTC: endTimeUTC.toISOString(),
    startTime: startTime.toString(),
    endTime: endTime.toString()
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const year = startTime.getFullYear();
  const month = String(startTime.getMonth() + 1).padStart(2, '0');
  const day = String(startTime.getDate()).padStart(2, '0');
  const eventDateStr = `${year}-${month}-${day}`;
  
  console.log(`–†–∞–∑–º–µ—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "${ev.subject}": –¥–∞—Ç–∞=${eventDateStr}, UTC=${startTimeUTC.toISOString()}, Moscow=${startTime}`);

  const slots = Array.from(allSlotsEl.querySelectorAll('li'));
  let markedSlots = [];
  
  console.log('=== markEventSlots: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã ===', {
    eventDateStr,
    totalSlots: slots.length,
    slotDates: [...new Set(slots.map(s => s.dataset.date))],
    firstFewSlots: slots.slice(0, 3).map(s => ({
      date: s.dataset.date,
      start: s.dataset.start,
      end: s.dataset.end
    })),
    allSlotsEl: allSlotsEl ? 'exists' : 'missing',
    allSlotsElChildren: allSlotsEl ? allSlotsEl.children.length : 'N/A'
  });
  
  // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ)
  slots.forEach(li=>{
    const slotDateStr = li.dataset.date; // YYYY-MM-DD
    
    if (slotDateStr !== eventDateStr) {
      return;
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ event-slot-hidden, —á—Ç–æ–±—ã —Å–æ–±—ã—Ç–∏—è –º–æ–≥–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å—Å—è
    // if (li.classList.contains('event-slot-hidden')) {
    //   return;
    // }
    
    const [y, mo, d] = slotDateStr.split('-').map(Number);
    const [sh, sm] = li.dataset.start.split(':').map(Number);
    const [eh, em] = li.dataset.end.split(':').map(Number);
    
    const slotStart = new Date(y, mo-1, d, sh, sm, 0, 0);
    const slotEnd = new Date(y, mo-1, d, eh, em, 0, 0);

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç ${slotDateStr} ${li.dataset.start}-${li.dataset.end}:`, {
      slotStart: slotStart.toString(),
      slotEnd: slotEnd.toString(),
      startTime: startTime.toString(),
      endTime: endTime.toString(),
      slotEndGTStartTime: slotEnd > startTime,
      slotStartLTEndTime: slotStart < endTime,
      condition: slotEnd > startTime && slotStart < endTime
    });

    if(slotEnd > startTime && slotStart < endTime){
      markedSlots.push(li);
      console.log(`‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ${slotDateStr} ${li.dataset.start}-${li.dataset.end}`);
    }
  });
  
  console.log(`  –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${markedSlots.length}`);
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const durationMinutes = (endTime - startTime) / (1000 * 60);
  const slotsNeeded = Math.ceil(durationMinutes / 15); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  
  console.log(`DEBUG: –°–æ–±—ã—Ç–∏–µ "${ev.subject}": durationMinutes=${durationMinutes}, slotsNeeded=${slotsNeeded}`);
  console.log(`DEBUG: –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è "${ev.subject}":`, markedSlots.map(s => `${s.dataset.start}-${s.dataset.end}`));
  
  // –î–ª—è 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
  if (durationMinutes <= 15 && markedSlots.length > 0) {
    const slotToSplit = markedSlots[0];
    if (slotToSplit.dataset.isSplit === 'false') {
      console.log(`DEBUG: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ—Ç ${slotToSplit.dataset.start}-${slotToSplit.dataset.end} –¥–ª—è 15-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è "${ev.subject}"`);
      splitSlotInto15Min(slotToSplit);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
      const updatedSlots = Array.from(allSlotsEl.querySelectorAll('li'));
      markedSlots = [];
      
      updatedSlots.forEach(li => {
        const slotDateStr = li.dataset.date;
        if (slotDateStr !== eventDateStr) return;
        
        const [y, mo, d] = slotDateStr.split('-').map(Number);
        const [sh, sm] = li.dataset.start.split(':').map(Number);
        const [eh, em] = li.dataset.end.split(':').map(Number);
        
        const slotStart = new Date(y, mo-1, d, sh, sm, 0, 0);
        const slotEnd = new Date(y, mo-1, d, eh, em, 0, 0);

        if(slotEnd > startTime && slotStart < endTime){
          markedSlots.push(li);
        }
      });
      
      console.log(`DEBUG: –ü–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${markedSlots.length}`);
    }
  }
  
  // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤–∏–∑—É–∞–ª—å–Ω–æ
  if (markedSlots.length > 0) {
    const firstSlot = markedSlots[0];
    const lastSlot = markedSlots[markedSlots.length - 1];
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è)
    const startTimeStr = startTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const endTimeStr = endTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const fullText = `${startTimeStr} ‚Äì ${endTimeStr}: ${ev.subject}`;
    firstSlot.textContent = fullText;
    firstSlot.title = fullText;
    firstSlot.classList.add('event-slot');
    firstSlot.classList.add('event-slot-first');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (durationMinutes <= 15) {
      firstSlot.classList.add('event-duration-15min');
      console.log(`DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å event-duration-15min –¥–ª—è "${ev.subject}"`);
      console.log(`DEBUG: –ö–ª–∞—Å—Å—ã —Å–ª–æ—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`, firstSlot.className);
      console.log(`DEBUG: –í—ã—Å–æ—Ç–∞ —Å–ª–æ—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞:`, firstSlot.style.height);
    } else if (durationMinutes <= 30) {
      firstSlot.classList.add('event-duration-30min');
      console.log(`DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å event-duration-30min –¥–ª—è "${ev.subject}"`);
      console.log(`DEBUG: –ö–ª–∞—Å—Å—ã —Å–ª–æ—Ç–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`, firstSlot.className);
    } else if (durationMinutes <= 45) {
      firstSlot.classList.add('event-duration-45min');
      console.log(`DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å event-duration-45min –¥–ª—è "${ev.subject}"`);
    } else if (durationMinutes <= 60) {
      firstSlot.classList.add('event-duration-60min');
      console.log(`DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å event-duration-60min –¥–ª—è "${ev.subject}"`);
    } else {
      firstSlot.classList.add('event-duration-long');
      console.log(`DEBUG: –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å event-duration-long –¥–ª—è "${ev.subject}"`);
    }
    firstSlot.onclick = () => {
      // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
      document.querySelectorAll('#all-slots li.selected').forEach(slot => {
        slot.classList.remove('selected');
      });
      // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
      firstSlot.classList.add('selected');
      showEvent(ev);
    };
    
    // –î–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –æ–¥–∏–Ω —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Combine
    if (markedSlots.length === 1) {
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
      const eventStart = utcToMoscow(ev.start);
      const eventEnd = utcToMoscow(ev.end);
      const durationMinutes = (eventEnd - eventStart) / (1000 * 60);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç 15-–º–∏–Ω—É—Ç–Ω—ã–º
      const allSlots = Array.from(allSlotsEl.querySelectorAll(`li[data-date="${firstSlot.dataset.date}"]`));
      const currentIndex = allSlots.indexOf(firstSlot);
      const nextSlot = allSlots[currentIndex + 1];
      const nextSlotStart = nextSlot?.dataset.start;
      const nextSlotEnd = nextSlot?.dataset.end;
      
      let nextSlotIs15Min = false;
      if (nextSlotStart && nextSlotEnd) {
        const [nsH, nsM] = nextSlotStart.split(':').map(Number);
        const [neH, neM] = nextSlotEnd.split(':').map(Number);
        const nextDuration = (neH * 60 + neM) - (nsH * 60 + nsM);
        nextSlotIs15Min = (nextDuration === 15);
      }
      
      // –î–ª—è 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Combine –≤—Å–µ–≥–¥–∞
      // –î–ª—è –ø–æ–ª—É—á–∞—Å–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Combine –≤—Å–µ–≥–¥–∞
      const shouldShowCombine = (durationMinutes === 15) || (durationMinutes === 30);
      
      if (shouldShowCombine) {
        // –ö–Ω–æ–ø–∫–∞ Combine
        const combineBtn = document.createElement('span');
        combineBtn.textContent = 'Combine';
        combineBtn.className = 'combine-btn';
        combineBtn.title = durationMinutes === 15 
          ? '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º 15-–º–∏–Ω—É—Ç–Ω—ã–º —Å–ª–æ—Ç–æ–º' 
          : '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ—Ç–æ–º';
        combineBtn.onclick = async (e) => {
          e.stopPropagation();
          await combineWithNext(ev, firstSlot);
        };
        firstSlot.appendChild(combineBtn);
      }
    }
    
    // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    if (markedSlots.length > 1) {
      // –î–ª—è 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Combine –≤–º–µ—Å—Ç–æ Split
      if (durationMinutes === 15) {
        const combineBtn = document.createElement('span');
        combineBtn.textContent = 'Combine';
        combineBtn.className = 'combine-btn';
        combineBtn.title = '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º 15-–º–∏–Ω—É—Ç–Ω—ã–º —Å–ª–æ—Ç–æ–º';
        combineBtn.onclick = async (e) => {
          e.stopPropagation();
          await combineWithNext(ev, firstSlot);
        };
        firstSlot.appendChild(combineBtn);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ —â–µ–ª—á–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        if (!firstSlot.hasAttribute('data-dblclick-added')) {
          firstSlot.setAttribute('data-dblclick-added', 'true');
          firstSlot.addEventListener('dblclick', async (e) => {
            e.stopPropagation();
            if (confirm('–†–∞–∑–¥–µ–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã?')) {
              await splitEvent(ev, markedSlots);
            }
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –¥–≤–æ–π–Ω–æ–º —â–µ–ª—á–∫–µ
          firstSlot.title = `${firstSlot.title || ''}\n\nüí° –î–≤–æ–π–Ω–æ–π —â–µ–ª—á–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è`;
        }
      }
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
      let totalHeight = 0;
      markedSlots.forEach((slot, idx) => {
        const slotStyle = getComputedStyle(slot);
        const height = parseFloat(slotStyle.height);
        const marginBottom = parseFloat(slotStyle.marginBottom);
        totalHeight += height;
        if (idx < markedSlots.length - 1) {
          totalHeight += marginBottom;
        }
      });
      
      firstSlot.style.height = `${totalHeight}px`;
      firstSlot.style.display = 'flex';
      firstSlot.style.alignItems = 'center';
      
      // –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –º–æ–≥–ª–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      // for (let i = 1; i < markedSlots.length; i++) {
      //   markedSlots[i].style.display = 'none';
      //   markedSlots[i].classList.add('event-slot-hidden');
      // }
    }
  }
}

// =======================
// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ API
// =======================
async function loadEventsFromAPI() {
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞)
  const year = currentDisplayDate.getFullYear();
  const month = String(currentDisplayDate.getMonth() + 1).padStart(2, '0');
  const day = String(currentDisplayDate.getDate()).padStart(2, '0');
  const currentDateStr = `${year}-${month}-${day}`;
  
  console.log('üîç DEBUG: currentDisplayDate:', currentDisplayDate, '‚Üí', currentDateStr);
  console.log('üîç DEBUG: –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:', new Date().toISOString().split('T')[0]);
  console.log('üîç DEBUG: currentDisplayDate === —Å–µ–≥–æ–¥–Ω—è?', currentDateStr === new Date().toISOString().split('T')[0]);
  
  try {
    console.log('=== loadEventsFromAPI: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞ –ø–µ—Ä–∏–æ–¥ ===');
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ + —Å–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
    const startDate = new Date(currentDisplayDate);
    startDate.setDate(startDate.getDate() - 7);
    const endDate = new Date(currentDisplayDate);
    endDate.setDate(endDate.getDate() + 7);
    
    const startDateStr = startDate.toISOString().split('T')[0];
    const endDateStr = endDate.toISOString().split('T')[0];
    
    
    const events = await safeFetch(`/api/events?start_date=${startDateStr}&end_date=${endDateStr}`, {}, '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π');
    
    if (events !== null) {
      // events –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º [], —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      console.log(`üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${events.length}`);
      
      mockEvents = events.map(ev => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º notes - –µ—Å–ª–∏ —ç—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
        let notes = ev.notes || '';
        if (typeof notes === 'string' && notes.trim().startsWith('[')) {
          try {
            notes = JSON.parse(notes);
          } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ notes –∫–∞–∫ JSON:', e);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            // –ú–∏–≥—Ä–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è:', ev.id);
            notes = migrateOldNotesToNewFormat(notes);
          }
        } else if (typeof notes === 'string' && notes.trim()) {
          // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –º–∏–≥—Ä–∏—Ä—É–µ–º
          console.log('üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è:', ev.id);
          notes = migrateOldNotesToNewFormat(notes);
        }
        
        return {
          id: ev.id,
          subject: ev.subject,
          start: ev.start,
          end: ev.end,
          location: ev.location || '',
          attendees: ev.attendees || [],
          stream: ev.stream || [],
          notes: notes,
          recording_url: ev.recording_url || '',
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º open_questions –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ë–î
          open_questions: (ev.open_questions || []).map(oq => {
            const parts = [];
            if (oq.time) parts.push(oq.time);
            if (oq.person) parts.push(oq.person);
            if (oq.stream) parts.push(`#${oq.stream}`);
            const prefix = parts.length ? `[${parts.join(' | ')}] ` : '';
            return `${prefix}${oq.text}`;
          }),
          actual_open_questions: ev.actual_open_questions || ''
        };
      });
      
      console.log('–°–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', mockEvents.length);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ "with Aleks" –≤ mockEvents
      const aleksEvent = mockEvents.find(e => e.id === 644);
      if (aleksEvent) {
        console.log('üîç DEBUG: Aleks event in mockEvents:', aleksEvent.actual_open_questions);
      } else {
        console.log('‚ùå DEBUG: Aleks event NOT found in mockEvents');
      }
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–º–µ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π
      clearAllEventSlots();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
      resetSlotStyles();
      
      // –û—Ç–º–µ—Ç–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ª–æ—Ç–∞—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π (–¥–ª—è weekly/daily —Å–µ—Ä–∏–π)
      console.log('–§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É:', currentDateStr);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ + —Å–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
      const datesToDisplay = [];
      for (let i = -7; i <= 7; i++) {
        const date = new Date(currentDisplayDate);
        date.setDate(date.getDate() + i);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        datesToDisplay.push(`${year}-${month}-${day}`);
      }
      
      console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∞—Ç:', datesToDisplay);
      
      const filteredEvents = mockEvents.filter(ev => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        const eventStartMoscow = utcToMoscow(ev.start);
        const year = eventStartMoscow.getFullYear();
        const month = String(eventStartMoscow.getMonth() + 1).padStart(2, '0');
        const day = String(eventStartMoscow.getDate()).padStart(2, '0');
        const eventDate = `${year}-${month}-${day}`;
        
        const matches = datesToDisplay.includes(eventDate);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if (eventDate === currentDateStr) {
          console.log('üéØ –°–û–ë–´–¢–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø:', {
            id: ev.id,
            subject: ev.subject,
            startUTC: ev.start,
            endUTC: ev.end,
            startMoscow: eventStartMoscow.toISOString(),
            eventDate: eventDate,
            currentDate: currentDateStr,
            datesToDisplay: datesToDisplay,
            matches: matches
          });
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è 566
        if (ev.id === 566) {
          console.log('üî¥üî¥üî¥ –°–û–ë–´–¢–ò–ï 566 "Sync after vac" üî¥üî¥üî¥', {
            id: ev.id,
            subject: ev.subject,
            startUTC: ev.start,
            endUTC: ev.end,
            startMoscow: eventStartMoscow.toISOString(),
            eventDate: eventDate,
            currentDate: currentDateStr,
            datesToDisplay: datesToDisplay,
            matches: matches
          });
        }
        
        console.log(`  –°–æ–±—ã—Ç–∏–µ "${ev.subject}":`, {
          startUTC: ev.start,
          startMoscow: eventStartMoscow.toISOString(),
          eventDate: eventDate,
          currentDate: currentDateStr,
          matches: matches
        });
        return matches;
      });
      
      filteredEvents.forEach(ev => {
        markEventSlots(ev);
      });
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
      hideOccupiedSlots();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      addCurrentTimeIndicator();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
      if (events.length === 0) {
        console.log('üìÖ –°–æ–±—ã—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
      }
    } else {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è - –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.', 'error');
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π:', err);
  }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ –æ—Ç —Å–æ–±—ã—Ç–∏–π
function clearAllEventSlots() {
  const slots = Array.from(allSlotsEl.querySelectorAll('li'));
  slots.forEach(li => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    li.style.height = '';
    li.style.display = '';
    li.style.alignItems = '';
    li.classList.remove('event-slot', 'event-slot-first', 'event-slot-hidden', 'selected');
    li.onclick = null;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    const start = li.dataset.start;
    const end = li.dataset.end;
    if (start && end) {
      li.textContent = `${start} ‚Äì ${end}`;
      li.title = '';
    }
  });
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
  hideOccupiedSlots();
}

// –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤)
let currentDisplayDate = new Date();
currentDisplayDate.setHours(0,0,0,0);

console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: new Date() ===', new Date());
console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: currentDisplayDate ===', currentDisplayDate);
console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –¥–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ===', currentDisplayDate.toISOString().slice(0, 10));
console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ª–æ–∫–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ ===', currentDisplayDate.toLocaleDateString());
console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: UTC –¥–∞—Ç–∞ ===', currentDisplayDate.toUTCString());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
initSingleDay();

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
  addCurrentTimeIndicator();
}, 30000); // 30 —Å–µ–∫—É–Ω–¥

// –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è" –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
updateTodayButtonVisibility();

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
loadEventsFromAPI();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ OpenQuestions
document.getElementById('openquestions-btn')?.addEventListener('click', () => {
  showOpenQuestionsModal();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
document.getElementById('calendar-picker-btn')?.addEventListener('click', () => {
  showDatePicker();
});


// =======================
// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
// =======================

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
function searchEvents(query) {
  if (!query || query.trim().length < 2) {
    searchResults = [];
    hideSearchResults();
    return;
  }

  const searchTerm = query.toLowerCase().trim();
  searchResults = [];

  // –ò—â–µ–º –ø–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º
  mockEvents.forEach(event => {
    let matchScore = 0;
    let matchedFields = [];

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è
    if (event.subject && event.subject.toLowerCase().includes(searchTerm)) {
      matchScore += 10;
      matchedFields.push('–ù–∞–∑–≤–∞–Ω–∏–µ');
    }

    // –ü–æ–∏—Å–∫ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    if (event.attendees && Array.isArray(event.attendees)) {
      event.attendees.forEach(attendee => {
        if (attendee.toLowerCase().includes(searchTerm)) {
          matchScore += 5;
          matchedFields.push('Participants');
        }
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ stream'–∞–º
    if (event.stream && Array.isArray(event.stream)) {
      event.stream.forEach(stream => {
        if (stream.toLowerCase().includes(searchTerm)) {
          matchScore += 5;
          matchedFields.push('Stream');
        }
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º
    if (event.notes && typeof event.notes === 'string' && event.notes.toLowerCase().includes(searchTerm)) {
      matchScore += 3;
      matchedFields.push('–ó–∞–º–µ—Ç–∫–∏');
    } else if (event.notes && Array.isArray(event.notes)) {
      // –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –≤ –º–∞—Å—Å–∏–≤–µ
      const notesText = event.notes.map(note => typeof note === 'string' ? note : note.text || '').join(' ').toLowerCase();
      if (notesText.includes(searchTerm)) {
        matchScore += 3;
        matchedFields.push('–ó–∞–º–µ—Ç–∫–∏');
      }
    }

    // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
    if (event.open_questions && Array.isArray(event.open_questions)) {
      event.open_questions.forEach(question => {
        if (question.toLowerCase().includes(searchTerm)) {
          matchScore += 3;
          matchedFields.push('–í–æ–ø—Ä–æ—Å—ã');
        }
      });
    }

    // –ü–æ–∏—Å–∫ –ø–æ –º–µ—Å—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    if (event.location && event.location.toLowerCase().includes(searchTerm)) {
      matchScore += 2;
      matchedFields.push('–ú–µ—Å—Ç–æ');
    }

    if (matchScore > 0) {
      searchResults.push({
        event: event,
        score: matchScore,
        matchedFields: [...new Set(matchedFields)]
      });
    }
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  searchResults.sort((a, b) => b.score - a.score);
  
  displaySearchResults();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displaySearchResults() {
  const resultsContainer = document.getElementById('search-results');
  if (!resultsContainer) return;

  if (searchResults.length === 0) {
    resultsContainer.style.display = 'none';
    return;
  }

  resultsContainer.innerHTML = '';
  resultsContainer.style.display = 'block';

  searchResults.forEach(result => {
    const event = result.event;
    const matchedFields = result.matchedFields.join(', ');
    
    const resultItem = document.createElement('div');
    resultItem.className = 'search-result-item';
    
    const startTime = utcToMoscow(event.start);
    const endTime = utcToMoscow(event.end);
    
    resultItem.innerHTML = `
      <div class="search-result-title">${highlightSearchTerm(event.subject, document.getElementById('search-input').value)}</div>
      <div class="search-result-meta">${formatHM(startTime)} ‚Äì ${formatHM(endTime)}</div>
      <div class="search-result-meta">–ù–∞–π–¥–µ–Ω–æ –≤: ${matchedFields}</div>
    `;
    
    resultItem.addEventListener('click', () => {
      showEvent(event);
      hideSearchResults();
      document.getElementById('search-input').value = '';
    });
    
    resultsContainer.appendChild(resultItem);
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function highlightSearchTerm(text, searchTerm) {
  if (!searchTerm || searchTerm.length < 2) return text;
  
  const regex = new RegExp(`(${searchTerm})`, 'gi');
  return text.replace(regex, '<span class="search-result-highlight">$1</span>');
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function hideSearchResults() {
  const resultsContainer = document.getElementById('search-results');
  if (resultsContainer) {
    resultsContainer.style.display = 'none';
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
document.getElementById('search-input')?.addEventListener('input', (e) => {
  searchEvents(e.target.value);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
document.addEventListener('click', (e) => {
  const searchContainer = document.getElementById('search-container');
  const searchInput = document.getElementById('search-input');
  const searchResults = document.getElementById('search-results');
  
  if (searchContainer && !searchContainer.contains(e.target)) {
    hideSearchResults();
  }
});

// =======================
// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–∞—Ç –ø–æ –∫–ª–∏–∫–∞–º –Ω–∞ –±–∞–Ω–Ω–µ—Ä—ã
// =======================
function switchToDate(targetDate) {
  console.log('switchToDate –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞—Ç–æ–π:', targetDate);
  currentDisplayDate = new Date(targetDate);
  currentDisplayDate.setHours(0,0,0,0);
  
  console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ currentDisplayDate:', currentDisplayDate);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º –±–ª–æ–∫–µ
  renderSingleLeftDate(currentDisplayDate);
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
  renderSingleDaySlots(currentDisplayDate);
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã
  loadEventsFromAPI();
  // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É
  centerTodayInDateList();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è"
  updateTodayButtonVisibility();
  
  console.log('–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –¥–∞—Ç—É:', formatFullRu(currentDisplayDate));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
function updateTodayButtonVisibility() {
  const todayBanner = document.getElementById('today-banner');
  if (!todayBanner) return;
  
  const today = getMoscowTime();
  today.setHours(0,0,0,0);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
  const isTodayDate = isToday(currentDisplayDate);
  
  if (isTodayDate) {
    // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è - —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    todayBanner.style.display = 'none';
  } else {
    // –ï—Å–ª–∏ –Ω–µ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    todayBanner.style.display = 'block';
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –±–∞–Ω–Ω–µ—Ä—ã –¥–∞—Ç
document.getElementById('yesterday-banner')?.addEventListener('click', () => {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  yesterday.setHours(0,0,0,0);
  switchToDate(yesterday);
});

document.getElementById('today-banner')?.addEventListener('click', () => {
  const today = getMoscowTime();
  today.setHours(0,0,0,0);
  switchToDate(today);
});

document.getElementById('tomorrow-banner')?.addEventListener('click', () => {
  const tomorrow = getMoscowTime();
  tomorrow.setDate(tomorrow.getDate() + 1);
  tomorrow.setHours(0,0,0,0);
  switchToDate(tomorrow);
});

document.getElementById('past-date-banner')?.addEventListener('click', () => {
  const twoDaysAgo = new Date();
  twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);
  twoDaysAgo.setHours(0,0,0,0);
  switchToDate(twoDaysAgo);
});

document.getElementById('future-date-banner')?.addEventListener('click', () => {
  const twoDaysAhead = new Date();
  twoDaysAhead.setDate(twoDaysAhead.getDate() + 2);
  twoDaysAhead.setHours(0,0,0,0);
  switchToDate(twoDaysAhead);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±—É–¥—É—â–∏—Ö –¥–∞—Ç
for (let i = 3; i <= 7; i++) {
  document.getElementById(`future-${i}`)?.addEventListener('click', () => {
    const date = new Date();
    date.setDate(date.getDate() + i);
    date.setHours(0,0,0,0);
    switchToDate(date);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç
for (let i = 3; i <= 7; i++) {
  document.getElementById(`past-${i}`)?.addEventListener('click', () => {
    const date = new Date();
    date.setDate(date.getDate() - i);
    date.setHours(0,0,0,0);
    switchToDate(date);
  });
}

// –ö–ª–∏–∫ –ø–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–µ–≥–æ–¥–Ω—è
document.getElementById('date-list')?.addEventListener('click', (e) => {
  if (e.target.classList.contains('date-item')) {
    const today = new Date();
    today.setHours(0,0,0,0);
    switchToDate(today);
  }
});

// =======================
// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
// =======================

let participants = []; // –ú–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
let saveTimeouts = {}; // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function showSettingsModal() {
  const modal = document.createElement('div');
  modal.className = 'settings-modal';
  modal.innerHTML = `
    <div class="settings-modal-content">
      <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</h2>
      <div id="participants-table-container"></div>
      <div class="settings-modal-buttons">
        <button class="settings-modal-btn secondary" onclick="closeSettingsModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ API
  loadParticipants();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeSettingsModal();
    }
  });
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function closeSettingsModal() {
  const modal = document.querySelector('.settings-modal');
  if (modal) {
    modal.remove();
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ API
async function loadParticipants() {
  try {
    const response = await fetch('/api/attendees');
    if (response.ok) {
      participants = await response.json();
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      addEmptyRow();
      renderParticipantsTable();
    } else {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', response.statusText);
      participants = [];
      addEmptyRow();
      renderParticipantsTable();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    participants = [];
    addEmptyRow();
    renderParticipantsTable();
  }
}

// –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
function addEmptyRow() {
  // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  let maxId = 0;
  participants.forEach(participant => {
    if (!participant.isNew && participant.id) {
      const id = parseInt(participant.id);
      if (!isNaN(id) && id > maxId) {
        maxId = id;
      }
    }
  });
  
  const newParticipant = {
    id: `new_${maxId + 1}`,
    name: '',
    surname: '',
    email: '',
    isNew: true,
    isEmpty: true
  };
  
  participants.unshift(newParticipant);
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
let sortColumn = null;
let sortDirection = 'asc';

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
function sortTable(column) {
  if (sortColumn === column) {
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Ç–æ–º—É –∂–µ —Å—Ç–æ–ª–±—Ü—É, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
  } else {
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    sortColumn = column;
    sortDirection = 'asc';
  }
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
  renderParticipantsTable();
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function renderParticipantsTable() {
  const container = document.getElementById('participants-table-container');
  if (!container) return;
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const sortedParticipants = [...participants].sort((a, b) => {
    if (sortColumn === null) return 0;
    
    let aVal, bVal;
    
    switch (sortColumn) {
      case 'id':
        aVal = parseInt(a.id) || 0;
        bVal = parseInt(b.id) || 0;
        break;
      case 'name':
        aVal = (a.name || '').toLowerCase();
        bVal = (b.name || '').toLowerCase();
        break;
      case 'surname':
        aVal = (a.surname || '').toLowerCase();
        bVal = (b.surname || '').toLowerCase();
        break;
      case 'email':
        aVal = (a.email || '').toLowerCase();
        bVal = (b.email || '').toLowerCase();
        break;
      case 'use_count':
        aVal = parseInt(a.use_count) || 0;
        bVal = parseInt(b.use_count) || 0;
        break;
      case 'last_used':
        aVal = new Date(a.last_used || 0);
        bVal = new Date(b.last_used || 0);
        break;
      case 'last_searched_at':
        aVal = new Date(a.last_searched_at || 0);
        bVal = new Date(b.last_searched_at || 0);
        break;
      default:
        return 0;
    }
    
    if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;
    if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;
    return 0;
  });
  
  let html = `
    <div class="participants-stats">
      <p><strong>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong> ${participants.filter(p => !p.isEmpty).length}</p>
    </div>
    <table class="participants-table">
      <thead>
        <tr>
          <th onclick="sortTable('id')" style="cursor: pointer;">
            ID ${sortColumn === 'id' ? (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </th>
          <th onclick="sortTable('name')" style="cursor: pointer;">
            Name ${sortColumn === 'name' ? (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </th>
          <th onclick="sortTable('surname')" style="cursor: pointer;">
            Surname ${sortColumn === 'surname' ? (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </th>
          <th onclick="sortTable('email')" style="cursor: pointer;">
            Email ${sortColumn === 'email' ? (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </th>
          <th onclick="sortTable('use_count')" style="cursor: pointer;">
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π ${sortColumn === 'use_count' ? (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </th>
          <th onclick="sortTable('last_used')" style="cursor: pointer;">
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ<br>–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ${sortColumn === 'last_used' ? (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </th>
          <th onclick="sortTable('last_searched_at')" style="cursor: pointer;">
            –ü–æ—Å–ª–µ–¥–Ω–∏–π<br>–ø–æ–∏—Å–∫ ${sortColumn === 'last_searched_at' ? (sortDirection === 'asc' ? '‚Üë' : '‚Üì') : ''}
          </th>
          <th>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
  `;
  
  sortedParticipants.forEach(participant => {
    const isNewRow = participant.isNew && participant.isEmpty;
    const rowClass = isNewRow ? 'new-row' : '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    const formatParticipantDate = (dateStr) => {
      if (!dateStr) return '-';
      const date = new Date(dateStr);
      return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    };
    
    html += `
      <tr class="${rowClass}" data-id="${participant.id}">
        <td>
          <span class="participant-id">${participant.id}</span>
        </td>
        <td>
          <input 
            type="text" 
            value="${participant.name && participant.name !== 'None' ? participant.name : ''}" 
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            onchange="updateParticipant(${participant.id}, 'name', this.value)"
            ${participant.isSaving ? 'disabled' : ''}
          />
        </td>
        <td>
          <input 
            type="text" 
            value="${participant.surname && participant.surname !== 'None' ? participant.surname : ''}" 
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
            onchange="updateParticipant(${participant.id}, 'surname', this.value)"
            ${participant.isSaving ? 'disabled' : ''}
          />
        </td>
        <td>
          <input 
            type="email" 
            value="${participant.email && participant.email !== 'None' ? participant.email : ''}" 
            placeholder="–í–≤–µ–¥–∏—Ç–µ email"
            onchange="updateParticipant(${participant.id}, 'email', this.value)"
            ${participant.isSaving ? 'disabled' : ''}
          />
        </td>
        <td>
          <span class="use-count">${participant.use_count || 0}</span>
        </td>
        <td>
          <span class="last-used">${formatParticipantDate(participant.last_used)}</span>
        </td>
        <td>
          <span class="last-searched">${formatParticipantDate(participant.last_searched_at)}</span>
        </td>
        <td>
          ${participant.isSaving ? 
            '<span class="saving-status">üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>' : 
            participant.hasError ? 
              '<span class="error-status">‚ùå –û—à–∏–±–∫–∞</span>' : 
              `<button onclick="deleteParticipant(${participant.id})" class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞">√ó</button>`
          }
        </td>
      </tr>
    `;
  });
  
  html += `
      </tbody>
    </table>
  `;
  
  container.innerHTML = html;
}

// –û–±–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)
function updateParticipant(id, field, value) {
  console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ID: ${id}, –ø–æ–ª–µ: ${field}, –∑–Ω–∞—á–µ–Ω–∏–µ: "${value}"`);
  
  const participant = participants.find(p => p.id === id);
  if (!participant) {
    console.error('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', id);
    return;
  }
  
  console.log('üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', participant);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ
  participant[field] = value === 'None' ? null : value;
  
  console.log('üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', participant);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
  const hasData = (participant.name && participant.name.trim()) || 
                  (participant.surname && participant.surname.trim()) || 
                  (participant.email && participant.email.trim());
  console.log('üìä –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ:', hasData, 'isEmpty:', participant.isEmpty);
  
  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω—É –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  if (participant.isEmpty && hasData) {
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏');
    participant.isEmpty = false;
    addEmptyRow();
    renderParticipantsTable();
    return;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  if (!participant.isEmpty || hasData) {
    console.log('‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (saveTimeouts[id]) {
      clearTimeout(saveTimeouts[id]);
      console.log('üîÑ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –æ—á–∏—â–µ–Ω');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É)
    saveTimeouts[id] = setTimeout(() => {
      console.log('üíæ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', id);
      saveParticipant(id);
    }, 1000);
    
    console.log('‚úÖ –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } else {
    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
async function saveParticipant(id) {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ID: ${id}`);
  
  const participant = participants.find(p => p.id === id);
  if (!participant) {
    console.error('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', id);
    return;
  }
  
  const name = participant.name || '';
  const surname = participant.surname || '';
  const email = participant.email || '';
  
  console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', { name, surname, email });
  
  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  if (!name.trim() && !surname.trim() && !email.trim()) {
    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –≤—Å–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ');
    return;
  }
  
  console.log('üîÑ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  participant.isSaving = true;
  renderParticipantsTable();
  
  try {
    if (participant.isNew) {
      console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...');
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      const params = new URLSearchParams();
      if (email) params.append('email', email);
      if (name) params.append('name', name);
      if (surname) params.append('surname', surname);
      
      const response = await fetch(`/api/attendees?${params.toString()}`, {
        method: 'POST'
      });
      
      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ):', response.status, response.statusText);
      
      if (response.ok) {
        const newParticipant = await response.json();
        console.log('‚úÖ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω:', newParticipant);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant.id = newParticipant.id;
        participant.isNew = false;
        participant.isEmpty = false;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setTimeout(() => {
          participant.isSaving = false;
          renderParticipantsTable();
          console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω');
        }, 500);
      } else {
        const error = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        participant.isSaving = false;
        participant.hasError = true;
        renderParticipantsTable();
        
        setTimeout(() => {
          participant.hasError = false;
          renderParticipantsTable();
        }, 2000);
      }
    } else {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...');
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      const params = new URLSearchParams();
      if (name) params.append('name', name);
      if (surname) params.append('surname', surname);
      
      const response = await fetch(`/api/attendees/${id}?${params.toString()}`, {
        method: 'PUT'
      });
      
      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ):', response.status, response.statusText);
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:', result);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        setTimeout(() => {
          participant.isSaving = false;
          renderParticipantsTable();
          console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω');
        }, 500);
      } else {
        const error = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        participant.isSaving = false;
        participant.hasError = true;
        renderParticipantsTable();
        
        setTimeout(() => {
          participant.hasError = false;
          renderParticipantsTable();
        }, 2000);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    participant.isSaving = false;
    participant.hasError = true;
    renderParticipantsTable();
    
    setTimeout(() => {
      participant.hasError = false;
      renderParticipantsTable();
    }, 2000);
  }
}

// –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
async function deleteParticipant(id) {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å ID:', id);
  const participant = participants.find(p => p.id === id);
  if (!participant) {
    console.error('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', id);
    return;
  }
  
  console.log('üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', participant);
  
  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
  if (participant.isEmpty) {
    console.log('üìù –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏');
    participants = participants.filter(p => p.id !== id);
    renderParticipantsTable();
    return;
  }
  
  const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?\n\n${participant.name || ''} ${participant.surname || ''}\n${participant.email || ''}`;
  
  if (!confirm(confirmMessage)) {
    console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    return;
  }
  
  console.log('üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ...');
  try {
    const response = await fetch(`/api/attendees/${id}`, {
      method: 'DELETE'
    });
    
    console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:', result);
      
      participants = participants.filter(p => p.id !== id);
      renderParticipantsTable();
      console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', participant);
    } else {
      const error = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: ' + error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
    alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: ' + error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.addEventListener('DOMContentLoaded', () => {
  const settingsBtn = document.getElementById('settings-btn');
  if (settingsBtn) {
    settingsBtn.addEventListener('click', showSettingsModal);
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar
  const googleSyncBtn = document.getElementById('google-sync-btn');
  if (googleSyncBtn) {
    googleSyncBtn.addEventListener('click', handleGoogleCalendarSync);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  checkAutoSyncStatus();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –±—É–¥—É—â–µ–π –¥–∞—Ç—ã
  const futureDatePickerBtn = document.getElementById('future-calendar-picker-btn');
  if (futureDatePickerBtn) {
    futureDatePickerBtn.addEventListener('click', () => {
      showFutureDatePicker();
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Morning ToDos –∏ Evening Conclusions
  initializeMorningTodos();
  initializeEveningConclusions();
});

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar
async function handleGoogleCalendarSync() {
  const button = document.getElementById('google-sync-btn');
  if (!button) return;
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  button.disabled = true;
  button.textContent = '‚è≥';
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Calendar...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google Calendar API
    const statusResponse = await fetch('http://localhost:5001/api/google-calendar/status');
    const status = await statusResponse.json();
    
    console.log('üìä –°—Ç–∞—Ç—É—Å Google Calendar:', status);
    
    if (!status.available) {
      alert('‚ùå Google Calendar API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\npip install google-api-python-client google-auth-oauthlib');
      return;
    }
    
    if (status.setup_required) {
      alert('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar API.\n\n1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Google Cloud Console\n2. –í–∫–ª—é—á–∏—Ç–µ Google Calendar API\n3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª credentials.json\n4. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ –ø–∞–ø–∫—É v2.1/');
      return;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const syncResponse = await fetch('http://localhost:5001/api/google-calendar/sync', {
      method: 'POST'
    });
    
    if (!syncResponse.ok) {
      const error = await syncResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`);
    }
    
    const result = await syncResponse.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', result);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (result.synced_events && result.synced_events.length > 0) {
      const eventTitles = result.synced_events.map(e => `‚Ä¢ ${e.title} (${e.start_time} - ${e.end_time})`).join('\n');
      alert(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${result.synced_events.length}\n\n–°–æ–±—ã—Ç–∏—è:\n${eventTitles}`);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      await loadEventsFromAPI();
    } else {
      alert(`‚ÑπÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${result.events_count}\n–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${result.synced_events ? result.synced_events.length : 0}\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–±—ã—Ç–∏—è —É–∂–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ.`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    alert(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Calendar:\n\n${error.message}`);
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    button.disabled = false;
    button.textContent = 'üìÖ';
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
async function handleCreateEventInGoogleCalendar() {
  const button = document.getElementById('google-create-btn');
  if (!button) return;
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
  button.disabled = true;
  button.textContent = '‚è≥';
  
  try {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google Calendar API
    const statusResponse = await fetch('http://localhost:5001/api/google-calendar/status');
    const status = await statusResponse.json();
    
    console.log('üìä –°—Ç–∞—Ç—É—Å Google Calendar:', status);
    
    if (!status.available) {
      alert('‚ùå Google Calendar API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\npip install google-api-python-client google-auth-oauthlib');
      return;
    }
    
    if (status.setup_required) {
      alert('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Google Calendar API.\n\n1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Google Cloud Console\n2. –í–∫–ª—é—á–∏—Ç–µ Google Calendar API\n3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª credentials.json\n4. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ –ø–∞–ø–∫—É v2.1/');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    const eventData = await promptForEventData();
    if (!eventData) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
      return;
    }
    
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', eventData);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar
    const createResponse = await fetch('http://localhost:5001/api/google-calendar/create-event', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(eventData)
    });
    
    if (!createResponse.ok) {
      const error = await createResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error}`);
    }
    
    const result = await createResponse.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', result);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    alert(`‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Google Calendar!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${eventData.title}\n–í—Ä–µ–º—è: ${eventData.start_time} - ${eventData.end_time}\n\n–°—Å—ã–ª–∫–∞: ${result.google_calendar_link}`);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await loadEventsFromAPI();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    alert(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar:\n\n${error.message}`);
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    button.disabled = false;
    button.textContent = 'üìù';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function promptForEventData() {
  return new Promise((resolve) => {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    const modal = document.createElement('div');
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10000;
    `;
    
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      width: 400px;
      max-width: 90%;
    `;
    
    modalContent.innerHTML = `
      <h3 style="margin-top: 0; color: #333;">üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar</h3>
      
      <div style="margin-bottom: 15px;">
        <label style="display: block; margin-bottom: 5px; font-weight: bold;">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</label>
        <input type="text" id="event-title" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è" 
               style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="margin-bottom: 15px;">
        <label style="display: block; margin-bottom: 5px; font-weight: bold;">–î–∞—Ç–∞:</label>
        <input type="date" id="event-date" 
               style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="margin-bottom: 15px;">
        <label style="display: block; margin-bottom: 5px; font-weight: bold;">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</label>
        <input type="time" id="event-start-time" 
               style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="margin-bottom: 15px;">
        <label style="display: block; margin-bottom: 5px; font-weight: bold;">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</label>
        <input type="time" id="event-end-time" 
               style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="margin-bottom: 15px;">
        <label style="display: block; margin-bottom: 5px; font-weight: bold;">–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
        <textarea id="event-description" placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è" 
                  style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; height: 60px; resize: vertical;"></textarea>
      </div>
      
      <div style="margin-bottom: 20px;">
        <label style="display: block; margin-bottom: 5px; font-weight: bold;">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
        <input type="text" id="event-location" placeholder="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" 
               style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
      </div>
      
      <div style="display: flex; gap: 10px; justify-content: flex-end;">
        <button id="cancel-event" style="padding: 8px 16px; border: 1px solid #ddd; background: #f5f5f5; border-radius: 4px; cursor: pointer;">–û—Ç–º–µ–Ω–∞</button>
        <button id="create-event" style="padding: 8px 16px; border: none; background: #4285f4; color: white; border-radius: 4px; cursor: pointer;">–°–æ–∑–¥–∞—Ç—å</button>
      </div>
    `;
    
    modal.appendChild(modalContent);
    document.body.appendChild(modal);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const today = new Date();
    const dateInput = modalContent.querySelector('#event-date');
    dateInput.value = today.toISOString().split('T')[0];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 —á–∞—Å –∫–∞–∫ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    const now = new Date();
    now.setHours(now.getHours() + 1);
    const startTimeInput = modalContent.querySelector('#event-start-time');
    startTimeInput.value = now.toTimeString().slice(0, 5);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ
    const endTime = new Date(now);
    endTime.setHours(endTime.getHours() + 1);
    const endTimeInput = modalContent.querySelector('#event-end-time');
    endTimeInput.value = endTime.toTimeString().slice(0, 5);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const cancelBtn = modalContent.querySelector('#cancel-event');
    const createBtn = modalContent.querySelector('#create-event');
    
    cancelBtn.addEventListener('click', () => {
      document.body.removeChild(modal);
      resolve(null);
    });
    
    createBtn.addEventListener('click', () => {
      const title = modalContent.querySelector('#event-title').value.trim();
      const date = modalContent.querySelector('#event-date').value;
      const startTime = modalContent.querySelector('#event-start-time').value;
      const endTime = modalContent.querySelector('#event-end-time').value;
      const description = modalContent.querySelector('#event-description').value.trim();
      const location = modalContent.querySelector('#event-location').value.trim();
      
      if (!title) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è');
        return;
      }
      
      if (!date) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
        return;
      }
      
      if (!startTime || !endTime) {
        alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º ISO —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
      const startDateTime = `${date}T${startTime}:00+03:00`;
      const endDateTime = `${date}T${endTime}:00+03:00`;
      
      const eventData = {
        title: title,
        start_time: startDateTime,
        end_time: endDateTime,
        description: description,
        location: location,
        attendees: []
      };
      
      document.body.removeChild(modal);
      resolve(eventData);
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
        resolve(null);
      }
    });
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    setTimeout(() => {
      modalContent.querySelector('#event-title').focus();
    }, 100);
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function checkAutoSyncStatus() {
  try {
    const response = await fetch('http://localhost:5001/api/auto-sync/status');
    const status = await response.json();
    
    const autoSyncBtn = document.getElementById('auto-sync-btn');
    if (!autoSyncBtn) return;
    
    if (status.available) {
      if (status.running) {
        autoSyncBtn.classList.add('running');
        autoSyncBtn.title = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ (–∫–∞–∂–¥—ã–µ ${status.sync_interval / 60} –º–∏–Ω)`;
      } else {
        autoSyncBtn.classList.remove('running');
        autoSyncBtn.title = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞';
      }
    } else {
      autoSyncBtn.disabled = true;
      autoSyncBtn.title = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
    }
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', status);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
async function handleAutoSync() {
  const button = document.getElementById('auto-sync-btn');
  if (!button) return;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const statusResponse = await fetch('http://localhost:5001/api/auto-sync/status');
    const status = await statusResponse.json();
    
    if (!status.available) {
      alert('‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Calendar API.');
      return;
    }
    
    if (status.running) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const stopResponse = await fetch('http://localhost:5001/api/auto-sync/stop', {
        method: 'POST'
      });
      
      if (stopResponse.ok) {
        button.classList.remove('running');
        button.title = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞';
        alert('üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      }
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const startResponse = await fetch('http://localhost:5001/api/auto-sync/start', {
        method: 'POST'
      });
      
      if (startResponse.ok) {
        button.classList.add('running');
        button.title = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ (–∫–∞–∂–¥—ã–µ ${status.sync_interval / 60} –º–∏–Ω)`;
        alert('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n\n–°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.');
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await checkAutoSyncStatus();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:', error);
    alert(`‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:\n\n${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
async function syncNow() {
  try {
    const response = await fetch('http://localhost:5001/api/auto-sync/sync-now', {
      method: 'POST'
    });
    
    if (response.ok) {
      const result = await response.json();
      alert(`‚úÖ ${result.message}`);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
      await loadEventsFromAPI();
    } else {
      const error = await response.text();
      throw new Error(error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    alert(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n\n${error.message}`);
  }
}

// –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–µ—Ä–∏–∏ –≤—Å—Ç—Ä–µ—á
async function suggestAttendeesForSeries(subject) {
  try {
    console.log('üîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
    
    const response = await fetch(`/api/similar-events?subject=${encodeURIComponent(subject)}&limit=5`);
    
    if (response.ok) {
      const data = await response.json();
      
      if (data.suggested_attendees && data.suggested_attendees.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.suggested_attendees.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        showAttendeesModal(data.suggested_attendees, data.similar_events, subject);
      } else {
        console.log('üìù –ü–æ—Ö–æ–∂–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –≤—Å—Ç—Ä–µ—á:', error);
  }
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function showAttendeesModal(suggestedAttendees, similarEvents, subject) {
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modal = document.createElement('div');
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;
  
  // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const modalContent = document.createElement('div');
  modalContent.style.cssText = `
    background: white;
    border-radius: 12px;
    padding: 24px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  `;
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  const title = document.createElement('h3');
  title.style.cssText = 'margin: 0 0 16px 0; color: #333; font-size: 18px;';
  title.textContent = 'üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏';
  modalContent.appendChild(title);
  
  // –û–ø–∏—Å–∞–Ω–∏–µ
  const description = document.createElement('p');
  description.style.cssText = 'margin: 0 0 16px 0; color: #666; font-size: 14px; line-height: 1.4;';
  description.textContent = `–ù–∞–π–¥–µ–Ω–æ ${similarEvents.length} –ø–æ—Ö–æ–∂–∏—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è "${subject}". –•–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?`;
  modalContent.appendChild(description);
  
  // –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const attendeesContainer = document.createElement('div');
  attendeesContainer.style.cssText = 'margin: 16px 0;';
  
  const attendeesTitle = document.createElement('div');
  attendeesTitle.style.cssText = 'font-weight: bold; margin-bottom: 8px; color: #333;';
  attendeesTitle.textContent = `–£—á–∞—Å—Ç–Ω–∏–∫–∏ (${suggestedAttendees.length}):`;
  attendeesContainer.appendChild(attendeesTitle);
  
  const attendeesList = document.createElement('div');
  attendeesList.style.cssText = 'display: flex; flex-wrap: wrap; gap: 6px; margin-bottom: 16px;';
  
  suggestedAttendees.forEach(attendee => {
    const attendeeTag = document.createElement('span');
    attendeeTag.style.cssText = `
      background: #4aa3ff;
      color: white;
      padding: 4px 8px;
      border-radius: 16px;
      font-size: 12px;
      cursor: pointer;
      transition: background-color 0.2s;
    `;
    attendeeTag.textContent = attendee;
    attendeeTag.title = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞';
    
    attendeeTag.addEventListener('click', () => {
      addSuggestedAttendeeToForm(attendee);
      attendeeTag.style.background = '#28a745';
      attendeeTag.textContent = '‚úì ' + attendee;
      setTimeout(() => {
        attendeeTag.remove();
      }, 1000);
    });
    
    attendeeTag.addEventListener('mouseenter', () => {
      attendeeTag.style.background = '#357abd';
    });
    
    attendeeTag.addEventListener('mouseleave', () => {
      attendeeTag.style.background = '#4aa3ff';
    });
    
    attendeesList.appendChild(attendeeTag);
  });
  
  attendeesContainer.appendChild(attendeesList);
  modalContent.appendChild(attendeesContainer);
  
  // –ö–Ω–æ–ø–∫–∏
  const buttonsContainer = document.createElement('div');
  buttonsContainer.style.cssText = 'display: flex; gap: 12px; justify-content: flex-end;';
  
  // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö"
  const addAllBtn = document.createElement('button');
  addAllBtn.style.cssText = `
    background: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    font-weight: 500;
  `;
  addAllBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ—Ö';
  addAllBtn.addEventListener('click', () => {
    suggestedAttendees.forEach(attendee => {
      addSuggestedAttendeeToForm(attendee);
    });
    modal.remove();
  });
  
  // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
  const closeBtn = document.createElement('button');
  closeBtn.style.cssText = `
    background: #6c757d;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    font-weight: 500;
  `;
  closeBtn.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
  closeBtn.addEventListener('click', () => {
    modal.remove();
  });
  
  buttonsContainer.appendChild(addAllBtn);
  buttonsContainer.appendChild(closeBtn);
  modalContent.appendChild(buttonsContainer);
  
  modal.appendChild(modalContent);
  document.body.appendChild(modal);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º—É
function addSuggestedAttendeeToForm(attendee) {
  // –ò—â–µ–º –ø–æ–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const attendeesInput = document.getElementById('ce-attendees-input');
  if (attendeesInput) {
    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const currentValue = attendeesInput.value;
    const newValue = currentValue ? `${currentValue}, ${attendee}` : attendee;
    attendeesInput.value = newValue;
    
    // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    attendeesInput.dispatchEvent(new Event('input', { bubbles: true }));
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: ${attendee}`);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(checkAutoSyncStatus, 30000);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É —Å–æ–±—ã—Ç–∏—è
async function goToEventTimeSlot(eventId) {
  try {
    console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É —Å–æ–±—ã—Ç–∏—è, ID:', eventId);
    
    const response = await fetch(`/api/events/${eventId}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const event = await response.json();
    console.log('üìÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:', event);

    const eventDate = new Date(event.start);
    if (isNaN(eventDate.getTime())) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:', event.start);
      alert('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è');
      return;
    }

    switchToDate(eventDate); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è

    setTimeout(() => {
      const slots = Array.from(allSlotsEl.querySelectorAll('li.slot'));
      const eventSlots = slots.filter(slot => {
        const slotDate = slot.dataset.date;
        const slotStart = slot.dataset.start;
        const slotEnd = slot.dataset.end;

        if (!slotDate || !slotStart || !slotEnd) return false;

        const slotDateStr = slotDate;
        const eventDateStr = eventDate.toISOString().slice(0, 10);
        if (slotDateStr !== eventDateStr) return false;

        const eventStart = createMoscowDate(event.start);
        const eventEnd = createMoscowDate(event.end);

        const slotStartTime = createSlotDate(
          parseInt(slotDate.split('-')[0]),
          parseInt(slotDate.split('-')[1]),
          parseInt(slotDate.split('-')[2]),
          parseInt(slotStart.split(':')[0]),
          parseInt(slotStart.split(':')[1])
        );
        const slotEndTime = createSlotDate(
          parseInt(slotDate.split('-')[0]),
          parseInt(slotDate.split('-')[1]),
          parseInt(slotDate.split('-')[2]),
          parseInt(slotEnd.split(':')[0]),
          parseInt(slotEnd.split(':')[1])
        );

        return (eventStart < slotEndTime && eventEnd > slotStartTime);
      });

      if (eventSlots.length > 0) {
        eventSlots[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
        eventSlots.forEach(slot => {
          slot.style.boxShadow = '0 0 10px #4aa3ff';
          slot.style.border = '2px solid #4aa3ff';
          setTimeout(() => {
            slot.style.boxShadow = '';
            slot.style.border = '';
          }, 3000);
        });
        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è –°–ª–æ—Ç—ã —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        alert('–°–ª–æ—Ç—ã —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ');
      }
    }, 1000);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–ª–æ—Ç—É: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–æ–±—ã—Ç–∏—é –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
async function goToEventFromQuestion(eventId) {
  try {
    console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–±—ã—Ç–∏—é –∏–∑ –≤–æ–ø—Ä–æ—Å–∞, ID:', eventId);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Open Questions
    closeOpenQuestionsModal();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å—Ç—Ä–µ—á (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ)
    const filteredMeetingsModal = document.querySelector('.filtered-meetings-modal');
    if (filteredMeetingsModal) {
      console.log('üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å—Ç—Ä–µ—á');
      filteredMeetingsModal.remove();
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const response = await fetch(`/api/events/${eventId}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const event = await response.json();
    console.log('üìÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', event);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    const eventDate = new Date(event.start);
    if (isNaN(eventDate.getTime())) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:', event.start);
      alert('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è');
      return;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    switchToDate(eventDate);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    setTimeout(() => {
      // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç —Å–æ–±—ã—Ç–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
      const slots = Array.from(allSlotsEl.querySelectorAll('li.slot'));
      const eventSlots = slots.filter(slot => {
        const slotDate = slot.dataset.date;
        const slotStart = slot.dataset.start;
        const slotEnd = slot.dataset.end;
        
        if (!slotDate || !slotStart || !slotEnd) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –Ω–∞ —Ç—É –∂–µ –¥–∞—Ç—É
        const slotDateStr = slotDate;
        const eventDateStr = eventDate.toISOString().slice(0, 10);
        if (slotDateStr !== eventDateStr) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        const eventStart = createMoscowDate(event.start);
        const eventEnd = createMoscowDate(event.end);
        
        const slotStartTime = createSlotDate(
          parseInt(slotDate.split('-')[0]),
          parseInt(slotDate.split('-')[1]),
          parseInt(slotDate.split('-')[2]),
          parseInt(slotStart.split(':')[0]),
          parseInt(slotStart.split(':')[1])
        );
        const slotEndTime = createSlotDate(
          parseInt(slotDate.split('-')[0]),
          parseInt(slotDate.split('-')[1]),
          parseInt(slotDate.split('-')[2]),
          parseInt(slotEnd.split(':')[0]),
          parseInt(slotEnd.split(':')[1])
        );
        
        return (eventStart < slotEndTime && eventEnd > slotStartTime);
      });
      
      if (eventSlots.length > 0) {
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ—Ç—É —Å–æ–±—ã—Ç–∏—è
        eventSlots[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã —Å–æ–±—ã—Ç–∏—è
        eventSlots.forEach(slot => {
          slot.style.boxShadow = '0 0 10px #4aa3ff';
          slot.style.border = '2px solid #4aa3ff';
          
          // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            slot.style.boxShadow = '';
            slot.style.border = '';
          }, 3000);
        });
        
        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–±—ã—Ç–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏
        console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏...');
        showEvent(event);
      } else {
        console.log('‚ö†Ô∏è –°–ª–æ—Ç—ã —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        alert('–°–ª–æ—Ç—ã —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ');
      }
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–æ–±—ã—Ç–∏—é:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–æ–±—ã—Ç–∏—é: ' + error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —Ç–µ–≥–∞–º Stream
let streamTagClickTimeout = null;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º
let meetingClickTimeout = null;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –≤—Å—Ç—Ä–µ—á–∞–º —Å —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
function handleMeetingClick(eventId) {
  console.log('üñ±Ô∏è handleMeetingClick –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ID:', eventId);
  console.log('üñ±Ô∏è –¢–∏–ø eventId:', typeof eventId);
  console.log('üñ±Ô∏è –¢–µ–∫—É—â–∏–π meetingClickTimeout:', meetingClickTimeout);
  
  // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (meetingClickTimeout) {
    console.log('üñ±Ô∏è –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç - —ç—Ç–æ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫!');
    clearTimeout(meetingClickTimeout);
    meetingClickTimeout = null;
    // –ï—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
    console.log('üñ±Ô∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –≤—Å—Ç—Ä–µ—á–µ:', eventId);
    console.log('üñ±Ô∏è –í—ã–∑—ã–≤–∞–µ–º goToEventFromQuestion...');
    goToEventFromQuestion(eventId);
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
  console.log('üñ±Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞...');
  meetingClickTimeout = setTimeout(() => {
    console.log('üñ±Ô∏è –¢–∞–π–º–∞—É—Ç —Å—Ä–∞–±–æ—Ç–∞–ª - —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª–∏–∫ –ø–æ –≤—Å—Ç—Ä–µ—á–µ:', eventId);
    console.log('üñ±Ô∏è –í—ã–∑—ã–≤–∞–µ–º showEventFromId...');
    showEventFromId(eventId);
    meetingClickTimeout = null;
  }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
let allStreamsData = [];
let allStreamsMap = {}; // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π streams –∫ –∏—Ö ID
let allOpenQuestionsData = [];
let allNotesQuestionsData = [];
let allEventsData = []; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ–±—ã—Ç–∏–π
let currentStreamFilter = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
async function toggleQuestionFlag(questionId, flagType, newValue) {
  console.log(`üè∑Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ ${flagType} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId} –Ω–∞ ${newValue}`);
  console.log(`üè∑Ô∏è –¢–∏–ø questionId: ${typeof questionId}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${questionId}`);
  
  // –ù–∞—Ö–æ–¥–∏–º —á–µ–∫–±–æ–∫—Å –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
  const checkboxId = `${flagType === 'asap' ? 'asap' : 'imp'}-${questionId}`;
  console.log(`üè∑Ô∏è –ò—â–µ–º —á–µ–∫–±–æ–∫—Å —Å ID: ${checkboxId}`);
  
  const checkbox = document.getElementById(checkboxId);
  if (checkbox) {
    console.log(`‚úÖ –ß–µ–∫–±–æ–∫—Å –Ω–∞–π–¥–µ–Ω:`, checkbox);
    checkbox.disabled = true;
  } else {
    console.error(`‚ùå –ß–µ–∫–±–æ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω —Å ID: ${checkboxId}`);
    return;
  }
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö (–∏—â–µ–º –≤ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö)
    let question = allOpenQuestionsData.find(q => q.id === questionId);
    if (!question) {
      question = allNotesQuestionsData.find(q => q.id === questionId);
    }
    if (!question) {
      throw new Error(`–í–æ–ø—Ä–æ—Å —Å ID ${questionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    console.log(`üîç DEBUG: –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:`, question);
    console.log(`üîç DEBUG: question.stream = "${question.stream}", question.topic = "${question.topic}"`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {
      event_id: question.event_id || null,
      question_text: question.question_text || question.question || '',
      time: question.time || null,
      person: question.person || null,
      stream: question.stream || question.topic || 'General', // –ò—Å–ø–æ–ª—å–∑—É–µ–º stream –∏–ª–∏ topic —Å fallback
      important: flagType === 'imp' ? newValue : (question.important || false),
      asap: flagType === 'asap' ? newValue : (question.asap || false),
      note_index: null
    };
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateData);
    console.log(`üîç DEBUG: question.event_id = "${question.event_id}", question.question_text = "${question.question_text}", question.question = "${question.question}"`);
    
    const response = await fetch(`/api/open-questions/${questionId}/update`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω:', result);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
    if (question) {
      if (flagType === 'asap') {
        question.asap = newValue;
      } else if (flagType === 'imp') {
        question.important = newValue;
      }
    }
    
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–∞–º –µ—Å—Ç—å
    const otherQuestion = allOpenQuestionsData.find(q => q.id === questionId) || 
                         allNotesQuestionsData.find(q => q.id === questionId);
    if (otherQuestion && otherQuestion !== question) {
      if (flagType === 'asap') {
        otherQuestion.asap = newValue;
      } else if (flagType === 'imp') {
        otherQuestion.important = newValue;
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    renderOpenQuestionsModal();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(`–§–ª–∞–≥ ${flagType.toUpperCase()} ${newValue ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '—Å–Ω—è—Ç'}`, 'success');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞:', error);
    showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞: ${error.message}`, 'error');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (checkbox) {
      checkbox.checked = !newValue;
    }
  } finally {
    // –í–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –æ–±—Ä–∞—Ç–Ω–æ
    if (checkbox) {
      checkbox.disabled = false;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async function editQuestion(questionId) {
  console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å ID: ${questionId}`);
  
  // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö (–∏—â–µ–º –≤ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö)
  let question = allOpenQuestionsData.find(q => q.id === questionId);
  if (!question) {
    question = allNotesQuestionsData.find(q => q.id === questionId);
  }
  if (!question) {
    console.error(`‚ùå –í–æ–ø—Ä–æ—Å —Å ID ${questionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    alert('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 600px;">
      <div class="modal-header">
        <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h3>
        <span class="close" onclick="closeEditQuestionModal()">&times;</span>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <label for="edit-question-text">–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</label>
          <textarea id="edit-question-text" rows="3" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">${question.question}</textarea>
        </div>
        <div class="form-group">
          <label for="edit-question-stream">Stream (—Ç–µ–º–∞):</label>
          <input type="text" id="edit-question-stream" value="${question.stream || ''}" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <div class="form-group">
          <label for="edit-question-person">–ö—Ç–æ:</label>
          <input type="text" id="edit-question-person" value="${question.person || ''}" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <div class="form-group">
          <label for="edit-question-time">–í—Ä–µ–º—è:</label>
          <input type="text" id="edit-question-time" value="${question.time || ''}" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="edit-question-important" ${question.important ? 'checked' : ''}>
            –í–∞–∂–Ω–æ
          </label>
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="edit-question-asap" ${question.asap ? 'checked' : ''}>
            ASAP
          </label>
        </div>
        <div class="form-group">
          <label>
            <input type="checkbox" id="edit-question-resolved" ${question.resolved ? 'checked' : ''}>
            –†–µ—à–µ–Ω–æ
          </label>
        </div>
        <div class="form-group">
          <p><strong>–í—Å—Ç—Ä–µ—á–∞:</strong> ${question.event}</p>
          <p><strong>–î–∞—Ç–∞:</strong> ${question.date}</p>
        </div>
      </div>
      <div class="modal-footer">
        <button onclick="saveQuestion(${questionId})" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button onclick="closeEditQuestionModal()" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  modal.style.display = 'block';
  
  // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞
  setTimeout(() => {
    document.getElementById('edit-question-text').focus();
  }, 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function closeEditQuestionModal() {
  const modal = document.querySelector('.modal');
  if (modal) {
    modal.remove();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ–ø—Ä–æ—Å–∞
async function saveQuestion(questionId) {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
  
  const textElement = document.getElementById('edit-question-text');
  const streamElement = document.getElementById('edit-question-stream');
  const personElement = document.getElementById('edit-question-person');
  const timeElement = document.getElementById('edit-question-time');
  const importantElement = document.getElementById('edit-question-important');
  const asapElement = document.getElementById('edit-question-asap');
  const resolvedElement = document.getElementById('edit-question-resolved');
  
  if (!textElement || !streamElement) {
    alert('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  const updatedQuestion = {
    text: textElement.value.trim(),
    stream: streamElement.value.trim(),
    person: personElement.value.trim(),
    time: timeElement.value.trim(),
    important: importantElement.checked,
    asap: asapElement.checked,
    is_resolved: resolvedElement.checked
  };
  
  if (!updatedQuestion.text) {
    alert('–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    return;
  }
  
  if (!updatedQuestion.stream) {
    alert('Stream (—Ç–µ–º–∞) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    return;
  }
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const response = await fetch(`/api/open-questions/${questionId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updatedQuestion)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', result);
    
    // –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å event_id, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if (question.eventId) {
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º ID: ${question.eventId}`);
      await syncQuestionWithEvent(questionId, updatedQuestion, question.eventId);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeEditQuestionModal();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    await collectOpenQuestionsData();
    renderOpenQuestionsModal();
    
    alert('–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å inline –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
async function toggleCommentsInline(questionId) {
  console.log(`üí¨ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º inline –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
  console.log(`üí¨ –¢–∏–ø questionId: ${typeof questionId}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${questionId}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID
  const commentsExpandable = document.getElementById(`comments-expandable-${questionId}`);
  console.log(`üí¨ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç comments-expandable-${questionId}:`, commentsExpandable);
  
  if (!commentsExpandable) {
    console.error(`‚ùå –≠–ª–µ–º–µ–Ω—Ç comments-expandable-${questionId} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ ID
    const allCommentsElements = document.querySelectorAll('[id^="comments-expandable-"]');
    console.log(`üí¨ –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:`, allCommentsElements);
    return;
  }
  
  if (commentsExpandable.style.display === 'none') {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    console.log(`üí¨ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
    commentsExpandable.style.display = 'block';
    await loadCommentsInline(questionId);
  } else {
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å
    console.log(`üí¨ –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
    commentsExpandable.style.display = 'none';
  }
}

async function loadCommentsInline(questionId) {
  console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º inline –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
  console.log(`üì• –¢–∏–ø questionId: ${typeof questionId}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${questionId}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ questionId - —ç—Ç–æ —á–∏—Å–ª–æ
  if (typeof questionId !== 'number' || isNaN(questionId)) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø questionId:', questionId);
    const commentsList = document.getElementById(`comments-list-inline-${questionId}`);
    if (commentsList) {
      commentsList.innerHTML = '<div class="error-text-inline">–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞</div>';
    }
    return;
  }
  
  try {
    const response = await fetch(`/api/open-questions/${questionId}/comments`);
    console.log(`üì° Response status: ${response.status}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Response error:', errorText);
      throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
    }
    
    const comments = await response.json();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${comments.length}`);
    console.log(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:`, comments);
    
    const commentsList = document.getElementById(`comments-list-inline-${questionId}`);
    if (!commentsList) {
      console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç comments-list-inline –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID:', questionId);
      return;
    }
    
    if (comments.length === 0) {
      commentsList.innerHTML = '<div class="no-comments-text-inline">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
    } else {
      let html = '';
      comments.forEach(comment => {
        const date = new Date(comment.created_at).toLocaleDateString('ru-RU');
        const time = new Date(comment.created_at).toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
        html += `
          <div class="comment-item-inline" id="comment-${comment.id}">
            <div class="comment-header-inline">
              <span class="comment-author-inline">${comment.author}</span>
              <span class="comment-datetime-inline">${date} ${time}</span>
              <div class="comment-actions-inline">
                <button onclick="editComment(${questionId}, ${comment.id})" class="comment-edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                <button onclick="deleteComment(${questionId}, ${comment.id})" class="comment-delete-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
              </div>
            </div>
            <div class="comment-text-inline" id="comment-text-${comment.id}">${comment.comment_text}</div>
          </div>
        `;
      });
      commentsList.innerHTML = html;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    const commentsList = document.getElementById(`comments-list-inline-${questionId}`);
    if (commentsList) {
      commentsList.innerHTML = '<div class="error-text-inline">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>';
    }
  }
}

async function addCommentInline(questionId) {
  console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º inline –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–æ–ø—Ä–æ—Å—É ${questionId}`);
  
  const commentInput = document.getElementById(`comment-input-inline-${questionId}`);
  const commentText = commentInput.value.trim();
  
  if (!commentText) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    return;
  }
  
  try {
    const response = await fetch(`/api/open-questions/${questionId}/comments`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        comment_text: commentText,
        author: 'User' // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const newComment = await response.json();
    console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω:', newComment);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    commentInput.value = '';
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    await loadCommentsInline(questionId);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function editComment(questionId, commentId) {
  console.log(`‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${commentId} –∫ –≤–æ–ø—Ä–æ—Å—É ${questionId}`);
  
  const commentElement = document.getElementById(`comment-text-${commentId}`);
  if (!commentElement) {
    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const currentText = commentElement.textContent;
  
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const editInput = document.createElement('textarea');
  editInput.value = currentText;
  editInput.className = 'comment-edit-input';
  editInput.style.cssText = 'width: 100%; padding: 4px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px; resize: vertical; min-height: 60px;';
  
  // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  commentElement.innerHTML = '';
  commentElement.appendChild(editInput);
  editInput.focus();
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
  const buttonContainer = document.createElement('div');
  buttonContainer.style.cssText = 'margin-top: 8px; display: flex; gap: 8px;';
  
  const saveBtn = document.createElement('button');
  saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
  saveBtn.className = 'comment-save-btn';
  saveBtn.style.cssText = 'background: #007bff; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 11px;';
  
  const cancelBtn = document.createElement('button');
  cancelBtn.textContent = '–û—Ç–º–µ–Ω–∞';
  cancelBtn.className = 'comment-cancel-btn';
  cancelBtn.style.cssText = 'background: #6c757d; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 11px;';
  
  buttonContainer.appendChild(saveBtn);
  buttonContainer.appendChild(cancelBtn);
  commentElement.appendChild(buttonContainer);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  saveBtn.onclick = async () => {
    const newText = editInput.value.trim();
    if (!newText) {
      alert('–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    
    try {
      const response = await fetch(`/api/open-questions/${questionId}/comments/${commentId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          comment_text: newText,
          author: 'Anonymous' // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –¥–æ–±–∞–≤–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
      commentElement.innerHTML = newText;
      console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + error.message);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
      commentElement.innerHTML = currentText;
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
  cancelBtn.onclick = () => {
    commentElement.innerHTML = currentText;
  };
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter (Ctrl+Enter)
  editInput.onkeydown = (e) => {
    if (e.key === 'Enter' && e.ctrlKey) {
      saveBtn.onclick();
    } else if (e.key === 'Escape') {
      cancelBtn.onclick();
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function deleteComment(questionId, commentId) {
  console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${commentId} –∫ –≤–æ–ø—Ä–æ—Å—É ${questionId}`);
  
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/open-questions/${questionId}/comments/${commentId}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ DOM
    const commentElement = document.getElementById(`comment-${commentId}`);
    if (commentElement) {
      commentElement.remove();
    }
    
    console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ–ø—Ä–æ—Å–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º
async function syncQuestionWithEvent(questionId, updatedQuestion, eventId) {
  console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId} —Å —Å–æ–±—ã—Ç–∏–µ–º ${eventId}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
    const eventResponse = await fetch(`/api/events/${eventId}`);
    if (!eventResponse.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: ${eventResponse.status}`);
    }
    
    const event = await eventResponse.json();
    console.log('üìã –¢–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ:', event.subject);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ open_questions —Å–æ–±—ã—Ç–∏—è
    const eventQuestions = event.open_questions || [];
    const questionIndex = eventQuestions.findIndex(q => {
      // –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É, —Ç–∞–∫ –∫–∞–∫ –≤ —Å–æ–±—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
      return q.includes(updatedQuestion.text) || q.includes(question.text);
    });
    
    if (questionIndex === -1) {
      console.log('‚ö†Ô∏è –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ open_questions —Å–æ–±—ã—Ç–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π');
      // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—ã–π
      const newQuestionString = formatQuestionAsString(updatedQuestion);
      eventQuestions.push(newQuestionString);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–∑–∏—Ü–∏–∏ ${questionIndex}, –æ–±–Ω–æ–≤–ª—è–µ–º`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
      eventQuestions[questionIndex] = formatQuestionAsString(updatedQuestion);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    const updateResponse = await fetch(`/api/events/${eventId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        ...event,
        open_questions: eventQuestions
      })
    });
    
    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: ${updateResponse.status}, ${errorText}`);
    }
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–æ–±—ã—Ç–∏–µ–º:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è
function formatQuestionAsString(question) {
  let str = '';
  if (question.time) str += `[${question.time}] `;
  if (question.person) str += `[${question.person}] `;
  if (question.stream && question.stream !== 'General') str += `#${question.stream} `;
  str += question.text;
  return str;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª–µ–π "–ö—Ç–æ"
function initializePersonAutocomplete() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–ª–µ–π "–ö—Ç–æ"');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è "–ö—Ç–æ"
  const personInputs = document.querySelectorAll('.person-input');
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${personInputs.length} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–ª—è "–ö—Ç–æ"`);
  
  personInputs.forEach((input, index) => {
    console.log(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ ${index + 1}:`, input);
    const questionId = input.dataset.questionId;
    const suggestionsContainer = document.getElementById(`person-suggestions-${questionId}`);
    
    if (!suggestionsContainer) return;
    
    let searchTimeout;
    let selectedIndex = -1;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
    input.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      const query = input.value.trim();
      selectedIndex = -1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –≤–≤–æ–¥–µ
      
      if (query.length < 2) {
        suggestionsContainer.style.display = 'none';
        return;
      }
      
      searchTimeout = setTimeout(async () => {
        await loadPersonSuggestions(query, suggestionsContainer, input, questionId);
      }, 300);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    input.addEventListener('keydown', (e) => {
      const suggestions = suggestionsContainer.querySelectorAll('.person-suggestion-item');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        selectedIndex = Math.min(selectedIndex + 1, suggestions.length - 1);
        updatePersonSelection(suggestions, selectedIndex);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        selectedIndex = Math.max(selectedIndex - 1, -1);
        updatePersonSelection(suggestions, selectedIndex);
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (selectedIndex >= 0 && suggestions[selectedIndex]) {
          suggestions[selectedIndex].click();
        }
      } else if (e.key === 'Escape') {
        suggestionsContainer.style.display = 'none';
        selectedIndex = -1;
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('focus', () => {
      if (input.value.trim().length >= 2) {
        loadPersonSuggestions(input.value.trim(), suggestionsContainer, input, questionId);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('blur', () => {
      setTimeout(() => {
        suggestionsContainer.style.display = 'none';
        selectedIndex = -1;
      }, 200);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('focus', () => {
      if (input.value.trim().length >= 2) {
        loadPersonSuggestions(input.value.trim(), suggestionsContainer, input, questionId);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('blur', () => {
      setTimeout(() => {
        suggestionsContainer.style.display = 'none';
      }, 200);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const firstSuggestion = suggestionsContainer.querySelector('.person-suggestion-item');
        if (firstSuggestion) {
          firstSuggestion.click();
        }
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function updatePersonSelection(suggestions, selectedIndex) {
  suggestions.forEach((item, index) => {
    if (index === selectedIndex) {
      item.classList.add('selected');
      item.scrollIntoView({ block: 'nearest' });
    } else {
      item.classList.remove('selected');
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function loadPersonSuggestions(query, container, input, questionId) {
  try {
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è "–ö—Ç–æ": "${query}"`);
    
    const response = await fetch(`/api/attendees?search=${encodeURIComponent(query)}`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const attendees = await response.json();
    const suggestions = attendees.map(a => {
      if (a.name && a.surname) {
        return `${a.name} ${a.surname}`;
      } else if (a.name) {
        return a.name;
      } else {
        return a.email;
      }
    }).slice(0, 5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${suggestions.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:`, suggestions);
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    if (suggestions.length === 0) {
      container.style.display = 'none';
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions.forEach(suggestion => {
      const item = document.createElement('div');
      item.className = 'person-suggestion-item';
      item.textContent = suggestion;
      
      item.addEventListener('click', () => {
        input.value = suggestion;
        container.style.display = 'none';
        savePersonToQuestion(questionId, suggestion);
      });
      
      container.appendChild(item);
    });
    
    container.style.display = 'block';
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    container.style.display = 'none';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≤–æ–ø—Ä–æ—Å
async function savePersonToQuestion(questionId, person) {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ "${person}" –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
  console.log(`üíæ –¢–∏–ø questionId: ${typeof questionId}, –∑–Ω–∞—á–µ–Ω–∏–µ: ${questionId}`);
  console.log(`üíæ allOpenQuestionsData:`, allOpenQuestionsData);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö (–∏—â–µ–º –≤ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö)
    let question = allOpenQuestionsData.find(q => q.id === questionId);
    if (!question) {
      question = allNotesQuestionsData.find(q => q.id === questionId);
    }
    console.log(`üíæ –ù–∞–π–¥–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:`, question);
    if (!question) {
      console.error('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    const response = await fetch(`/api/open-questions/${questionId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        text: question.question,
        stream: question.stream,
        person: person,
        time: question.time,
        important: question.important,
        asap: question.asap,
        is_resolved: question.resolved
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–æ–ø—Ä–æ—Å:', result);
    
    // –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å event_id, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–æ–±—ã—Ç–∏–µ–º
    if (question.eventId) {
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º ID: ${question.eventId}`);
      await syncQuestionWithEvent(questionId, {
        text: question.question,
        stream: question.stream,
        person: person,
        time: question.time,
        important: question.important,
        asap: question.asap
      }, question.eventId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await collectOpenQuestionsData();
    renderOpenQuestionsModal();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª–µ–π "Stream"
function initializeStreamAutocomplete() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –¥–ª—è –ø–æ–ª–µ–π "Stream"');
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è "Stream"
  const streamInputs = document.querySelectorAll('.stream-input');
  
  streamInputs.forEach(input => {
    const questionId = input.dataset.questionId;
    const suggestionsContainer = document.getElementById(`stream-suggestions-${questionId}`);
    
    if (!suggestionsContainer) return;
    
    let searchTimeout;
    let selectedIndex = -1;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
    input.addEventListener('input', () => {
      clearTimeout(searchTimeout);
      const query = input.value.trim();
      selectedIndex = -1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –≤–≤–æ–¥–µ
      
      if (query.length < 1) {
        suggestionsContainer.style.display = 'none';
        return;
      }
      
      searchTimeout = setTimeout(async () => {
        await loadStreamSuggestions(query, suggestionsContainer, input, questionId);
      }, 200);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    input.addEventListener('keydown', (e) => {
      const suggestions = suggestionsContainer.querySelectorAll('.stream-suggestion-item');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        selectedIndex = Math.min(selectedIndex + 1, suggestions.length - 1);
        updateStreamSelection(suggestions, selectedIndex);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        selectedIndex = Math.max(selectedIndex - 1, -1);
        updateStreamSelection(suggestions, selectedIndex);
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (selectedIndex >= 0 && suggestions[selectedIndex]) {
          suggestions[selectedIndex].click();
        }
      } else if (e.key === 'Escape') {
        suggestionsContainer.style.display = 'none';
        selectedIndex = -1;
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('focus', () => {
      if (input.value.trim().length >= 1) {
        loadStreamSuggestions(input.value.trim(), suggestionsContainer, input, questionId);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
    input.addEventListener('blur', () => {
      setTimeout(() => {
        suggestionsContainer.style.display = 'none';
        selectedIndex = -1;
      }, 200);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö Stream
function updateStreamSelection(suggestions, selectedIndex) {
  suggestions.forEach((item, index) => {
    if (index === selectedIndex) {
      item.classList.add('selected');
      item.scrollIntoView({ block: 'nearest' });
    } else {
      item.classList.remove('selected');
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π Stream
async function loadStreamSuggestions(query, container, input, questionId) {
  try {
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è "Stream": "${query}"`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ streams –∏–∑ allStreamsData
    const availableStreams = allStreamsData || [];
    const suggestions = availableStreams
      .filter(stream => stream.toLowerCase().includes(query.toLowerCase()))
      .slice(0, 5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${suggestions.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:`, suggestions);
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    if (suggestions.length === 0) {
      container.style.display = 'none';
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    suggestions.forEach(suggestion => {
      const item = document.createElement('div');
      item.className = 'stream-suggestion-item';
      item.textContent = suggestion;
      
      item.addEventListener('click', () => {
        input.value = suggestion;
        container.style.display = 'none';
        saveStreamToQuestion(questionId, suggestion);
      });
      
      container.appendChild(item);
    });
    
    container.style.display = 'block';
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π Stream:', error);
    container.style.display = 'none';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Stream –≤ –≤–æ–ø—Ä–æ—Å
async function saveStreamToQuestion(questionId, stream) {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º Stream "${stream}" –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ${questionId}`);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö (–∏—â–µ–º –≤ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö)
    let question = allOpenQuestionsData.find(q => q.id === questionId);
    if (!question) {
      question = allNotesQuestionsData.find(q => q.id === questionId);
    }
    if (!question) {
      console.error('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    const response = await fetch(`/api/open-questions/${questionId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        text: question.question,
        stream: stream,
        person: question.person,
        time: question.time,
        important: question.important,
        asap: question.asap,
        is_resolved: question.resolved
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Stream —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–æ–ø—Ä–æ—Å:', result);
    
    // –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å event_id, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–æ–±—ã—Ç–∏–µ–º
    if (question.eventId) {
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Stream —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º ID: ${question.eventId}`);
      await syncQuestionWithEvent(questionId, {
        text: question.question,
        stream: stream,
        person: question.person,
        time: question.time,
        important: question.important,
        asap: question.asap
      }, question.eventId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await collectOpenQuestionsData();
    renderOpenQuestionsModal();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Stream:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Stream: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Open Question
async function createNewOpenQuestion() {
  console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Open Question...');
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
  const textElement = document.getElementById('new-question-text');
  const importantElement = document.getElementById('new-question-important');
  const asapElement = document.getElementById('new-question-asap');
  
  if (!textElement || !importantElement || !asapElement) {
    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    showNotification('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error');
    return;
  }
  
  const text = textElement.value.trim();
  const important = importantElement.checked;
  const asap = asapElement.checked;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  if (!text) {
    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞', 'error');
    textElement.focus();
    return;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º stream –∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ #
  const streamMatch = text.match(/#(\w+)/);
  const stream = streamMatch ? streamMatch[1] : null;
  
  console.log('üìù –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', { text, stream, important, asap });
  
  try {
    // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
    const response = await fetch('/api/open-questions/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        event_id: null, // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é
        question_text: text,
        stream: stream,
        important: important,
        asap: asap,
        time: null,
        person: null
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const newQuestion = await response.json();
    console.log('‚úÖ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω:', newQuestion);
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    textElement.value = '';
    importantElement.checked = false;
    asapElement.checked = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    await collectOpenQuestionsData();
    
    showNotification('Open Question —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
    showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: ' + error.message, 'error');
  }
}

function handleStreamTagClick(stream) {
  console.log('üè∑Ô∏è –ö–ª–∏–∫ –ø–æ —Ç–µ–≥—É Stream:', stream);
  
  // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (streamTagClickTimeout) {
    clearTimeout(streamTagClickTimeout);
    streamTagClickTimeout = null;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
  streamTagClickTimeout = setTimeout(() => {
    filterQuestionsInModal(stream);
  }, 300); // 300ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
}

function handleStreamTagDoubleClick(stream) {
  console.log('üè∑Ô∏è –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —Ç–µ–≥—É Stream:', stream);
  
  // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
  if (streamTagClickTimeout) {
    clearTimeout(streamTagClickTimeout);
    streamTagClickTimeout = null;
  }
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ Stream
  filterAllMeetingsByStream(stream);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–≥—É
function handleStreamTagRightClick(event, stream, isUsed) {
  console.log('üñ±Ô∏è –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –ø–æ —Ç–µ–≥—É Stream:', stream, 'isUsed:', isUsed);
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
  event.preventDefault();
  
  // –ï—Å–ª–∏ —Ç–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è
  if (isUsed) {
    console.log('‚ÑπÔ∏è –¢–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è');
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  showDeleteTagMenu(event, stream);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞
function showDeleteTagMenu(event, stream) {
  console.log('üóëÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–≥–∞:', stream);
  
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
  const existingMenu = document.getElementById('delete-tag-menu');
  if (existingMenu) {
    existingMenu.remove();
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
  const menu = document.createElement('div');
  menu.id = 'delete-tag-menu';
  menu.style.cssText = `
    position: fixed;
    top: ${event.clientY}px;
    left: ${event.clientX}px;
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    z-index: 10000;
    padding: 8px 0;
    min-width: 150px;
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é
  const menuItem = document.createElement('div');
  menuItem.style.cssText = `
    padding: 8px 16px;
    cursor: pointer;
    color: #d32f2f;
    font-size: 14px;
    transition: background-color 0.2s;
  `;
  menuItem.textContent = `–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${stream}"`;
  
  menuItem.addEventListener('mouseenter', () => {
    menuItem.style.backgroundColor = '#ffebee';
  });
  
  menuItem.addEventListener('mouseleave', () => {
    menuItem.style.backgroundColor = 'transparent';
  });
  
  menuItem.addEventListener('click', () => {
    deleteUnusedTag(stream);
    menu.remove();
  });
  
  menu.appendChild(menuItem);
  document.body.appendChild(menu);
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  const closeMenu = (e) => {
    if (!menu.contains(e.target)) {
      menu.remove();
      document.removeEventListener('click', closeMenu);
    }
  };
  
  setTimeout(() => {
    document.addEventListener('click', closeMenu);
  }, 100);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ç–µ–≥–∞
async function deleteUnusedTag(stream) {
  console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–µ–≥:', stream);
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
  const confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${stream}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`);
  if (!confirmed) {
    console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–≥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const streamId = allStreamsMap[stream];
    if (!streamId) {
      console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è —Ç–µ–≥–∞ "${stream}" –≤ allStreamsMap:`, allStreamsMap);
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω ID –¥–ª—è —Ç–µ–≥–∞ "${stream}"`);
    }
    
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ–≥ "${stream}" —Å ID ${streamId}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –ø–æ ID
    const response = await fetch(`/api/streams/remove/${streamId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      console.log('‚úÖ –¢–µ–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', stream);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      showNotification(`–¢–µ–≥ "${stream}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`, 'success');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
      await collectOpenQuestionsData();
      
    } else {
      const errorData = await response.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞:', errorData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: ${errorData.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞:', error);
    showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: ${error.message}`, 'error');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const existingNotifications = document.querySelectorAll('.notification');
  existingNotifications.forEach(notification => notification.remove());
  
  const notification = document.createElement('div');
  notification.className = 'notification';
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 20px;
    border-radius: 4px;
    color: white;
    font-weight: 500;
    z-index: 10001;
    max-width: 300px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    animation: slideIn 0.3s ease-out;
  `;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  switch (type) {
    case 'success':
      notification.style.backgroundColor = '#4caf50';
      break;
    case 'error':
      notification.style.backgroundColor = '#f44336';
      break;
    case 'warning':
      notification.style.backgroundColor = '#ff9800';
      break;
    default:
      notification.style.backgroundColor = '#2196f3';
  }
  
  notification.textContent = message;
  document.body.appendChild(notification);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.style.animation = 'slideOut 0.3s ease-in';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 300);
  }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function filterQuestionsInModal(stream) {
  console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø–æ Stream:', stream);
  
  // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
  if (currentStreamFilter === stream) {
    console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä');
    currentStreamFilter = null;
  } else {
    console.log('üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä:', stream);
    currentStreamFilter = stream;
  }
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–æ–≤—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
  renderOpenQuestionsModal();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á –ø–æ Stream
async function filterAllMeetingsByStream(stream) {
  console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á –ø–æ Stream:', stream);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è...');
    const response = await fetch('/api/events');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const allEvents = await response.json();
    console.log('üìÖ –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π:', allEvents.length);
    console.log('üìÖ –ü–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è:', allEvents.slice(0, 3).map(e => ({ id: e.id, subject: e.subject, stream: e.stream })));
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ Stream
    const filteredEvents = allEvents.filter(event => {
      if (!event.stream || !Array.isArray(event.stream)) return false;
      return event.stream.includes(stream);
    });
    
    console.log('üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π —Å Stream "' + stream + '":', filteredEvents.length);
    console.log('üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', filteredEvents.map(e => ({ id: e.id, subject: e.subject, stream: e.stream })));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–∞–≤–µ—Ä—Ö—É)
    filteredEvents.sort((a, b) => {
      const dateA = new Date(a.start);
      const dateB = new Date(b.start);
      return dateB - dateA; // –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–≤—ã–º–∏
    });
    
    console.log('üìä –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', filteredEvents.map(e => ({ id: e.id, subject: e.subject, start: e.start })));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
    console.log('üé≠ –í—ã–∑—ã–≤–∞–µ–º showFilteredMeetingsModal...');
    showFilteredMeetingsModal(filteredEvents, stream);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á –ø–æ Stream:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
function showFilteredOpenQuestionsModal(stream) {
  console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è Stream:', stream);
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modal = document.createElement('div');
  modal.className = 'filtered-meetings-modal';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;
  
  modal.innerHTML = `
    <div class="filtered-meetings-modal-content" style="
      background: white;
      border-radius: 12px;
      padding: 24px;
      max-width: 800px;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    ">
      <h3 style="margin: 0 0 20px 0; color: #333; font-size: 20px;">
        –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ${stream}
      </h3>
      <div class="filtered-questions-list" id="filtered-questions-list">
        –ó–∞–≥—Ä—É–∑–∫–∞...
      </div>
      <div class="filtered-meetings-modal-buttons" style="
        margin-top: 20px;
        display: flex;
        gap: 12px;
        justify-content: flex-end;
      ">
        <button class="filtered-meetings-modal-btn" onclick="this.closest('.filtered-meetings-modal').remove()" style="
          background: #6c757d;
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 14px;
        ">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
  loadFilteredOpenQuestions(stream);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function loadFilteredOpenQuestions(stream) {
  try {
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è Stream:', stream);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    const response = await fetch('/api/events');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const allEvents = await response.json();
    
    // –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ Stream
    const filteredQuestions = [];
    
    allEvents.forEach(event => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π Stream
      const hasStream = event.stream && Array.isArray(event.stream) && event.stream.includes(stream);
      
      if (hasStream) {
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º actual_open_questions –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        // –¢–æ–ª—å–∫–æ —è–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º actual_open_questions –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ stream "${stream}" –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${event.subject}"`);
        
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ open_questions –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        // –¢–æ–ª—å–∫–æ —è–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
        console.log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ stream "${stream}" –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${event.subject}"`);
      }
    });
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', filteredQuestions.length);
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    displayFilteredQuestions(filteredQuestions, stream);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    document.getElementById('filtered-questions-list').innerHTML = `
      <div style="color: #dc3545; padding: 20px; text-align: center;">
        –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: ${error.message}
      </div>
    `;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
function displayFilteredQuestions(questions, stream) {
  const container = document.getElementById('filtered-questions-list');
  
  if (questions.length === 0) {
    container.innerHTML = `
      <div style="color: #6c757d; padding: 20px; text-align: center;">
        –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Stream "${stream}"
      </div>
    `;
    return;
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  questions.sort((a, b) => {
    let dateA, dateB;
    
    if (a.eventStart && !isNaN(new Date(a.eventStart).getTime())) {
      dateA = new Date(a.eventStart);
    } else if (a.date && !isNaN(new Date(a.date).getTime())) {
      dateA = new Date(a.date);
    } else {
      dateA = new Date(0); // –û—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç
    }
    
    if (b.eventStart && !isNaN(new Date(b.eventStart).getTime())) {
      dateB = new Date(b.eventStart);
    } else if (b.date && !isNaN(new Date(b.date).getTime())) {
      dateB = new Date(b.date);
    } else {
      dateB = new Date(0);
    }
    
    return dateB - dateA;
  });
  
  let html = '<div class="questions-table-container">';
  html += '<table class="questions-table">';
  html += '<thead>';
  html += '<tr>';
  html += '<th>–†–µ—à–µ–Ω–æ</th>';
  html += '<th>–ó–∞–¥–∞—á–∞</th>';
  html += '<th>–í—Å—Ç—Ä–µ—á–∞</th>';
  html += '<th>–í–∞–∂–Ω–æ</th>';
  html += '<th>–°—Ä–æ—á–Ω–æ</th>';
  html += '</tr>';
  html += '</thead>';
  html += '<tbody>';
  
  questions.forEach(q => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    let eventDate;
    if (q.eventStart && !isNaN(new Date(q.eventStart).getTime())) {
      eventDate = new Date(q.eventStart);
    } else if (q.date && !isNaN(new Date(q.date).getTime())) {
      eventDate = new Date(q.date);
    } else {
      eventDate = null;
    }
    
    const date = eventDate ? eventDate.toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    html += `<tr>`;
    
    // –ö–æ–ª–æ–Ω–∫–∞ Checkbox (–†–µ—à–µ–Ω–æ)
    html += `<td class="checkbox-cell">`;
    if (q.id) {
      // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∑–∞–º–µ—Ç–æ–∫ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π checkbox
      html += `<input type="checkbox" onchange="resolveQuestion(${q.id})" class="question-checkbox">`;
    } else {
      // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Actual open questions - —Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      html += `<span class="question-status-display">‚óã</span>`;
    }
    html += `</td>`;
    
    // –ö–æ–ª–æ–Ω–∫–∞ –ó–∞–¥–∞—á–∞ (—Å —Ç–µ–∫—Å—Ç–æ–º –∏ –¥–∞—Ç–æ–π)
    html += `<td class="task-text">`;
    html += `<div class="question-text">${q.text}</div>`;
    html += `<div class="question-date">${date}</div>`;
    html += `</td>`;
    
    // –ö–æ–ª–æ–Ω–∫–∞ –í—Å—Ç—Ä–µ—á–∞ (—Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞)
    html += `<td class="meeting-cell">`;
    if (q.eventId) {
      html += `<button class="meeting-link-btn" onclick="goToEventFromQuestion(${q.eventId})" title="–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Å—Ç—Ä–µ—á–µ">`;
      html += `<span class="meeting-link-text">${q.event}</span>`;
      html += `</button>`;
    } else {
      html += `<span class="meeting-text">${q.event}</span>`;
    }
    html += `</td>`;
    
    // –ö–æ–ª–æ–Ω–∫–∞ –í–∞–∂–Ω–æ
    html += `<td class="flag-cell">`;
    if (q.important) {
      html += '<span class="flag important">‚úîÔ∏è</span>';
    } else {
      html += '<span class="flag empty">‚Äî</span>';
    }
    html += `</td>`;
    
    // –ö–æ–ª–æ–Ω–∫–∞ –°—Ä–æ—á–Ω–æ
    html += `<td class="flag-cell">`;
    if (q.asap) {
      html += '<span class="flag asap">‚úîÔ∏è</span>';
    } else {
      html += '<span class="flag empty">‚Äî</span>';
    }
    html += `</td>`;
    
    html += '</tr>';
  });
  
  html += '</tbody>';
  html += '</table>';
  html += '</div>';
  
  container.innerHTML = html;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏
function showFilteredMeetingsModal(events, stream) {
  console.log('üìÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è Stream:', stream);
  console.log('üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', events.length);
  console.log('üìÖ –°–æ–±—ã—Ç–∏—è:', events.map(e => ({ id: e.id, subject: e.subject })));
  
  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  const modal = document.createElement('div');
  modal.className = 'filtered-meetings-modal';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
  `;
  
  modal.innerHTML = `
    <div class="filtered-meetings-modal-content" style="
      background: white;
      border-radius: 12px;
      padding: 24px;
      max-width: 900px;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    ">
      <h3 style="margin: 0 0 20px 0; color: #333; font-size: 20px;">
        –í—Å–µ –≤—Å—Ç—Ä–µ—á–∏: ${stream} (${events.length})
      </h3>
      <div class="filtered-meetings-list" id="filtered-meetings-list">
        ${generateFilteredMeetingsHTML(events)}
      </div>
      <div class="filtered-meetings-modal-buttons" style="
        margin-top: 20px;
        display: flex;
        gap: 12px;
        justify-content: flex-end;
      ">
        <button class="filtered-meetings-modal-btn" onclick="this.closest('.filtered-meetings-modal').remove()" style="
          background: #6c757d;
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 14px;
        ">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ ID
async function showEventFromId(eventId) {
  try {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ ID:', eventId);
    console.log('üîç URL –∑–∞–ø—Ä–æ—Å–∞:', `/api/events/${eventId}`);
    
    const response = await fetch(`/api/events/${eventId}`);
    console.log('üì° Response status:', response.status);
    console.log('üì° Response ok:', response.ok);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const event = await response.json();
    console.log('üìÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', event);
    console.log('üìÖ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è:', typeof event);
    console.log('üìÖ ID —Å–æ–±—ã—Ç–∏—è:', event.id);
    console.log('üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', event.subject);
    
    console.log('üéØ –í—ã–∑—ã–≤–∞–µ–º showEvent —Å —Å–æ–±—ã—Ç–∏–µ–º...');
    showEvent(event);
    console.log('‚úÖ showEvent –≤—ã–∑–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏—è:', error);
    console.error('‚ùå Stack trace:', error.stack);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏—è: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
function generateFilteredMeetingsHTML(events) {
  console.log('üé® generateFilteredMeetingsHTML –≤—ã–∑–≤–∞–Ω–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏:', events.length);
  console.log('üé® –°–æ–±—ã—Ç–∏—è:', events.map(e => ({ id: e.id, subject: e.subject })));
  
  if (events.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    return `
      <div style="color: #6c757d; padding: 20px; text-align: center;">
        –ù–µ—Ç –≤—Å—Ç—Ä–µ—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      </div>
    `;
  }
  
  let html = '<div class="filtered-meetings-list">';
  console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é HTML –¥–ª—è', events.length, '—Å–æ–±—ã—Ç–∏–π');
  
  events.forEach(event => {
    console.log('üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á:', {
      id: event.id,
      subject: event.subject,
      start: event.start,
      type: typeof event.id
    });
    
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
    const eventDate = new Date(event.start);
    let dateStr = '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    let timeStr = '';
    
    if (!isNaN(eventDate.getTime())) {
      dateStr = eventDate.toLocaleDateString('ru-RU');
      timeStr = eventDate.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
    const attendees = event.attendees && Array.isArray(event.attendees) 
      ? event.attendees.join(', ') 
      : '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ (—Å–∫—Ä—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏)
    let location = event.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (Teams, Google Meet –∏ —Ç.–¥.)
    if (location && (
      location.includes('teams.microsoft.com') ||
      location.includes('meet.google.com') ||
      location.includes('zoom.us') ||
      location.includes('webex.com') ||
      location.includes('https://') ||
      location.includes('http://')
    )) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ —Å—Å—ã–ª–∫–µ
      if (location.includes('teams.microsoft.com')) {
        location = 'Teams';
      } else if (location.includes('meet.google.com')) {
        location = 'Google Meet';
      } else if (location.includes('zoom.us')) {
        location = 'Zoom';
      } else if (location.includes('webex.com')) {
        location = 'WebEx';
      } else {
        location = '–û–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞';
      }
    }
    
    console.log('üîß –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Å–æ–±—ã—Ç–∏—è:', {
      id: event.id,
      subject: event.subject,
      onclick: `goToEventFromQuestion(${event.id})`
    });
    
    html += `
      <div class="filtered-meeting-item" style="
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 12px;
        background: #f9f9f9;
        transition: all 0.2s ease;
        cursor: pointer;
      " onmouseover="this.style.background='#f0f0f0'; this.style.borderColor='#4aa3ff';" onmouseout="this.style.background='#f9f9f9'; this.style.borderColor='#e0e0e0';" onclick="goToEventFromQuestion(${event.id})" title="–ö–ª–∏–∫: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Å—Ç—Ä–µ—á–µ">
        <div class="meeting-content">
          <div class="meeting-title" style="font-weight: bold; font-size: 16px; color: #333; margin-bottom: 8px;">
            ${event.subject}
          </div>
          <div class="meeting-date" style="color: #666; font-size: 14px; margin-bottom: 4px;">
            üìÖ ${dateStr} –≤ ${timeStr}
          </div>
          <div class="meeting-location" style="color: #666; font-size: 14px; margin-bottom: 4px;">
            üìç ${location}
          </div>
          <div class="meeting-attendees" style="color: #666; font-size: 14px;">
            üë• ${attendees}
          </div>
          ${event.notes && (typeof event.notes === 'string' ? event.notes.trim() : Array.isArray(event.notes) ? event.notes.length > 0 : false) ? `
            <div class="meeting-notes" style="color: #555; font-size: 13px; margin-top: 8px; padding: 8px; background: #f8f9fa; border-radius: 4px; border-left: 3px solid #4aa3ff;">
              <div style="font-weight: 600; color: #333; margin-bottom: 4px;">üìù –ó–∞–º–µ—Ç–∫–∏:</div>
              <div style="line-height: 1.4;">${typeof event.notes === 'string' ? (event.notes.length > 200 ? event.notes.substring(0, 200) + '...' : event.notes) : Array.isArray(event.notes) ? event.notes.map(note => typeof note === 'string' ? note : note.text || '').join('\n') : ''}</div>
            </div>
          ` : ''}
        </div>
      </div>
    `;
  });
  
  html += '</div>';
  return html;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
function hideOtherLocationButtons(selectedBtn) {
  const locationButtonsContainer = selectedBtn.closest('[id$="-location-buttons"]');
  if (!locationButtonsContainer) return;
  
  const allButtons = locationButtonsContainer.querySelectorAll('.loc-btn');
  const communicationPlatforms = ['Zoom', 'Teams', 'Google Meet', '–¢–µ–ª–µ–º–æ—Å—Ç', '–¢–µ–ª–µ–≥—Ä–∞–º'];
  
  allButtons.forEach(btn => {
    const btnValue = btn.dataset.value;
    if (communicationPlatforms.includes(btnValue)) {
      if (btn === selectedBtn) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
        btn.style.display = 'block';
      } else {
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        btn.style.display = 'none';
      }
    }
    // –ö–Ω–æ–ø–∫–∞ "Other" –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º–æ–π
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
function showAllLocationButtons() {
  const locationButtonsContainers = document.querySelectorAll('[id$="-location-buttons"]');
  
  locationButtonsContainers.forEach(container => {
    const allButtons = container.querySelectorAll('.loc-btn');
    allButtons.forEach(btn => {
      btn.style.display = 'block';
    });
  });
}


// Version: 1760031551
// Version: 1760031551

// ===== MORNING TODOS FUNCTIONALITY =====

function initializeMorningTodos() {
  console.log('üåÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Morning ToDos');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏-—Å–ª–æ—Ç–∞
  const slotBtn = document.getElementById('morning-todos-slot-btn');
  if (slotBtn) {
    slotBtn.addEventListener('click', showMorningTodosModal);
  }
  
  loadMorningTodos();
}

async function loadMorningTodos() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
    const allTodos = await safeFetch(`/api/morning-todos`);
    
    if (!allTodos) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Morning ToDos');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const incompleteTodos = allTodos.filter(todo => !todo.completed);
    
    renderMorningTodos(incompleteTodos);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Morning ToDos:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É
function editMorningTodoText(todoId, currentText) {
  console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ID:', todoId, '–¢–µ–∫—Å—Ç:', currentText);
  
  // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏
  const todoElement = document.querySelector(`[data-id="${todoId}"]`);
  if (!todoElement) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ —Å ID:', todoId);
    return;
  }
  
  const textElement = todoElement.querySelector('.todo-text');
  if (!textElement) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º input –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const input = document.createElement('input');
  input.type = 'text';
  input.value = currentText;
  input.className = 'todo-edit-input';
  input.style.cssText = `
    width: 100%;
    padding: 4px 8px;
    border: 2px solid #007bff;
    border-radius: 4px;
    font-size: 14px;
    background: white;
    outline: none;
  `;
  
  // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ input
  textElement.style.display = 'none';
  textElement.parentNode.insertBefore(input, textElement);
  
  // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ input –∏ –≤—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
  input.focus();
  input.select();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const saveEdit = async () => {
    const newText = input.value.trim();
    
    if (newText === currentText) {
      // –¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      cancelEdit();
      return;
    }
    
    if (newText === '') {
      alert('–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      input.focus();
      return;
    }
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const response = await safeFetch(`/api/morning-todos/${todoId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          todo_text: newText
        })
      });
      
      if (response) {
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', response);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        textElement.textContent = newText;
        textElement.style.display = 'block';
        input.remove();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        showNotification('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      input.focus();
    }
  };
  
  const cancelEdit = () => {
    textElement.style.display = 'block';
    input.remove();
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  input.addEventListener('blur', saveEdit);
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      saveEdit();
    } else if (e.key === 'Escape') {
      e.preventDefault();
      cancelEdit();
    }
  });
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
  input.addEventListener('dblclick', (e) => {
    e.stopPropagation();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 20px;
    border-radius: 6px;
    color: white;
    font-weight: 500;
    z-index: 10000;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease;
    max-width: 300px;
    word-wrap: break-word;
  `;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  switch (type) {
    case 'success':
      notification.style.backgroundColor = '#28a745';
      break;
    case 'error':
      notification.style.backgroundColor = '#dc3545';
      break;
    case 'warning':
      notification.style.backgroundColor = '#ffc107';
      notification.style.color = '#000';
      break;
    default:
      notification.style.backgroundColor = '#007bff';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
  document.body.appendChild(notification);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    notification.style.opacity = '1';
    notification.style.transform = 'translateX(0)';
  }, 100);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.style.opacity = '0';
    notification.style.transform = 'translateX(100%)';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 3000);
}
async function toggleTodoCompletion(todoId, completed) {
  try {
    const result = await safeFetch(`/api/morning-todos/${todoId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ completed: completed })
    });
    
    if (result) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const todoItem = document.querySelector(`[data-id="${todoId}"]`);
      if (todoItem) {
        if (completed) {
          todoItem.classList.add('completed');
          todoItem.querySelector('.todo-text').classList.add('completed');
        } else {
          todoItem.classList.remove('completed');
          todoItem.querySelector('.todo-text').classList.remove('completed');
        }
      }
      
      showNotification(completed ? '‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '‚è≥ –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 'success');
    } else {
      showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async function deleteTodo(todoId) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) return;
  
  try {
    const result = await safeFetch(`/api/morning-todos/${todoId}`, {
      method: 'DELETE'
    });
    
    if (result !== null) {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await loadMorningTodosInModal();
      showNotification('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
    } else {
      showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –≤–≤–æ–¥–∞
async function createTodoFromInput(text) {
  try {
    const today = getCurrentDateAtMidnight().toISOString().split('T')[0];
    
    const result = await safeFetch('/api/morning-todos', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        date: today,
        todo_text: text,
        completed: false,
        priority: 'normal'
      })
    });
    
    if (result) {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await loadMorningTodosInModal();
      showNotification('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞', 'success');
    } else {
      showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
  }
}

function initializeMorningTodosModal() {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –ø–æ Enter
  const newTodoInput = document.getElementById('new-todo-input');
  if (newTodoInput) {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
    newTodoInput.addEventListener('keydown', async (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const text = e.target.value.trim();
        if (text.length >= 3) {
          await createTodoFromInput(text);
          e.target.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        } else if (text.length > 0) {
          showNotification('‚ùå –ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', 'error');
        }
      }
    });
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
      newTodoInput.focus();
    }, 100);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop
  initializeDragAndDrop();
}

async function loadMorningTodosInModal() {
  try {
    const today = getCurrentDateAtMidnight().toISOString().split('T')[0];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è)
    const allTodos = await safeFetch(`/api/morning-todos`);
    
    if (!allTodos) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Morning ToDos');
      return;
    }
    
    const dragContainer = document.getElementById('todos-drag-container');
    if (!dragContainer) return;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏: –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ + –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const filteredTodos = allTodos.filter(todo => {
      if (!todo.completed) {
        return true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      }
      return todo.date === today; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    });
    
    if (filteredTodos.length === 0) {
      dragContainer.innerHTML = '<div class="no-todos-message">–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</div>';
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (order), –ø–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
    const sortedTodos = filteredTodos.sort((a, b) => {
      // –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
      if (a.completed !== b.completed) {
        return a.completed ? 1 : -1;
      }
      
      // –°—Ä–µ–¥–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (order), –µ—Å–ª–∏ –µ—Å—Ç—å
      if (!a.completed && !b.completed) {
        if (a.order !== undefined && b.order !== undefined) {
          return a.order - b.order;
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç order, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞–∫ fallback
        const priorityOrder = { 'high': 3, 'normal': 2, 'low': 1 };
        return priorityOrder[b.priority] - priorityOrder[a.priority];
      }
      
      // –°—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
      return new Date(a.created_at) - new Date(b.created_at);
    });
    
    dragContainer.innerHTML = sortedTodos.map((todo, index) => `
      <div class="todo-checklist-item ${todo.completed ? 'completed' : ''} ${todo.priority === 'high' ? 'high-priority-task' : ''} ${index < 3 ? 'top-three-task' : ''}" 
           data-id="${todo.id}" 
           data-priority="${todo.priority}"
           draggable="true">
        <div class="todo-checkbox-container">
          <input type="checkbox" ${todo.completed ? 'checked' : ''} 
                 class="todo-checkbox" 
                 onchange="toggleTodoComplete(${todo.id})">
        </div>
        <div class="todo-text-container">
          <div class="todo-text" ondblclick="editMorningTodoText(${todo.id}, '${escapeHtml(todo.todo_text)}')">${escapeHtml(todo.todo_text)}</div>
          <div class="todo-created-date">–°–æ–∑–¥–∞–Ω–æ: ${formatTodoDate(todo.created_at)}</div>
        </div>
        <div class="todo-actions">
          <div class="drag-handle">‚ãÆ‚ãÆ</div>
          <button class="delete-btn" onclick="deleteMorningTodo(${todo.id})" title="–£–¥–∞–ª–∏—Ç—å">√ó</button>
        </div>
      </div>
    `).join('');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º drag-and-drop
    initializeDragAndDrop();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Morning ToDos –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', error);
  }
}

function renderMorningTodos(todos) {
  const container = document.getElementById('morning-todos-list');
  if (!container) return;
  
  if (todos.length === 0) {
    container.innerHTML = '<div style="text-align: center; color: #666; font-size: 12px; padding: 10px;">–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</div>';
    return;
  }
  
  container.innerHTML = todos.map(todo => `
    <div class="todo-item ${todo.completed ? 'completed' : ''}" data-id="${todo.id}">
      <div class="todo-text">${escapeHtml(todo.todo_text)}</div>
      <div class="todo-meta">
        <span class="priority-badge priority-${todo.priority}">${getPriorityLabel(todo.priority)}</span>
        <div class="todo-actions">
          <button class="complete-btn" onclick="toggleTodoComplete(${todo.id})" title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ">
            ${todo.completed ? '‚Ü©Ô∏è' : '‚úÖ'}
          </button>
          <button class="edit-btn" onclick="editMorningTodo(${todo.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
          <button class="delete-btn" onclick="deleteMorningTodo(${todo.id})" title="–£–¥–∞–ª–∏—Ç—å">√ó</button>
        </div>
      </div>
    </div>
  `).join('');
}

function getPriorityLabel(priority) {
  const labels = {
    'high': '–í—ã—Å–æ–∫–∏–π',
    'normal': '–û–±—ã—á–Ω—ã–π',
    'low': '–ù–∏–∑–∫–∏–π'
  };
  return labels[priority] || priority;
}

function getPriorityColor(priority) {
  const colors = {
    'high': '#dc3545',
    'normal': '#007bff',
    'low': '#28a745'
  };
  return colors[priority] || '#007bff';
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(button) {
  const modal = button.closest('.modal');
  if (modal) {
    modal.remove();
  }
}

function showMorningTodosModal() {
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Morning ToDos –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
  eventDetails.innerHTML = `
    <div class="event-block">
      <div class="morning-todos-header">
        <h3>üåÖ Morning ToDos</h3>
        <div class="header-actions">
          <button id="close-morning-todos-btn" class="close-btn">√ó</button>
        </div>
      </div>
      
      <div id="morning-todos-checklist" class="todos-checklist" style="display: block;">
        <!-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á -->
        <div class="todo-create-row">
          <div class="todo-checkbox-container">
            <input type="checkbox" class="todo-checkbox" disabled>
          </div>
          <div class="todo-text-container">
            <input type="text" id="new-todo-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è..." class="todo-create-input" />
          </div>
          <div class="todo-actions">
            <div class="drag-handle">‚ãÆ‚ãÆ</div>
          </div>
        </div>
        
        <div id="todos-drag-container" class="drag-container">
          <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è -->
        </div>
      </div>
    </div>
  `;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
  initializeMorningTodosModal();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
  loadMorningTodosInModal();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  const closeBtn = document.getElementById('close-morning-todos-btn');
  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      eventDetails.innerHTML = '';
    });
  }
}

function formatTodoDate(createdAt) {
  const date = new Date(createdAt);
  const today = new Date();
  const yesterday = new Date(today);
  yesterday.setDate(yesterday.getDate() - 1);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è
  if (date.toDateString() === today.toDateString()) {
    return `—Å–µ–≥–æ–¥–Ω—è –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –≤—á–µ—Ä–∞
  if (date.toDateString() === yesterday.toDateString()) {
    return `–≤—á–µ—Ä–∞ –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É
  return date.toLocaleDateString('ru-RU', { 
    day: '2-digit', 
    month: '2-digit', 
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function initializeDragAndDrop() {
  const dragContainer = document.getElementById('todos-drag-container');
  if (!dragContainer) {
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const todoItems = dragContainer.querySelectorAll('.todo-checklist-item');
  
  if (todoItems.length === 0) {
    return;
  }
  
  let draggedElement = null;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  dragContainer.addEventListener('dragstart', (e) => {
    if (e.target.classList.contains('todo-checklist-item')) {
      draggedElement = e.target;
      e.target.style.opacity = '0.5';
    }
  });
  
  dragContainer.addEventListener('dragend', (e) => {
    if (e.target.classList.contains('todo-checklist-item')) {
      e.target.style.opacity = '1';
      draggedElement = null;
    }
  });
  
  dragContainer.addEventListener('dragover', (e) => {
    e.preventDefault();
  });
  
  dragContainer.addEventListener('drop', (e) => {
    e.preventDefault();
    
    if (draggedElement && e.target.classList.contains('todo-checklist-item')) {
      const dropTarget = e.target;
      const container = dragContainer;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
      const draggedRect = draggedElement.getBoundingClientRect();
      const dropRect = dropTarget.getBoundingClientRect();
      
      if (draggedRect.top < dropRect.top) {
        // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–Ω–∏–∑
        container.insertBefore(draggedElement, dropTarget.nextSibling);
      } else {
        // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö
        container.insertBefore(draggedElement, dropTarget);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
      updateTodoPriorities();
    }
  });
}

async function updateTodoPriorities() {
  const dragContainer = document.getElementById('todos-drag-container');
  if (!dragContainer) return;
  
  const todoItems = dragContainer.querySelectorAll('.todo-checklist-item');
  
  for (let i = 0; i < todoItems.length; i++) {
    const item = todoItems[i];
    const todoId = item.dataset.id;
    
    // –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ –∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π
    const newPriority = i < 3 ? 'high' : 'normal';
    
    try {
      const result = await safeFetch(`/api/morning-todos/${todoId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ priority: newPriority, order: i })
      });
      
      if (result !== null) {
        // –û–±–Ω–æ–≤–ª—è–µ–º data-priority –≤ DOM
        item.dataset.priority = newPriority;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã –¥–ª—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è
        if (newPriority === 'high') {
          item.classList.add('high-priority-task', 'top-three-task');
        } else {
          item.classList.remove('high-priority-task', 'top-three-task');
        }
      } else {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${todoId}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${todoId}:`, error);
    }
  }
}

async function createMorningTodo() {
  const textarea = document.querySelector('#todo-text');
  const select = document.querySelector('#todo-priority');
  
  if (!textarea || !select) return;
  
  const todoText = textarea.value.trim();
  if (!todoText) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
    return;
  }
  
  try {
    const today = getCurrentDateAtMidnight().toISOString().split('T')[0];
    const response = await safeFetch('/api/morning-todos', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        date: today,
        todo_text: todoText,
        priority: select.value
      })
    });
    
    if (response.ok) {
      // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
      document.getElementById('add-todo-form').style.display = 'none';
      document.getElementById('morning-todos-checklist').style.display = 'block';
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      textarea.value = '';
      select.value = 'normal';
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await loadMorningTodosInModal();
      
      showNotification('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
    } else {
      const error = await response.json();
      showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.detail}`, 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
  }
}

async function toggleTodoComplete(todoId) {
  try {
    const todoItem = document.querySelector(`.todo-checklist-item[data-id="${todoId}"]`);
    if (!todoItem) {
      console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', todoId);
      return;
    }
    const isCompleted = todoItem.classList.contains('completed');
    
    const result = await safeFetch(`/api/morning-todos/${todoId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        completed: !isCompleted,
        date: !isCompleted ? getCurrentDateAtMidnight().toISOString().split('T')[0] : undefined
      })
    });
    
    if (result) {
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      await loadMorningTodosInModal();
      showNotification(`‚úÖ –ó–∞–¥–∞—á–∞ ${!isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`, 'success');
    } else {
      showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
  }
}

async function deleteMorningTodo(todoId) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) return;
  
  try {
    const result = await safeFetch(`/api/morning-todos/${todoId}`, {
      method: 'DELETE'
    });
    
    if (result !== null) {
      await loadMorningTodosInModal();
      showNotification('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
    } else {
      showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', 'error');
  }
}

function editMorningTodo(todoId) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  showNotification('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'info');
}

// ===== EVENING CONCLUSIONS FUNCTIONALITY =====

function initializeEveningConclusions() {
  console.log('üåô –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Evening Conclusions');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏-—Å–ª–æ—Ç–∞
  const slotBtn = document.getElementById('evening-conclusions-slot-btn');
  if (slotBtn) {
    slotBtn.addEventListener('click', showEveningConclusionsModal);
  }
  
  loadEveningConclusions();
}

async function loadEveningConclusions() {
  try {
    const today = getCurrentDateAtMidnight().toISOString().split('T')[0];
    const conclusions = await safeFetch(`/api/evening-conclusions?date=${today}`);
    
    if (!conclusions) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Evening Conclusions');
      return;
    }
    
    renderEveningConclusions(conclusions);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Evening Conclusions:', error);
  }
}

async function loadEveningConclusionsInModal() {
  try {
    const today = getCurrentDateAtMidnight().toISOString().split('T')[0];
    const conclusions = await safeFetch(`/api/evening-conclusions?date=${today}`);
    
    if (!conclusions) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Evening Conclusions');
      return;
    }
    
    const modalList = document.getElementById('evening-conclusions-modal-list');
    if (!modalList) return;
    
    if (conclusions.length === 0) {
      modalList.innerHTML = '<div style="text-align: center; color: #666; font-size: 12px; padding: 10px;">–ù–µ—Ç –≤—ã–≤–æ–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</div>';
      return;
    }
    
    modalList.innerHTML = conclusions.map(conclusion => `
      <div class="conclusion-item" data-id="${conclusion.id}" style="background: white; border: 1px solid #ddd; border-radius: 6px; padding: 8px; margin-bottom: 6px; font-size: 13px;">
        <div class="conclusion-text" style="margin-bottom: 4px; line-height: 1.4;">${escapeHtml(conclusion.conclusion_text)}</div>
        <div class="conclusion-meta" style="display: flex; justify-content: space-between; align-items: center; font-size: 11px; color: #666;">
          <span class="mood-badge mood-${conclusion.mood}" style="padding: 2px 6px; border-radius: 3px; font-size: 10px; background: ${getMoodColor(conclusion.mood)}; color: white;">${getMoodLabel(conclusion.mood)}</span>
          <div class="conclusion-actions">
            <button class="delete-btn" onclick="deleteEveningConclusion(${conclusion.id})" title="–£–¥–∞–ª–∏—Ç—å" style="background: none; border: none; cursor: pointer; color: #ff6b6b;">üóëÔ∏è</button>
          </div>
        </div>
      </div>
    `).join('');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Evening Conclusions –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', error);
  }
}

function renderEveningConclusions(conclusions) {
  const container = document.getElementById('evening-conclusions-list');
  if (!container) return;
  
  if (conclusions.length === 0) {
    container.innerHTML = '<div style="text-align: center; color: #666; font-size: 12px; padding: 10px;">–ù–µ—Ç –≤—ã–≤–æ–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</div>';
    return;
  }
  
  container.innerHTML = conclusions.map(conclusion => `
    <div class="conclusion-item" data-id="${conclusion.id}">
      <div class="conclusion-text">${escapeHtml(conclusion.conclusion_text)}</div>
      <div class="conclusion-meta">
        <span class="mood-badge mood-${conclusion.mood}">${getMoodLabel(conclusion.mood)}</span>
        <div class="conclusion-actions">
          <button class="edit-btn" onclick="editEveningConclusion(${conclusion.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
          <button class="delete-btn" onclick="deleteEveningConclusion(${conclusion.id})" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
        </div>
      </div>
    </div>
  `).join('');
}

function getMoodLabel(mood) {
  const labels = {
    'positive': 'üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ',
    'neutral': 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ',
    'negative': 'üòî –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ'
  };
  return labels[mood] || mood;
}

function getMoodColor(mood) {
  const colors = {
    'positive': '#28a745',
    'neutral': '#007bff',
    'negative': '#dc3545'
  };
  return colors[mood] || '#007bff';
}

function showEveningConclusionsModal() {
  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Evening Conclusions –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
  eventDetails.innerHTML = `
    <div class="event-block">
      <div class="evening-conclusions-header">
        <h3>üåô Evening Conclusions</h3>
        <button id="close-evening-conclusions-btn" class="close-btn">√ó</button>
      </div>
      
      <div id="evening-conclusions-modal-list" style="max-height: 300px; overflow-y: auto; margin-bottom: 15px;"></div>
      
      <div style="margin-bottom: 15px;">
        <label style="display: block; margin-bottom: 5px; font-weight: 600;">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤—ã–≤–æ–¥:</label>
        <textarea id="conclusion-text" placeholder="–û–ø–∏—à–∏—Ç–µ –∏—Ç–æ–≥–∏ –¥–Ω—è..." style="width: 100%; height: 100px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-family: inherit; resize: vertical;"></textarea>
      </div>
      
      <div style="margin-bottom: 15px;">
        <label style="display: block; margin-bottom: 5px; font-weight: 600;">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</label>
        <select id="conclusion-mood" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-family: inherit;">
          <option value="positive">üòä –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ</option>
          <option value="neutral" selected>üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ</option>
          <option value="negative">üòî –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ</option>
        </select>
      </div>
      
      <div class="form-actions">
        <button id="close-evening-conclusions-btn2" class="cancel-btn" style="margin-right: 10px;">–ó–∞–∫—Ä—ã—Ç—å</button>
        <button id="create-conclusion-btn" class="primary-btn">–î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥</button>
      </div>
    </div>
  `;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã
  loadEveningConclusionsInModal();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const closeBtn = document.getElementById('close-evening-conclusions-btn');
  const closeBtn2 = document.getElementById('close-evening-conclusions-btn2');
  const createBtn = document.getElementById('create-conclusion-btn');
  
  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      eventDetails.innerHTML = '';
    });
  }
  
  if (closeBtn2) {
    closeBtn2.addEventListener('click', () => {
      eventDetails.innerHTML = '';
    });
  }
  
  if (createBtn) {
    createBtn.addEventListener('click', createEveningConclusion);
  }
  
  // –§–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
  setTimeout(() => {
    const textarea = document.querySelector('#conclusion-text');
    if (textarea) textarea.focus();
  }, 100);
}

async function createEveningConclusion() {
  const textarea = document.querySelector('#conclusion-text');
  const select = document.querySelector('#conclusion-mood');
  
  if (!textarea || !select) return;
  
  const conclusionText = textarea.value.trim();
  if (!conclusionText) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∞');
    return;
  }
  
  try {
    const today = getCurrentDateAtMidnight().toISOString().split('T')[0];
    const result = await safeFetch('/api/evening-conclusions', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        date: today,
        conclusion_text: conclusionText,
        mood: select.value
      })
    });
    
    if (result !== null) {
      closeModal(document.querySelector('.modal'));
      loadEveningConclusions();
      loadEveningConclusionsInModal(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      showNotification('‚úÖ –í—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
    } else {
      showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞', 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞', 'error');
  }
}

async function deleteEveningConclusion(conclusionId) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤—ã–≤–æ–¥?')) return;
  
  try {
    const result = await safeFetch(`/api/evening-conclusions/${conclusionId}`, {
      method: 'DELETE'
    });
    
    if (result !== null) {
      loadEveningConclusions();
      showNotification('‚úÖ –í—ã–≤–æ–¥ —É–¥–∞–ª–µ–Ω', 'success');
    } else {
      showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞', 'error');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', error);
    showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞', 'error');
  }
}

function editEveningConclusion(conclusionId) {
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
  showNotification('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', 'info');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}
