#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤
"""

import os
import sys
from pathlib import Path

def test_paths():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    current_dir = os.getcwd()
    print(f"üìÅ –¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥: {current_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PYTHONPATH
    pythonpath = os.environ.get('PYTHONPATH', '')
    print(f"üêç PYTHONPATH: {pythonpath}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    key_dirs = ['src', 'logs', 'venv']
    for dir_name in key_dirs:
        if os.path.exists(dir_name):
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    key_files = ['src/api/main.py', 'requirements.txt', 'env.example.txt']
    for file_name in key_files:
        if os.path.exists(file_name):
            print(f"‚úÖ –§–∞–π–ª {file_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤ sys.path –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω {current_dir} –≤ sys.path")
    
    try:
        from src.utils.db_utils import DatabaseManager
        print("‚úÖ –ò–º–ø–æ—Ä—Ç DatabaseManager —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DatabaseManager: {e}")
    
    try:
        from src.core.logging_config import setup_logging
        print("‚úÖ –ò–º–ø–æ—Ä—Ç setup_logging —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ setup_logging: {e}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    try:
        os.makedirs("logs", exist_ok=True)
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
        test_log_file = "logs/test.log"
        with open(test_log_file, "w") as f:
            f.write("Test log entry\n")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ —É—Å–ø–µ—à–Ω–∞")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove(test_log_file)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    env_vars = ['DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_HOST', 'DB_PORT']
    for var in env_vars:
        value = os.environ.get(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')
        print(f"   {var}: {value}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_paths()
